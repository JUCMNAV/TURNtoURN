module Process;

create OUT : Urn from IN : Turn;

-- Contains all rules used to process a node in order to initialize it.
-- These rules are called in two cases. The first is in a matched rule,
-- to initialize the matched item. The second is in a called rule, to 
-- initialize some object created during a different object's matching.

rule processAndFork(sAndFork: Turn!AndFork){
	using{
		tAndFork : Urn!AndFork = thisModule.retrieveNode(sAndFork);	
		vNumberOfTerminatingNodes : Integer = 
			if(not sAndFork.connectingAndBody.oclIsUndefined()) then
				sAndFork.pathbody -> select(pb|pb.pathEnd.oclIsUndefined()) -> size()
			else
				0
			endif;
		vPathEnd : Turn!PathNode = OclUndefined;
		vNextPred : Turn!PathNode = OclUndefined;
		vNextNode : Turn!PathNode = OclUndefined;
		vEmptyPt : Turn!PathNode = OclUndefined;
	}
	do{
		thisModule.tUCMmap.nodes <- thisModule.tUCMmap.nodes.including(tAndFork);
		
		for(elem in sAndFork.pathbody){
			thisModule.addSucc(tAndFork, thisModule.createNodeConnection());
		}
		
		thisModule.collectReferencedEnds(sAndFork.pathbody -> collect(pb|pb.pathNodes));
		
		for(pathend in sAndFork.pathbody -> collect(pb|pb.pathEnd)){
			thisModule.processPathEnd(pathend);	
		}
		
		if(not sAndFork.connectingAndBody.oclIsUndefined()){
			vNextNode <- thisModule.handleForkJoin(tAndFork, sAndFork.connectingAndBody, vNumberOfTerminatingNodes);
			
			if(vNumberOfTerminatingNodes = 2){
				vEmptyPt <- thisModule.createEmptyPoint();
				thisModule.addPred(vNextNode, tAndFork.nextFreeConnection());
				thisModule.addPred(vNextNode, vEmptyPt.nextFreeConnection());
				thisModule.addPred(vEmptyPt, tAndFork.nextFreeConnection());
			}
			
			if(sAndFork.connectingAndBody.pathNodes -> isEmpty()){
				thisModule.connectEndToNextNode(sAndFork.connectingAndBody, vNextNode.nextFreeConnection());
			}
			thisModule.connectNodes(sAndFork.connectingAndBody, sAndFork, vNextNode);	
		}
		
		thisModule.connectNodesAfterFork(sAndFork, sAndFork.pathbody);
		tAndFork;	
	}
}

rule processBinding(s: Turn!Binding, tBinding: Urn!Binding){
	using{
		vBoundTerm : Turn!Binding = OclUndefined;
		vStubItem : Turn!Stub = OclUndefined;
		vStub: Urn!Stub = OclUndefined;
	}
	do{
		if(not s.binding.oclIsUndefined()){
			vBoundTerm <- s.binding;
		}
		else if(not s.bindings.oclIsUndefined()){
			vBoundTerm <- s.bindings;
		}
		if(not vBoundTerm.oclIsUndefined()){
			if(not vBoundTerm.stubParam.stubDec.oclIsUndefined()){
				vStubItem <- vBoundTerm.stubParam.stubDec.stub;
			}
			else{
				vStubItem <- vBoundTerm.stubParam.stub;
			}
			
			if(not thisModule.retrieveNode(vStubItem).pred -> isEmpty() and s.index <= thisModule.retrieveNode(vStubItem).pred -> size()){
				if(s.oclIsTypeOf(Turn!InBinding)){
					tBinding.stubEntry <- thisModule.retrieveNode(vStubItem).pred -> at(s.index);
				}
				else if(s.oclIsTypeOf(Turn!OutBinding)){
					tBinding.stubExit <- thisModule.retrieveNode(vStubItem).pred -> at(s.index);
				}
			}
		}	
	}
}

rule processEndPoint(node: Turn!PathNode, tEndPoint: Turn!EndPoint){
	do{
		tEndPoint.postcondition <- node.condition;
		tEndPoint.name <- node.turnGetLongestName();
		
		thisModule.endPointMap <- thisModule.endPointMap.including(node, tEndPoint);
		
		if(node.epConnect.pbody.pathNodes -> isEmpty()){
			--Using backlinks to connect orFork
			thisModule.currentOrFork <- node.epConnect.pbody.orFork;
			if(not thisModule.currentOrFork.oclIsUndefined()){
				thisModule.condExpression <- thisModule.currentOrFork.condition.expression.asString();
				thisModule.addPred(tEndPoint, thisModule.retrieveNode(thisModule.currentOrFork.orBody.orFork).succ -> any(s|s.condition.expression=thisModule.condExpression));
			}
			
			--Using backlinks to connect andFork
			thisModule.currentAndFork <- node.epConnect.pbody.andFork;
			if(not thisModule.currentAndFork.oclIsUndefined()){
				thisModule.addPred(tEndPoint, thisModule.retrieveNode(thisModule.currentAndFork).nextFreeConnection());
			}
		}
		
		tEndPoint;
	}
}

rule processPathEnd(pathend: Turn!PathNode){
	do{
		if(pathend.oclIsTypeOf(Turn!EndpointWithConnect)){
			if(thisModule.retrieveNode(pathend.regularEnd).oclIsUndefined()){
				thisModule.processEndPoint(pathend.regularEnd, thisModule.createEndPoint(pathend.regularEnd));
			}
		}
		else if(pathend.oclIsTypeOf(Turn!AndFork)){
			thisModule.processAndFork(pathend);
			thisModule.connectForkNodes(pathend);
		}
		else if(pathend.oclIsTypeOf(Turn!OrFork)){
			thisModule.processOrFork(pathend);
			if(not pathend.body.oclIsUndefined()){
				thisModule.connectForkNodes(pathend);
			}
		}
		else if(pathend.oclIsTypeOf(Turn!Stub)){
			thisModule.processStub(pathend);
		}
	}
}

rule processTimer(timerObj : Turn!Timer){
	using{
		tTimer : Urn!Timer = thisModule.retrieveNode(timerObj);
	}
	do{
		thisModule.tUCMmap.nodes <- thisModule.tUCMmap.nodes.including(tTimer);
		
		if(not timerObj.timeoutPath.oclIsUndefined()){
			thisModule.addSucc(tTimer, thisModule.createNodeConnection());
			thisModule.collectReferencedEnds(timerObj.timeoutPath.pathNodes);
			thisModule.processPathEnd(timerObj.timeoutPath.pathEnd);
			
			if(not timerObj.timeoutCondition.oclIsUndefined()){
				tTimer.succ -> at(2).condition <- thisModule.createCondition(timerObj.timeoutCondition.expression.content -> first());
			}
			
			if(timerObj.timeoutPath.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
				thisModule.addPred(thisModule.retrieveNode(timerObj.timeoutPath.pathEnd.regularEnd), tTimer.succ -> at(2));
			}
		}
		
		tTimer;
	}
}

rule processOrFork(sOrFork: Turn!OrFork){
	using{
		tOrFork : Urn!OrFork = thisModule.retrieveNode(sOrFork);
		vElements : Sequence(Turn!RegularOrFork) = Sequence{};
		tConn : Urn!NodeConnection = OclUndefined;
		vNode : Turn!OrFork = OclUndefined;
		vHasTarget : Boolean = OclUndefined;
		vNumberOfTerminatingNodes : Integer =
			if(sOrFork.body.oclIsUndefined()) then
				0
			else
				sOrFork.body.regularBody -> collect(pb|pb.pathBody) -> select(pb|pb.pathEnd.oclIsUndefined()) -> size()
			endif;
		vConditions : Sequence(Turn!Condition) = OclUndefined;
		vNextNode : Turn!PathNode = OclUndefined;
		vNextPred : Turn!PathNode = OclUndefined;
		vEmptyPt : Turn!PathNode = OclUndefined;
	}
	do{
		thisModule.tUCMmap.nodes <- thisModule.tUCMmap.nodes.including(tOrFork);
		
		if(not sOrFork.body.oclIsUndefined()){
			vElements <- vElements.union(sOrFork.body.regularBody);
		}
		else if(not sOrFork.connectingOrBody.oclIsUndefined()){
			vElements <- vElements.including(sOrFork);	
		}
		
		for(elem in vElements){
			tConn <- thisModule.createNodeConnection();
			tConn.condition <- thisModule.resolveTemp(elem.condition, 'tCondition');
			thisModule.addSucc(tOrFork, tConn);
		}
		
		if(not sOrFork.body.oclIsUndefined()){
			thisModule.collectReferencedEnds(sOrFork.getPathBodies() -> collect(pb|pb.pathNodes));
			
			for(pathend in sOrFork.getPathBodies() -> collect(pb|pb.pathEnd)){
				thisModule.processPathEnd(pathend);
			}
		}

		if(sOrFork.body.oclIsUndefined()){
			vNode <- sOrFork;
			vHasTarget <- true;
		}
		else if(sOrFork.getPathBodies() -> size() = 1){
			vNode <- sOrFork.getPathBodies().first().orFork;
			vHasTarget <- sOrFork.body.elseBody.oclIsUndefined();
		}
		
		if(not vNode.oclIsUndefined()){
			tConn <- thisModule.createNodeConnection();
			tConn.condition <- thisModule.createCondition('!' + vNode.condition.expression.asString());
			if(vHasTarget){
				tConn.target <- thisModule.createEndPoint(sOrFork);
			}
			thisModule.addSucc(tOrFork, tConn);
		}
		
		if(not sOrFork.connectingOrBody.oclIsUndefined()){
			vNextNode <- thisModule.handleForkJoin(tOrFork, sOrFork.connectingOrBody, vNumberOfTerminatingNodes);
			
			if(vNumberOfTerminatingNodes = 2){
				vEmptyPt <- thisModule.createEmptyPoint();
				thisModule.addPred(vNextNode, tOrFork.nextFreeConnection());
				thisModule.addPred(vNextNode, vEmptyPt.nextFreeConnection());
				thisModule.addPred(vEmptyPt, tOrFork.nextFreeConnection());
			}
			
			if(sOrFork.connectingOrBody.pathNodes -> isEmpty()){
				vConditions <- Sequence{};
				
				if(not sOrFork.body.oclIsUndefined()){
					vConditions <- vConditions.union(sOrFork.getPathBodies() -> select(pb|pb.pathEnd.oclIsUndefined()) -> collect(pb|pb.orFork.condition));
				}
				else{
					vConditions <- vConditions.including(sOrFork.condition);
				}
				
				
				for(condition in vConditions){
					if(vNextNode.oclIsTypeOf(Urn!OrFork)){
						vNextPred <- vNextNode.succ -> any(s|s.condition.expression=condition.expression.asString());
					}
					else if(vNextNode.oclIsTypeOf(Urn!OrJoin)){
						vNextPred <- vNextNode.nextFreeConnection();
					}
					
					thisModule.connectEndToNextNode(sOrFork.connectingOrBody, vNextPred);
					
					if(sOrFork.connectingOrBody.referencedEnd.oclIsTypeOf(Turn!RespRef)){
						thisModule.addPred(thisModule.retrieveNode(sOrFork.connectingOrBody.referencedEnd), vNextPred);
					}
				}
			}
			
			thisModule.connectNodes(sOrFork.connectingOrBody, sOrFork, vNextNode);
		}
		
		if(not sOrFork.body.oclIsUndefined()){
			thisModule.connectNodesAfterFork(sOrFork, sOrFork.getPathBodies());
		}
		
		tOrFork;
	}
}

rule processStub(sStub:Turn!Stub){
	using{
		vAllStubs : Sequence(Turn!Stub) = OclUndefined;
		tStub : Urn!Stub = thisModule.retrieveNode(sStub);
		vPathEnd : Urn!PathEnd = OclUndefined;
		vStubOutPathPosition : Integer = OclUndefined;
		vPaths : Sequence(Turn!PathBody) = OclUndefined;
		vNextNode : Turn!PathNode = OclUndefined;
	}
	do{
		if(not sStub.params.oclIsUndefined()){
			tStub.bindings <- sStub.params.plugin -> collect(p|thisModule.resolveTemp(p, 'tPluginBinding'));
		}
		else{
			vAllStubs <- Turn!UCMmap.allInstances() -> any(m|m.name=thisModule.tUCMmap.name).stubs;
			tStub.bindings <- vAllStubs -> collect(s|s.params.plugin) -> flatten() -> collect(p|thisModule.resolveTemp(p, 'tPluginBinding'));
		}
		
		thisModule.tUCMmap.nodes <- thisModule.tUCMmap.nodes.including(tStub);
		
		vPaths <- sStub.outPaths -> flatten() -> collect(op|op.path) -> flatten();
		thisModule.collectReferencedEnds(vPaths -> collect(p|p.pathNodes));
		
		for(pathend in vPaths -> collect(pb|pb.pathEnd)){
			thisModule.processPathEnd(pathend);	
		}
		
		for(outPath in sStub.outPaths -> flatten()){
			thisModule.stubOutPathNodeConnection <- thisModule.createNodeConnection();
			thisModule.addSucc(tStub, thisModule.stubOutPathNodeConnection);
			if(outPath.threshold <> 0){
				thisModule.stubOutPathNodeConnection.threshold <- outPath.threshold.toString();
			}
		}
		
		--collecting nodes from connecting stub body
		if(not sStub.connectingStubBody.oclIsUndefined()){
			thisModule.outPaths <- sStub.outPaths -> select(op|op.path.pathEnd.oclIsUndefined());
			thisModule.numberOfTerminatingStubNodes <- thisModule.outPaths -> size();
			
			if(sStub.outPaths -> isEmpty()){
				thisModule.addSucc(tStub, thisModule.createNodeConnection());
				thisModule.outPathNumber <- Sequence{1};
			}
			else{
				thisModule.outPathNumber <- thisModule.outPaths -> collect(op|op.index);	
			}
			
			vNextNode <- thisModule.handleForkJoin(tStub, sStub.connectingStubBody, thisModule.numberOfTerminatingStubNodes);
			
			if(thisModule.numberOfTerminatingStubNodes = 2){
				thisModule.addPred(vNextNode, tStub.succ -> at(thisModule.outPathNumber -> at(1)));
				thisModule.addPred(vNextNode, tStub.succ -> at(thisModule.outPathNumber -> at(2)));
				thisModule.outPathNumber <- Sequence{1};
			}
			
			if(sStub.connectingStubBody.pathNodes -> isEmpty()){
				thisModule.connectEndToNextNode(sStub.connectingStubBody, vNextNode.succ -> at(thisModule.outPathNumber -> first()));
			}
			thisModule.connectNodes(sStub.connectingStubBody, sStub, thisModule.retrieveNode(sStub));

			if(sStub.pbody.pathNodes -> isEmpty() and not sStub.pbody.orFork.oclIsUndefined()){
				thisModule.addPred(tStub, thisModule.retrieveNode(sStub.pbody.orFork.orBody.orFork).succ -> at(thisModule.orForkNodeConnCounter));
				thisModule.orForkNodeConnCounter <- thisModule.orForkNodeConnCounter.inc();
			}
		}
		
		vStubOutPathPosition <- 1;
		
		for(pathend in sStub.outPaths -> collect(op|op.path.pathEnd) -> flatten() -> select(pe|pe.oclIsTypeOf(Turn!EndpointWithConnect))){
			thisModule.addPred(thisModule.retrieveNode(pathend.regularEnd), tStub.succ -> at(vStubOutPathPosition));
			vStubOutPathPosition <- vStubOutPathPosition.inc();
		}
		
		tStub;
	}
}

rule processUCMmap(tUCMmap: Urn!UCMmap, paths: Sequence(Turn!Path)){
	do{
		thisModule.tUCMmap <- tUCMmap;
		thisModule.collectReferencedEnds(paths -> flatten() -> collect(p|p.pathBody) -> flatten() -> collect(pb|pb.pathNodes) -> flatten());
		
		--Regular ends
		for(path in paths){
			thisModule.processPathEnd(path.pathBody.pathEnd);
			
			if(path.pathBody.pathNodes -> isEmpty()){
				if(path.startPoint.connect.oclIsUndefined() or thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> isEmpty()){
					thisModule.connectEndToNextNode(path.pathBody, thisModule.retrieveNode(path.startPoint).nextFreeConnection());
				}
				else{
					thisModule.termToSet <- thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> first();
					thisModule.addPred(thisModule.termToSet, thisModule.retrieveNode(path.startPoint).nextFreeConnection());
					thisModule.connectEndToNextNode(path.pathBody, thisModule.termToSet.nextFreeConnection());
				}
			}
			else{
				thisModule.connectNodes(path.pathBody, path.startPoint, thisModule.retrieveNode(path.startPoint));
			}
		}
		
		tUCMmap.connections <- tUCMmap.nodes -> flatten() -> collect(of|of.succ) -> flatten();	
	}
}