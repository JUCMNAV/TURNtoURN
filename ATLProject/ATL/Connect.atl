module Connect;

create OUT : Urn from IN : Turn;

--	File: Connect.atl
--
--	Description: 
--  	Contains all rules used to handle connections between nodes.
--  	Handles exploration of nodes to find PathBodies and connect their nodes.
--
--	Contents:
--      * rule connectUCMmap(tUCMmap: Urn!UCMmap, paths: Sequence(Turn!Path))
--      * rule connectPathBody(sPathBody: Urn!PathBody, tStartNode: Urn!PathNode, tAlternatePathEnd: Urn!PathNode)
--      * rule connectPathBodyNodes(tStartNode: Urn!PathNode, sPathNodes: Sequence(Turn!PathNode))
--      * rule connectLastNodeToPathEnd(tLastNode: Urn!PathNode, sPathBody: Turn!PathBody, tAlternatePathEnd: Urn!PathNode)
--      * rule connectPathEnd(sPathEnd : Turn!PathEnd, tAlternatePathEnd : Urn!PathEnd)
--      * rule connectPathEndPathBodies(sNode: Turn!PathBodyNode, sPathBodies: Sequence(Turn!PathBody), rule connectIndexedPathBodies()
--      * rule setOrForkConditionsAndCreateAlternateBranches()
--      * rule setStubThresholds()
--      * rule connectComponentRef(sComponentRef: Turn!ComponentRef, tComponentRef: Urn!ComponentRef)

--------------------------------------------------------------------------------------------------------------------

-- connectUCMmap is the main entry point for all node connection.
rule connectUCMmap(tUCMmap: Urn!UCMmap, paths: Sequence(Turn!Path)){
	using{
		tStartPoint : Urn!StartPoint = OclUndefined;
	}
	do{
		thisModule.tUCMmap <- tUCMmap;

		for(sPath in paths){
			tStartPoint <- thisModule.getOrCreateStartPoint(sPath.startPoint);
			thisModule.connectPathBody(sPath.pathBody, tStartPoint, OclUndefined);
		}
		
		-- I don't like the approach I've used below. The reason I have to do it as such is
		-- because Stubs need to be processed last so that all other elements in the path have
		-- been handled once they are considered (due to the fact stubs have indexes referencing)
		-- specific connections). There is probably a cleaner way to do this.
		thisModule.connectIndexedPathBodies();
		thisModule.setOrForkConditionsAndCreateAlternateBranches();
		thisModule.setStubThresholds();
		
		tUCMmap.connections <- tUCMmap.nodes -> flatten() -> collect(of|of.succ) -> flatten();
	}
}

-- Connects a pathbody as such: startNode -> (pathNodes)* -> pathEnd (-> more nodes if pathEnd is not endPoint)*
-- If no pathEnd is found, uses the input alternate pathend. Lastly calls to connect the pathEnd, extending the 
-- total number of nodes to include those that follow the pathEnd. 
rule connectPathBody(sPathBody: Urn!PathBody, tStartNode: Urn!PathNode, tAlternatePathEnd: Urn!PathNode){
	using{
		tCurrentNode : Urn!PathNode = OclUndefined;
		tLastNode : Urn!PathNode = tStartNode;
		sPathEnd : Urn!PathEnd = OclUndefined;
	}
	do{
		thisModule.collectPathBodyNodesAndEnds(sPathBody);
		tLastNode <- thisModule.connectPathBodyNodes(tStartNode, sPathBody.pathNodes);
		thisModule.connectLastNodeToPathEnd(tLastNode, sPathBody, tAlternatePathEnd);			
		thisModule.connectPathEnd(sPathBody.pathEnd, tAlternatePathEnd);
		
		tAlternatePathEnd;
	}
}

-- Connects tStartNode to the first Urn node corresponding to nodes in sPathNodes,
-- then connects the nodes in sPathNodes sequentially. Returns the last node in
-- this chain (if sPathNodes is empty, this is tStartNode).
rule connectPathBodyNodes(tStartNode: Urn!PathNode, sPathNodes: Sequence(Turn!PathNode)){
	using{
		tCurrentNode : Urn!PathNode = OclUndefined;
		tLastNode : Urn!PathNode = tStartNode;	
	}
	do{
		for(sCurrentNode in sPathNodes){
			if(sCurrentNode.oclIsTypeOf(Turn!Timer)){
				thisModule.initTimer(sCurrentNode);
			}
			
			tCurrentNode <- thisModule.getTargetNode(sCurrentNode);
			thisModule.directConnect(tLastNode, tCurrentNode);
			tLastNode <- tCurrentNode;
		}
		
		tLastNode;
	}
}

-- Connects the input last node to the pathEnd of sPathBody. If the pathbody has an index that is non-zero, adds it
-- to the stub index map to be handled later.
rule connectLastNodeToPathEnd(tLastNode: Urn!PathNode, sPathBody: Turn!PathBody, tAlternatePathEnd: Urn!PathNode){
	using{
		sPathEnd : Turn!PathBodyNode = sPathBody.pathEnd;
		tPathEnd : Urn!PathNode = OclUndefined;
	}
	do{
		tPathEnd <- thisModule.getOrCreatePathEnd(sPathBody);
			
		if(not tPathEnd.isDefined()){
			tPathEnd <- tAlternatePathEnd;
		}
		
		if(not tPathEnd.isDefined()){
			-- No path end found. Occurs for ending of nested and/or joins. Will be connected with parent's join.
		}
		else if(sPathBody.index > 0){
			-- Need to handle pathbody connection using indexes so store in the index map.
			-- These connections will be processed after the rest of the UCMmap is done.
			thisModule.addConnectionToStubIndexMap(tLastNode, tPathEnd, sPathBody.index);
		}
		else{
			thisModule.connect(tLastNode, tPathEnd);
		}	
	}
}

-- Connects the nodes of the input pathEnd, resulting in the pathEnd being connected to all its pathbodies. 
-- Results in a connection as such: inputPathEnd -> (firstPathBodyNodes)  ->   pathEndOfPathEnd
--                                               -> (secondPathBodyNodes) ->
--                                               -> (nthPathBodyNodes)    ->
-- or simply as inputPathEnd -> pathEndOfPathEnd when no pathBodies.
rule connectPathEnd(sPathEnd : Turn!PathEnd, tAlternatePathEnd : Urn!PathEnd){
	using{
		sPathBodies : Sequence(Turn!PathBodyNode) = Sequence {};
		sConnectingBody : Turn!PathBody = OclUndefined;
	}
	do{
		if(sPathEnd.oclIsTypeOf(Turn!EndpointWithConnect) or not sPathEnd.isDefined()){
			-- Do nothing as we do not need to connect this PathEnd.
		}
		else{
			-- sPathEnd will be a OrFork, AndFork, or Stub
			thisModule.connectPathEndPathBodies(sPathEnd, sPathEnd.getPathBodies(), 
												sPathEnd.getConnectingBody(), tAlternatePathEnd);
		}
	}
}

-- This goes over the pathEnd, connecting its various pathbodies,
-- which is equivalent to saying this connects that pathEnd.
rule connectPathEndPathBodies(sNode: Turn!PathBodyNode, sPathBodies: Sequence(Turn!PathBody), 
							  sConnectingBody: Turn!PathBody, tNextConnectingNode : Urn!PathNode){
	using{
		tNode: Urn!PathNode = thisModule.getTargetNode(sNode);
		vNumberOfNonTerminatingNodes : Integer = sPathBodies -> select(pb|pb.isDefined()) 
															 -> select(pb|not thisModule.getOrCreatePathEnd(pb).oclIsTypeOf(Urn!EndPoint)) 
															 -> size();
		tLastNode : Urn!PathNode = 
			if(not sConnectingBody.isDefined() or vNumberOfNonTerminatingNodes < 2) then
				OclUndefined
			else
				if(sNode.oclIsTypeOf(Turn!AndFork)) then
					thisModule.createAndJoin()
				else
					thisModule.createOrJoin()
				endif
			endif;
	}
	do{
		for(sPathBody in sPathBodies -> select(pb|pb.isDefined())){
			thisModule.connectPathBody(sPathBody, tNode, tLastNode);
		}
		
		if(not tLastNode.isDefined()){
			tLastNode <- tNode;
		}
		
		if(sConnectingBody.isDefined()){
			thisModule.connectPathBody(sConnectingBody, tLastNode, tNextConnectingNode);
		}
	}
}

-- Connects paths for all the pathbodies that had indexes. This only happens in the case of stubs.
rule connectIndexedPathBodies(){
	using{
		tStub : Urn!Stub = OclUndefined;
		tLastNode : Urn!PathNode = OclUndefined;
		tOrJoin : Urn!OrJoin = OclUndefined;
	}
	do{
		-- StubIndexMap has node pairs to be connected and the index to connect them at.
		-- We added these pairs to stubIndexMap in connectLastNodeToPathEnd
		for(vPredIndex in thisModule.stubIndexMap.keySet()){
			for(tNodesToConnect in thisModule.stubIndexMap.get(vPredIndex)){
				tLastNode <- tNodesToConnect.first();
				tStub <- tNodesToConnect.last();
				
				thisModule.connectAtTargetIndex(tLastNode, tStub, vPredIndex);
			}
		}
		
		thisModule.stubIndexMap <- Map{};
	}
}

-- Sets orFork node conditions. Called after connectPathBodiesWithIndexes so that all connections are in place when this is done.
-- Is rather inefficient as it calls allInstances(); I feel this approach can potentially be improved upon.
rule setOrForkConditionsAndCreateAlternateBranches(){
	using{
		vCounter : Integer = 1;
		sOrFork : Turn!OrFork = OclUndefined;
	}
	do{
		for(tOrFork in thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!OrFork))){
			sOrFork <- Turn!OrFork.allInstances() -> any(n|thisModule.resolveTemp(n, 'tOrFork')=tOrFork);
			
			if(sOrFork.condition.isDefined()){ -- Just condition case
				tOrFork.succ.first().condition <- thisModule.resolveTemp(sOrFork.condition, 'tCondition');
				thisModule.connect(tOrFork, thisModule.createEndPoint());
				tOrFork.succ -> at(2).condition <- thisModule.createCondition('!' + sOrFork.condition.expression.asString());
				
			}
			
			if(sOrFork.body.isDefined()){
				for(sRegularOrFork in sOrFork.body.regularBody){
					tOrFork.succ -> at(vCounter).condition <- thisModule.resolveTemp(sRegularOrFork.condition, 'tCondition');
					vCounter <- vCounter + 1;
				}
				
				if(sOrFork.body.elseBody.isDefined()){
					tOrFork.succ.last().condition <- thisModule.createCondition('else');
				}
				else if(sOrFork.body.regularBody -> size() = 1){
					thisModule.connect(tOrFork, thisModule.createEndPoint());
					tOrFork.succ -> at(2).condition <- thisModule.createCondition('!' + 
															sOrFork.body.regularBody.first().condition.expression.asString());
				}
			}
			
			vCounter <- 1;
		}
	}
}

-- Sets stub connection thresholds. Called after connectPathBodiesWithIndexes so that all connections are in place when this is done.
-- Is rather inefficient as it calls allInstances(); I feel this approach can potentially be improved upon.
rule setStubThresholds(){
	using{
		vCounter : Integer = 1;
		sStub : Turn!Stub = OclUndefined;
	}
	do{
		for(tStub in thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!Stub))){
			sStub <- Turn!Stub.allInstances() -> any(n|thisModule.resolveTemp(n, 'tStub')=tStub);
			
			if(sStub.isDefined()){
				for(sOutPath in sStub.outPaths){
					if(sOutPath.threshold <> 0){
						tStub.succ.first().threshold <- sOutPath.threshold.toString();
					}
					
					vCounter <- vCounter + 1;
				}
			}
			else{
				-- Declared using StubDeclaration, no outPaths
			}
		}
	}
}

-- 'Connects' a componentRef by adding references to whatever nodes belong to it.
-- This rule is disjoint from all the other rules above, and is called after the
-- UCMmap has all been connected.
rule connectComponentRef(sComponentRef: Turn!ComponentRef, tComponentRef: Urn!ComponentRef){
	using{
		tPathNode : Urn!PathNode = OclUndefined;
	}
	do{
		for(elem in (sComponentRef.elements.including(sComponentRef.element)) -> select(e|e.oclIsTypeOf(Turn!LongBoundElement))){
			thisModule.updateComponentRefUsingLongBoundElement(elem.from, elem.to, tComponentRef, tComponentRef.diagram.nodes);
		}

		for(elem in (sComponentRef.elements.including(sComponentRef.element)) -> select(e|e.oclIsTypeOf(Turn!BoundElement))){
			tPathNode <- thisModule.getTargetNode(elem.elem);
			
			if(not tPathNode.isDefined()){
				tPathNode <- thisModule.resolveTemp(elem.elem, 'tComponentRef');
				tComponentRef.children <- tComponentRef.children.including(tPathNode);
			}
			else if(not tPathNode.contRef.isDefined() or tPathNode.contRef=tComponentRef.parent){
				tComponentRef.nodes <- tComponentRef.nodes.including(tPathNode);
			}
		}
	}
}