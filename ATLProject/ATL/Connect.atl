module Connect;

create OUT : Urn from IN : Turn;

-- Contains all rules used to handle connections between nodes.
-- Handles exploration of nodes to find PathBodies and connect 
-- the appropriate parts.

rule connectBodyNodes(sPathNodes: Sequence(Turn!PathBodyNode), tPathStart: Urn!PathNode){
	using{
		tNode : Urn!PathNode = OclUndefined;
		tPreviousNode : Urn!PathNode = tPathStart;
	}
	do{
		for(sCurrentNode in sPathNodes){
			if(sCurrentNode.oclIsTypeOf(Turn!Timer)){
				thisModule.initTimer(sCurrentNode);
			}
			
			tNode <- thisModule.retrieveNode(sCurrentNode);
			thisModule.directConnect(tPreviousNode, tNode);
			tPreviousNode <- tNode;
		}
		
		tPreviousNode;
	}
}

rule connectEndpointWithConnect(sEndpointWithConnect: Turn!EndpointWithConnect){
	using{
		tEndPoint : Urn!EndPoint = OclUndefined;
	}
	do{
		if(sEndpointWithConnect.regularEnd.oclIsUndefined()){
			tEndPoint <- thisModule.createEndPoint();
		}
		else if(thisModule.retrieveNode(sEndpointWithConnect.regularEnd).oclIsUndefined()){
			tEndPoint <- thisModule.createEndPoint();
			thisModule.initEndPointUsingEndpointWithConnect(tEndPoint, sEndpointWithConnect);
		}
		else{
			-- EndPoint already exists
		}
		
		if(not tEndPoint.oclIsUndefined()){
			thisModule.endPointMap <- thisModule.endPointMap.including(sEndpointWithConnect.regularEnd, tEndPoint);
		}
		
		-- Return the Urn!EndPoint created using the Turn!EndpointWithConnect
		tEndPoint;
	}
}

rule connectAndFork(sAndFork: Turn!AndFork){
	using{
		tAndFork : Urn!AndFork = thisModule.retrieveNode(sAndFork);
		tAndJoin : Urn!AndJoin = OclUndefined;
		tPathEnd : Urn!PathNode = OclUndefined;
	}
	do{
		if(not sAndFork.connectingAndBody.oclIsUndefined()){
			tAndJoin <- thisModule.createAndJoin();
		}
		
		thisModule.doConnect(sAndFork.pathbody, tAndFork, tAndJoin);
		
		if(not sAndFork.connectingAndBody.oclIsUndefined()){
			tPathEnd <- thisModule.doConnect(Sequence { sAndFork.connectingAndBody }, tAndJoin, OclUndefined);
			
			if(tPathEnd.oclIsUndefined()){
				tPathEnd <- tAndJoin;	
			}
		}
		
		-- Return the final node in the AndFork path or the first node of the following path.
		tPathEnd;
	}
}

rule connectOrFork(sOrFork: Turn!OrFork){
	using{
		tOrFork : Urn!OrFork = thisModule.retrieveNode(sOrFork);
		tOrJoin : Urn!OrJoin = OclUndefined;
		tPathEnd : Urn!PathNode = OclUndefined;
	}
	do{
		if(not sOrFork.connectingOrBody.oclIsUndefined()){
			tOrJoin <- thisModule.createOrJoin();
		}
		
		if(not sOrFork.body.oclIsUndefined()){
			thisModule.doConnect(sOrFork.body.regularBody -> collect(rb|rb.pathBody), tOrFork, tOrJoin);

			if(not sOrFork.body.elseBody.oclIsUndefined()){
				thisModule.doConnect(Sequence { sOrFork.body.elseBody }, tOrFork, tOrJoin);
			}
		}
		
		if(not sOrFork.connectingOrBody.oclIsUndefined()){
			tPathEnd <- thisModule.doConnect(Sequence { sOrFork.connectingOrBody }, tOrJoin, OclUndefined);
			
			if(tPathEnd.oclIsUndefined()){
				tPathEnd <- tOrJoin;	
			}
		}
		
		-- Return the final node in the OrFork path or the first node of the following path.
		tPathEnd;	
	}
}

rule connectStub(sStub: Turn!Stub){
	using{
		tStub : Urn!Stub = thisModule.retrieveNode(sStub);
		tOrJoin : Urn!OrJoin = OclUndefined;
		tPathEnd : Urn!PathNode = OclUndefined;
	}
	do{
		thisModule.initStub(sStub);
		
		if(not sStub.connectingStubBody.oclIsUndefined()){
			tOrJoin <- thisModule.createOrJoin();
		}
		
		thisModule.doConnect(sStub.outPaths -> collect(op|op.path), tStub, tOrJoin);

		if(not sStub.connectingStubBody.oclIsUndefined()){
			tPathEnd <- thisModule.doConnect(Sequence { sStub.connectingStubBody }, tOrJoin, OclUndefined);
			
			if(tPathEnd.oclIsUndefined()){
				tPathEnd <- tOrJoin;	
			}
		}
		
		-- Return the final node in the OrFork path or the first node of the following path.
		tPathEnd;	
	}
}

rule doConnect(sPathBodies : Sequence(Urn!PathBody), tStartNode : Urn!PathNode, tEnd : Urn!OrJoin){
	using{
		tPathEnd : Urn!PathNode = OclUndefined;
		tLastNode : Urn!PathNode = OclUndefined;
	}
	do{
		if(sPathBodies -> isEmpty()){
			thisModule.connect(tStartNode, tEnd);
		}
		else{
			for(sPathBody in sPathBodies){
				thisModule.collectPathBodyNodes(sPathBody);
				
				tLastNode <- thisModule.connectBodyNodes(sPathBody.pathNodes, tStartNode);
				tPathEnd <- thisModule.connectPathEnd(sPathBody.pathEnd);
				
				if(tLastNode=tStartNode and not tPathEnd.oclIsTypeOf(Urn!EndPoint)){
					thisModule.connect(tPathEnd, tEnd);	
				}
				
				tPathEnd <- thisModule.getPathEnd(sPathBody);
				
				if(tPathEnd.oclIsUndefined()){
					tPathEnd <- tEnd;
				}
				
				if(not tPathEnd.oclIsUndefined()){
					if(sPathBody.index > tPathEnd.pred -> size()){
						thisModule.stubIndexMap <- thisModule.stubIndexMap.including(sPathBody.index, Sequence{tLastNode, tPathEnd}); --this approach won't work if an index is used more than once!
					}
					else{
						thisModule.connect(tLastNode, tPathEnd);
					}
				}
			}
		}
		
		tPathEnd;
	}
}

rule connectPathEnd(sPathEnd: Turn!PathBodyNode){
	using{
		tPathEnd : Urn!PathNode = OclUndefined;
	}
	do{
		if(sPathEnd.oclIsTypeOf(Turn!AndFork)){
			tPathEnd <- thisModule.connectAndFork(sPathEnd);
		}
		else if(sPathEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
			tPathEnd <- thisModule.connectEndpointWithConnect(sPathEnd);
		}
		else if(sPathEnd.oclIsTypeOf(Turn!OrFork)){
			tPathEnd <- thisModule.connectOrFork(sPathEnd);
		}
		else if(sPathEnd.oclIsTypeOf(Turn!Stub)){
			tPathEnd <- thisModule.connectStub(sPathEnd);
		}
		else{
			-- PathEnd is undefined
		}

		tPathEnd;
	}
}

-- Connects paths for all the stubs with indeces. These are added to stubIndexMap at an earlier
-- stage of the code and left there to be considered last.
rule connectPathBodiesWithIndexes(){
	using{
		tStub : Urn!Stub = OclUndefined;
		tLastNode : Urn!PathNode = OclUndefined;
		tOrJoin : Urn!OrJoin = OclUndefined;
	}
	do{
		for(vIndex in thisModule.stubIndexMap.keySet()){
			tLastNode <- thisModule.stubIndexMap.get(vIndex).first();
			tStub <- thisModule.stubIndexMap.get(vIndex).last();

			if(vIndex <= tStub.pred -> size()){
				tOrJoin <- thisModule.createOrJoin();
				tStub.pred -> at(vIndex).target <- tOrJoin; --TODO: iterate over all of the pred
				thisModule.directConnect(tLastNode, tOrJoin);
				thisModule.directConnect(tOrJoin, tStub);
			}
			else{
				thisModule.directConnect(tLastNode, tStub);
			}
		}
		
		thisModule.stubIndexMap <- Map{};
	}
}

-- Sets orFork node conditions. Called after connectPathBodiesWithIndexes so that all connections are in place when this is done.
-- Is rather inefficient as it calls allInstances(); this approach can potentially be improved upon.
rule setOrForkConditions(){
	using{
		vCounter : Integer = 1;
		sOrFork : Turn!OrFork = OclUndefined;
	}
	do{
		for(tOrFork in thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!OrFork))){
			sOrFork <- Turn!OrFork.allInstances() -> any(n|thisModule.resolveTemp(n, 'tOrFork')=tOrFork);
			
			if(not sOrFork.body.oclIsUndefined()){
				for(sRegularOrFork in sOrFork.body.regularBody){
					tOrFork.succ -> at(vCounter).condition <- thisModule.resolveTemp(sRegularOrFork.condition, 'tCondition');
					vCounter <- vCounter + 1;
				}
				
				if(not sOrFork.body.elseBody.oclIsUndefined()){
					tOrFork.succ.last().condition <- thisModule.createCondition('else');
				}
			}
			
			vCounter <- 1;
		}
	}
}

-- Sets stub connection thresholds. Called after connectPathBodiesWithIndexes so that all connections are in place when this is done.
-- Is rather inefficient as it calls allInstances(); this approach can potentially be improved upon.
rule setStubThresholds(){
	using{
		vCounter : Integer = 1;
		sStub : Turn!Stub = OclUndefined;
	}
	do{
		for(tStub in thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!Stub))){
			sStub <- Turn!Stub.allInstances() -> any(n|thisModule.resolveTemp(n, 'tStub')=tStub);
			
			if(sStub.oclIsUndefined()){
				-- Declared using StubDeclaration, no outPaths
			}
			else{
				for(sOutPath in sStub.outPaths){
					if(sOutPath.threshold <> 0){
						tStub.succ.last().threshold <- sOutPath.threshold.toString();
					}
					
					vCounter <- vCounter + 1;
				}
			}
		}
	}
}

rule connectUCMmap(tUCMmap: Urn!UCMmap, paths: Sequence(Turn!Path)){
	using{
		tStartPoint : Urn!StartPoint = OclUndefined;
	}
	do{
		thisModule.tUCMmap <- tUCMmap;

		for(sPath in paths){
			if(sPath.startPoint.oclIsUndefined()){
				tStartPoint <- thisModule.createStartPoint();
			}
			else{
				tStartPoint <- thisModule.retrieveNode(sPath.startPoint);
			}
			
			thisModule.doConnect(Sequence { sPath.pathBody }, tStartPoint, OclUndefined);
		}
		
		-- I don't like the below approach. The reason I have to do it as such is because
		-- Stubs need to be processed last so that all other elements in the path have been
		-- handled once they are considered (due to the fact stubs have indexes referencing)
		-- specific connections). There is probably a cleaner way to do this.
		thisModule.connectPathBodiesWithIndexes();
		thisModule.setOrForkConditions();
		thisModule.setStubThresholds();
		
		tUCMmap.connections <- tUCMmap.nodes -> flatten() -> collect(of|of.succ) -> flatten();
	}
}