module Connect;

create OUT : Urn from IN : Turn;

-- Contains all rules used to handle connections between nodes.
-- Handles exploration of nodes to find PathBodies and connect 
-- the appropriate parts.

rule connectUCMmap(tUCMmap: Urn!UCMmap, paths: Sequence(Turn!Path)){
	using{
		tStartPoint : Urn!StartPoint = OclUndefined;
	}
	do{
		thisModule.tUCMmap <- tUCMmap;

		for(sPath in paths){
			if(sPath.startPoint.oclIsUndefined()){
				tStartPoint <- thisModule.createStartPoint();
			}
			else{
				tStartPoint <- thisModule.retrieveNode(sPath.startPoint);
			}
			
			thisModule.connectPathBody(sPath.pathBody, tStartPoint, OclUndefined);
		}
		
		-- I don't like the approach I've used below. The reason I have to do it as such is
		-- because Stubs need to be processed last so that all other elements in the path have
		-- been handled once they are considered (due to the fact stubs have indexes referencing)
		-- specific connections). There is probably a cleaner way to do this.
		thisModule.connectIndexedPathBodies();
		thisModule.setOrForkConditions();
		thisModule.setStubThresholds();
		
		tUCMmap.connections <- tUCMmap.nodes -> flatten() -> collect(of|of.succ) -> flatten();
	}
}

rule connectPathBody(sPathBody: Urn!PathBody, tStartNode: Urn!PathNode, tAlternatePathEnd: Urn!PathNode){
	using{
		tLastNode : Urn!PathNode = OclUndefined;
		tPathEnd : Urn!PathNode = tAlternatePathEnd;
	}
	do{
		if(not sPathBody.oclIsUndefined()){
			thisModule.collectPathBodyNodes(sPathBody);
			
			tLastNode <- thisModule.connectBodyNodes(sPathBody.pathNodes, tStartNode);
			thisModule.processPathEnd(sPathBody.pathEnd);
			
			tPathEnd <- thisModule.getPathEnd(sPathBody);

			if(tPathEnd.oclIsUndefined()){
				tPathEnd <- tAlternatePathEnd;
			}
			
			if(tPathEnd.oclIsUndefined()){
				tPathEnd <- tLastNode; -- No path end found - occurs for ending of nested and/or joins. Will be connected with parent's join.
			}
			else if(sPathBody.index > tPathEnd.pred -> size()){
				thisModule.stubIndexMap <- thisModule.stubIndexMap.including(sPathBody.index, Sequence{tLastNode, tPathEnd}); --this approach won't work if an index is used more than once!
				tPathEnd <- OclUndefined;
			}
			else{
				thisModule.connect(tLastNode, tPathEnd);
				tPathEnd <- OclUndefined;
			}
		}
		
		tPathEnd;
	}
}

rule connectBodyNodes(sPathNodes: Sequence(Turn!PathBodyNode), tPathStart: Urn!PathNode){
	using{
		tNode : Urn!PathNode = OclUndefined;
		tPreviousNode : Urn!PathNode = tPathStart;
	}
	do{
		for(sCurrentNode in sPathNodes){
			if(sCurrentNode.oclIsTypeOf(Turn!Timer)){
				thisModule.initTimer(sCurrentNode);
			}
			
			tNode <- thisModule.retrieveNode(sCurrentNode);
			thisModule.directConnect(tPreviousNode, tNode);
			tPreviousNode <- tNode;
		}
		
		tPreviousNode;
	}
}

rule processPathEnd(sPathEnd: Turn!PathBodyNode){
	using{
		tPathEnd : Urn!PathNode = OclUndefined;
	}
	do{
		if(sPathEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
			tPathEnd <- thisModule.getOrCreatePathEnd(sPathEnd);
		}
		else if(sPathEnd.oclIsTypeOf(Turn!AndFork)){
			thisModule.connectPathEndPathBodies(sPathEnd, sPathEnd.pathbody, sPathEnd.connectingAndBody);
		}
		else if(sPathEnd.oclIsTypeOf(Turn!OrFork)){
			if(sPathEnd.body.oclIsUndefined()){
				thisModule.connectPathEndPathBodies(sPathEnd, Sequence { }, sPathEnd.connectingOrBody);
			}
			else{
				thisModule.connectPathEndPathBodies(sPathEnd, sPathEnd.body.regularBody -> collect(rb|rb.pathBody) -> including(sPathEnd.body.elseBody), sPathEnd.connectingOrBody);
			}
		}
		else if(sPathEnd.oclIsTypeOf(Turn!Stub)){
			thisModule.initStub(sPathEnd);
			thisModule.connectPathEndPathBodies(sPathEnd, sPathEnd.outPaths -> collect(op|op.path), sPathEnd.connectingStubBody);
		}
		else{
			-- PathEnd is undefined
		}

		tPathEnd;
	}
}

rule getOrCreatePathEnd(sEndpointWithConnect: Turn!EndpointWithConnect){
	using{
		tPathEnd : Urn!PathNode = OclUndefined;
	}
	do{
		if(sEndpointWithConnect.regularEnd.oclIsUndefined()){
			tPathEnd <- thisModule.createEndPoint();
			thisModule.endPointMap <- thisModule.endPointMap.including(sEndpointWithConnect.regularEnd, tPathEnd);
		}
		else if(thisModule.retrieveNode(sEndpointWithConnect.regularEnd).oclIsUndefined()){
			tPathEnd <- thisModule.createEndPoint();
			thisModule.initEndPointUsingEndpointWithConnect(tPathEnd, sEndpointWithConnect);
			thisModule.endPointMap <- thisModule.endPointMap.including(sEndpointWithConnect.regularEnd, tPathEnd);
		}
		else{
			tPathEnd <- thisModule.retrieveNode(sEndpointWithConnect.regularEnd);
		}
		
		tPathEnd;
	}
}

rule connectPathEndPathBodies(sNode: Turn!PathBodyNode, sPathBodies: Sequence(Turn!PathBody), sConnectingBody: Turn!PathBody){
	using{
		tNode: Urn!PathNode = thisModule.retrieveNode(sNode);
		vNumberOfNonTerminatingNodes : Integer = sPathBodies -> select(pb|not pb.oclIsUndefined()) -> select(pb|not thisModule.getPathEnd(pb).oclIsTypeOf(Urn!EndPoint)) -> size();
		tJoin : Urn!PathNode = 
			if(sConnectingBody.oclIsUndefined() or vNumberOfNonTerminatingNodes < 2) then
				OclUndefined
			else
				if(sNode.oclIsTypeOf(Turn!AndFork)) then
					thisModule.createAndJoin()
				else
					thisModule.createOrJoin()
				endif
			endif;
		tPathEnd : Urn!Pathnode = OclUndefined;
	}
	do{
		for(sPathBody in sPathBodies){
			tPathEnd <- thisModule.connectPathBody(sPathBody, tNode, tJoin);
			
			--if(not tPathEnd.oclIsUndefined()){
			--	thisModule.connect(tPathEnd, tJoin);
			--}
		}
		
		if(tJoin.oclIsUndefined()){
			thisModule.connectPathBody(sConnectingBody, tNode, OclUndefined);
		}
		else{
			thisModule.connectPathBody(sConnectingBody, tJoin, OclUndefined);
		}	
	}
}

-- Connects paths for all the stubs with indeces. These are added to stubIndexMap at an earlier
-- stage of the code and left there to be considered last.
rule connectIndexedPathBodies(){
	using{
		tStub : Urn!Stub = OclUndefined;
		tLastNode : Urn!PathNode = OclUndefined;
		tOrJoin : Urn!OrJoin = OclUndefined;
	}
	do{
		for(vIndex in thisModule.stubIndexMap.keySet()){
			tLastNode <- thisModule.stubIndexMap.get(vIndex).first();
			tStub <- thisModule.stubIndexMap.get(vIndex).last();

			if(vIndex <= tStub.pred -> size()){
				tOrJoin <- thisModule.createOrJoin();
				tStub.pred -> at(vIndex).target <- tOrJoin; --TODO: iterate over all of the pred
				thisModule.directConnect(tLastNode, tOrJoin);
				thisModule.directConnect(tOrJoin, tStub);
			}
			else{
				thisModule.directConnect(tLastNode, tStub);
			}
		}
		
		thisModule.stubIndexMap <- Map{};
	}
}

-- Sets orFork node conditions. Called after connectPathBodiesWithIndexes so that all connections are in place when this is done.
-- Is rather inefficient as it calls allInstances(); this approach can potentially be improved upon.
rule setOrForkConditions(){
	using{
		vCounter : Integer = 1;
		sOrFork : Turn!OrFork = OclUndefined;
	}
	do{
		for(tOrFork in thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!OrFork))){
			sOrFork <- Turn!OrFork.allInstances() -> any(n|thisModule.resolveTemp(n, 'tOrFork')=tOrFork);
			
			if(not sOrFork.body.oclIsUndefined()){
				for(sRegularOrFork in sOrFork.body.regularBody){
					tOrFork.succ -> at(vCounter).condition <- thisModule.resolveTemp(sRegularOrFork.condition, 'tCondition');
					vCounter <- vCounter + 1;
				}
				
				if(not sOrFork.body.elseBody.oclIsUndefined()){
					tOrFork.succ.last().condition <- thisModule.createCondition('else');
				}
			}
			
			vCounter <- 1;
		}
	}
}

-- Sets stub connection thresholds. Called after connectPathBodiesWithIndexes so that all connections are in place when this is done.
-- Is rather inefficient as it calls allInstances(); this approach can potentially be improved upon.
rule setStubThresholds(){
	using{
		vCounter : Integer = 1;
		sStub : Turn!Stub = OclUndefined;
	}
	do{
		for(tStub in thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!Stub))){
			sStub <- Turn!Stub.allInstances() -> any(n|thisModule.resolveTemp(n, 'tStub')=tStub);
			
			if(sStub.oclIsUndefined()){
				-- Declared using StubDeclaration, no outPaths
			}
			else{
				for(sOutPath in sStub.outPaths){
					if(sOutPath.threshold <> 0){
						tStub.succ.last().threshold <- sOutPath.threshold.toString();
					}
					
					vCounter <- vCounter + 1;
				}
			}
		}
	}
}