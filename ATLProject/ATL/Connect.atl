module ConnectNodes;

create OUT : Urn from IN : Turn;

-- Contains all rules used to handle connections between nodes.
-- At present, this is behavior is also partially performed by
-- rules in the "Process.atl" file. Ideally, this behavior should
-- be limited to only rules in this file.

rule connectEndToNextNode(body: Turn!PathBody, nextNodeConnection: Turn!NodeConnection){
	using{
		vNodeToConnect : Turn!PathNode = OclUndefined;
		vEmptyPoints : Sequence(Urn!PathNode) = OclUndefined;
		vOrJoin : Urn!OrJoin = OclUndefined;	
	}
	do{
		if(not body.pathEnd.oclIsUndefined()){
			if(body.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
				vNodeToConnect <- body.pathEnd.regularEnd;
			}
			else{
				vNodeToConnect <- body.pathEnd;	
			}
			
			vEmptyPoints <- thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint));
			if(nextNodeConnection.oclIsUndefined() and not vEmptyPoints -> isEmpty()){
				nextNodeConnection <- vEmptyPoints -> first().nextFreeConnection();
			}
			
			thisModule.addPred(thisModule.retrieveNode(vNodeToConnect), nextNodeConnection);
		}
		else if(not body.referencedEnd.oclIsUndefined()){
			thisModule.addPred(thisModule.retrieveNode(body.referencedEnd), nextNodeConnection);
		}
		else if(not body.referencedStub.oclIsUndefined()){
			vNodeToConnect <- thisModule.retrieveNode(body.referencedStub);
			
			if(vNodeToConnect.pred -> size() >= body.index){
				vOrJoin <- thisModule.createOrJoin();
				thisModule.addPred(vOrJoin, nextNodeConnection);
				thisModule.addPred(vOrJoin, (vNodeToConnect.pred -> first()).source.succ);
				thisModule.addPred(vNodeToConnect, vOrJoin.succ);
			}
			else{
				thisModule.addPred(vNodeToConnect, nextNodeConnection);	
			}
		}
	}
}

rule connectNodesAfterFork(sFork: Turn!PathNode, pathbodies: Sequence(Turn!PathBody)){
	using{
		vCounter : Integer = 1;
		vForkNode : Urn!PathNode = thisModule.retrieveNode(sFork);
	}
	do{
		for(pathbody in pathbodies){
			if(pathbody.pathNodes -> first().oclIsTypeOf(Turn!RespRef)){
				thisModule.addPred(thisModule.retrieveNode(pathbody.pathNodes -> first()), vForkNode.succ -> at(vCounter));
			}
			vCounter <- vCounter.inc(); 			
		}
		
		if(sFork.pbody.pathNodes -> isEmpty() and not sFork.pbody.orFork.oclIsUndefined()){
			thisModule.addPred(vForkNode, thisModule.retrieveNode(sFork.pbody.orFork.orBody.orFork).succ -> at(thisModule.orForkNodeConnCounter));
			thisModule.orForkNodeConnCounter <- thisModule.orForkNodeConnCounter.inc();
		}
	}
}

rule connectForkNodes(pathend: Turn!PathEnd){
	using{
		vHasReferencedEnd : Boolean = OclUndefined;
		vFork : Urn!PathNode = thisModule.retrieveNode(pathend);
		vCounter : Integer = 1;
		vPathBodies : Sequence(Turn!PathBody) = OclUndefined;
	}
	do{
		if(pathend.oclIsTypeOf(Turn!AndFork)){
			vPathBodies <- pathend.pathbody;
		}
		else if(not pathend.body.oclIsUndefined()){ -- this implicitly ensures that this case can only be OrFork as only OrFork has the property 'body'
			vPathBodies <- pathend.body.regularBody -> flatten() -> collect(rb|rb.pathBody);	
		}
		
		for(pathbody in vPathBodies){
			if(not pathbody.referencedEnd.oclIsUndefined() and not pathbody.referencedEnd.oclIsTypeOf(Turn!RespRef)){
				thisModule.addPred(thisModule.retrieveNode(pathbody.referencedEnd), vFork.succ -> at(vCounter));
			}
			else if(pathbody.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect) and vFork.oclIsTypeOf(Urn!AndFork)){
				thisModule.addPred(thisModule.retrieveNode(pathbody.pathEnd.regularEnd), vFork.succ -> at(vCounter));
			}
			else if(not pathbody.pathNodes -> isEmpty()){
				thisModule.connectNodes(pathbody, pathend, thisModule.retrieveNode(pathend));
			}	
			
			vCounter <- vCounter.inc();
		}
	}
}
	
rule handleNode(currentNode: Turn!PathNode, nextNodeConnection: Urn!NodeConnection){
	using{
		vNode : Urn!PathNode = thisModule.retrieveNode(currentNode);
	}
	do{
		if(currentNode.oclIsTypeOf(Turn!Connect)){
			thisModule.createEmptyPointConnect(currentNode, nextNodeConnection);
		}
		else{
			if(currentNode.oclIsTypeOf(Turn!WaitingPlace)){
				if(not currentNode.connect.oclIsUndefined()){
					vNode <- thisModule.tUCMmap.nodes -> any(n|n.oclIsTypeOf(Urn!EmptyPoint) and n.succ -> includes(thisModule.retrieveNode(currentNode.connect).pred -> first()));
				}
			}
			thisModule.addPred(vNode, nextNodeConnection);
		}
	}
}

rule connectNodes(pathbody: Sequence(Turn!PathBody), node: Turn!PathNode, previousNode: Urn!PathNode){
	using{
		vLastNode : Turn!PathNode = OclUndefined;
	}
	do{
		if(not pathbody.pathNodes -> isEmpty()){
			for(currentNode in pathbody.pathNodes){
				if(currentNode.oclIsTypeOf(Turn!Timer)){
					thisModule.processTimer(currentNode);
				}
				
				if(node.oclIsTypeOf(Turn!OrFork)){
					if(not currentNode.oclIsTypeOf(Turn!Connect) and thisModule.retrieveNode(currentNode) <> previousNode){
						thisModule.handleNode(currentNode, previousNode.nextFreeConnection());
					}
					thisModule.handleNode(currentNode, thisModule.retrieveNode(node).succ -> first());
				}
				else{
					thisModule.handleNode(currentNode, previousNode.nextFreeConnection());
				}
				
				if(currentNode.oclIsTypeOf(Turn!Connect)){
					previousNode <- thisModule.retrieveNode(currentNode.connectsTo);
				}
				else{
					previousNode <- thisModule.retrieveNode(currentNode);
				}
			}
		
			vLastNode <- pathbody.pathNodes -> last();
			
			if(vLastNode.oclIsTypeOf(Turn!Connect)){
				if(not vLastNode.connectsTo.oclIsTypeOf(Turn!Timer)){
					vLastNode <- vLastNode.connectsTo;
				}
				if(vLastNode.oclIsTypeOf(Turn!StartPoint) and pathbody.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
					thisModule.addSucc(thisModule.retrieveNode(vLastNode), thisModule.createNodeConnection());
				}
			}
			
			thisModule.connectEndToNextNode(pathbody, thisModule.retrieveNode(vLastNode).nextFreeConnection());
		}
	}
}