module ConnectNodes;

create OUT : Urn from IN : Turn;

-- Contains all rules used to handle connections between nodes.
-- At present, this is behavior is also partially performed by
-- rules in the "Process.atl" file. Ideally, this behavior should
-- be limited to only rules in this file.

rule connectReferencedEndToNextNode(body: Turn!PathBody, nextNode: Turn!PathNode){
	do{
		if(body.pathNodes -> isEmpty()){
			if(body.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
				thisModule.addPred(thisModule.retrieveNode(body.pathEnd.regularEnd), nextNode);
			}
			else if(body.pathEnd.oclIsTypeOf(Turn!OrFork) or body.pathEnd.oclIsTypeOf(Turn!AndFork) or body.pathEnd.oclIsTypeOf(Turn!Stub)){
				thisModule.addPred(thisModule.retrieveNode(body.pathEnd), nextNode);
			}
			
			if(not body.referencedEnd.oclIsUndefined()){
				thisModule.addPred(thisModule.retrieveNode(body.referencedEnd), nextNode);
			}
			else if(not body.referencedStub.oclIsUndefined()){
				thisModule.connectReferencedStub(body, nextNode);
			}
		}
	}
}

rule connectNodesAfterFork(obj: Turn!PathNode, forkNode: Urn!PathNode){
	using{
		vCounter : Integer = 1;
		vPathBodies : Sequence(Turn!PathBody) = 
			if(forkNode.oclIsTypeOf(Urn!OrFork)) then
				obj.getPathBodies()
			else
				obj.pathbody
			endif;
	}
	do{
		for(pathbody in vPathBodies){
			if(pathbody.pathNodes -> first().oclIsTypeOf(Turn!RespRef)){
				thisModule.addPred(thisModule.retrieveNode(pathbody.pathNodes -> first()), forkNode.succ -> at(vCounter));
			}
			vCounter <- vCounter.inc(); 			
		}
		
		if(obj.pbody.pathNodes -> isEmpty() and not obj.pbody.orFork.oclIsUndefined()){
			thisModule.addPred(forkNode, thisModule.retrieveNode(obj.pbody.orFork.orBody.orFork).succ -> at(thisModule.orForkNodeConnCounter));
			thisModule.orForkNodeConnCounter <- thisModule.orForkNodeConnCounter.inc();
		}
	}
}

rule connectForkNodes(pathend: Turn!PathEnd){
	using{
		vHasReferencedEnd : Boolean = OclUndefined;
		vFork : Urn!PathNode = thisModule.retrieveNode(pathend);
		vCounter : Integer = 1;
		vIsValid : Boolean = false;
		vPathBodies : Sequence(Turn!PathBody) = OclUndefined;
	}
	do{
		if(pathend.oclIsTypeOf(Turn!AndFork)){
			vIsValid <- true;
		}
		else if(pathend.oclIsTypeOf(Turn!OrFork) and not pathend.body.oclIsUndefined()){
			vIsValid <- true;
		}
		
		if(vIsValid){
			if(pathend.oclIsTypeOf(Turn!AndFork)){
				vPathBodies <- pathend.pathbody;
			}
			else if(pathend.oclIsTypeOf(Turn!OrFork) and not pathend.body.oclIsUndefined()){
				vPathBodies <- pathend.body.regularBody -> flatten() -> collect(rb|rb.pathBody);	
			}
			
			for(pathbody in vPathBodies){
				if(not pathbody.referencedEnd.oclIsUndefined() and not pathbody.referencedEnd.oclIsTypeOf(Turn!RespRef)){
					thisModule.addPred(thisModule.retrieveNode(pathbody.referencedEnd), vFork.succ -> at(vCounter));
				}
				else if(not pathbody.pathNodes -> isEmpty()){
					thisModule.connectNodes(pathbody, pathend, vFork);
				}	
				else if(pathbody.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect) and vFork.oclIsTypeOf(Urn!AndFork)){
					thisModule.addPred(thisModule.retrieveNode(pathbody.pathEnd.regularEnd), vFork.succ -> at(vCounter));
				}
				
				vCounter <- vCounter.inc();
			}
		}
	}
}

rule connectReferencedStub(body: Turn!PathBody, nextNode: Turn!PathNode){
	using{
		vStub : Urn!Stub = thisModule.retrieveNode(body.referencedStub);
		vOrJoin : Urn!OrJoin = OclUndefined;
	}
	do{
		if(vStub.pred -> size() >= body.index){
			vOrJoin <- thisModule.createOrJoin();
			thisModule.addPred(vOrJoin, nextNode);
			thisModule.addPred(vOrJoin, (vStub.pred -> first()).source.succ);
			thisModule.addPred(vStub, vOrJoin.succ);
		}
		else{
			thisModule.addPred(vStub, nextNode);	
		}
	}
}

rule connectOrForkEndPoints(obj: Turn!OrFork, nextNode: Urn!PathNode, expression: String){
	using{
		vNextPred : Urn!NodeConnection = OclUndefined;
		vBody : Turn!PathBody = obj.connectingOrBody;
	}
	do{
		if(nextNode.oclIsTypeOf(Urn!OrFork)){
			vNextPred <- nextNode.succ -> any(s|s.condition.expression=expression);
		}
		else if(nextNode.oclIsTypeOf(Urn!OrJoin)){
			vNextPred <- nextNode.firstUnconnectedSucc();
		}
		
		thisModule.connectReferencedEndToNextNode(vBody, vNextPred);
		
		if(vBody.referencedEnd.oclIsTypeOf(Turn!RespRef)){
			thisModule.addPred(thisModule.retrieveNode(vBody.referencedEnd), vNextPred);
		}
	}
}

--rule connectTimerNodes(timerObj: Turn!Timer){
--	using{
--		vReferencedEnd : Turn!ReferencedEnd = timerObj.timeoutPath.referencedEnd;
--	}
--	do{
--		--if pathNodes exist NOT SURE IF REQUIRED AS THERE IS NO PATHNODES TO TIMEOUT PATH
--		if(not (timerObj.timeoutPath.pathNodes -> isEmpty())){
--			thisModule.addPred(thisModule.retrieveNode(timerObj.timeoutPath.pathNodes -> first()), thisModule.retrieveNode(timerObj).succ -> at(2));
--			thisModule.connectNodes(timerObj.timeoutPath, timerObj, OclUndefined);
--		}
--		
--		if(vReferencedEnd.oclIsTypeOf(Turn!RespRef)){
--			thisModule.addPred(thisModule.getResponsibility(thisModule.referencedEnd.name).respRefs -> first(), thisModule.retrieveNode(timerObj).succ -> at(2));
--		}
--		
--		if(timerObj.timeoutPath.pathEnd.oclIsTypeOf(Turn!OrFork) or timerObj.timeoutPath.pathEnd.oclIsTypeOf(Turn!AndFork)){
--			thisModule.connectForkNodes(timerObj.timeoutPath.pathEnd);
--		}
--		else if(timerObj.timeoutPath.pathEnd.oclIsTypeOf(Turn!Stub)){
--			thisModule.createStubOutNodes(timerObj.timeoutPath.pathEnd);
--		}
--	}
--}

--QUESTION: there doesn't appear to be a Turn!PathNode class. What should I use instead?
rule handleFirstNode(node: Turn!PathNode, firstNode: Turn!PathNode, nextNode: Urn!PathNode){
	do{
		if(firstNode.oclIsTypeOf(Turn!Connect)){
			if(node.oclIsTypeOf(Turn!AndFork)){
				thisModule.createEmptyPointConnect(firstNode, nextNode.firstUnconnectedSucc());
			}
			else if(node.oclIsTypeOf(Turn!OrFork)){
				thisModule.createEmptyPointConnect(firstNode, nextNode.succ -> first());
			}
			else{
				thisModule.createEmptyPointConnect(firstNode, thisModule.retrieveNode(node).firstUnconnectedSucc());
			}
		}
		else if(node.oclIsTypeOf(Turn!StartPoint)){
			if(firstNode.oclIsTypeOf(Turn!WaitingPlace)){
				if(not firstNode.connect.oclIsUndefined()){
					thisModule.addPred(thisModule.tUCMmap.nodes -> any(n|n.oclIsTypeOf(Urn!EmptyPoint) and n.succ -> includes(thisModule.retrieveNode(firstNode.connect).pred -> first())), thisModule.retrieveNode(node).firstUnconnectedSucc());
				}
				else{
					thisModule.addPred(thisModule.retrieveNode(firstNode), thisModule.retrieveNode(node).firstUnconnectedSucc());
				}
			}
			else{
				thisModule.addPred(thisModule.retrieveNode(firstNode), thisModule.retrieveNode(node).firstUnconnectedSucc());
			}
		}
		else if(node.oclIsTypeOf(Turn!OrFork) or node.oclIsTypeOf(Turn!AndFork)){
			if(nextNode.oclIsUndefined()){
				nextNode <- thisModule.retrieveNode(node);
			}
			
			thisModule.addPred(thisModule.retrieveNode(firstNode), nextNode.firstUnconnectedSucc());
			
			if(firstNode.oclIsTypeOf(Turn!Timer) and node.oclIsTypeOf(Turn!OrFork)){
				thisModule.addPred(thisModule.retrieveNode(firstNode), thisModule.retrieveNode(node).succ -> first());
			}
		}
		else if(node.oclIsTypeOf(Turn!Stub)){
			thisModule.addPred(thisModule.retrieveNode(firstNode), thisModule.retrieveNode(node).firstUnconnectedSucc());
		}
	}
}
	
rule handleNode(currentNode: Turn!PathNode, previousNode: Turn!PathNode){
	using{
		vConnect : Turn!PathNode = OclUndefined;
	}
	do{
		if(previousNode.oclIsTypeOf(Turn!Connect)){
			if(previousNode.connectsTo.oclIsTypeOf(Turn!Timer)){
				thisModule.addPred(thisModule.retrieveNode(currentNode), thisModule.retrieveNode(previousNode).firstUnconnectedSucc()); 
			}
			else{
				if(not currentNode.oclIsTypeOf(Turn!Connect) and not currentNode.oclIsTypeOf(Turn!OrJoin) and not currentNode.oclIsTypeOf(Turn!AndJoin)){
					thisModule.addSucc(thisModule.retrieveNode(previousNode.connectsTo), thisModule.createNodeConnection());
				}
				if(currentNode.oclIsTypeOf(Turn!Connect)){
					thisModule.addPred(thisModule.retrieveNode(previousNode.connectsTo), thisModule.createEmptyPointConnect(currentNode, thisModule.retrieveNode(previousNode.connectsTo).succ).succ);
				}
				else{
					thisModule.addPred(thisModule.retrieveNode(currentNode), thisModule.retrieveNode(previousNode.connectsTo).firstUnconnectedSucc());	
				}
			}
		}
		else if(currentNode.oclIsTypeOf(Turn!Connect)){
			thisModule.createEmptyPointConnect(currentNode, thisModule.retrieveNode(previousNode).succ);
		}
		else if((previousNode.oclIsTypeOf(Turn!RespRef) and not currentNode.oclIsTypeOf(Turn!Timer)) or currentNode.oclIsTypeOf(Turn!WaitingPlace) or currentNode.oclIsTypeOf(Turn!FailurePoint) or currentNode.oclIsTypeOf(Turn!RespRef)){
			thisModule.respDef <- thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!RespRef)) -> select(r|r.respDef.name=previousNode.name) -> flatten();
			thisModule.addPred(thisModule.retrieveNode(currentNode), thisModule.respDef -> collect(s|s.succ) -> flatten() -> select(s|s.target.oclIsUndefined()));
		}
		else if(previousNode.oclIsTypeOf(Turn!Timer) or previousNode.oclIsTypeOf(Turn!AndJoin) or previousNode.oclIsTypeOf(Turn!OrJoin)){
			thisModule.addPred(thisModule.retrieveNode(currentNode), thisModule.retrieveNode(previousNode).firstUnconnectedSucc());
		}
	}
}

rule handleRegularEnds(pathend: Turn!PathNode, currentNode: Turn!PathNode){
	using{
		vNewPred : Turn!PathNode = OclUndefined;	
	}
	do{
		if(currentNode.oclIsTypeOf(Turn!Connect)){
			if(currentNode.connectsTo.oclIsTypeOf(Turn!StartPoint) and pathend.oclIsTypeOf(Turn!EndpointWithConnect)){
				if(pathend.regularEnd.oclIsTypeOf(Turn!EndPoint)){
					thisModule.addSucc(thisModule.retrieveNode(currentNode.connectsTo), thisModule.createNodeConnection());
				}
			}
			if(not currentNode.connectsTo.oclIsTypeOf(Turn!Timer)){
				currentNode <- currentNode.connectsTo;
			}
		}
		
		if(pathend.oclIsTypeOf(Turn!EndpointWithConnect)){
			thisModule.addPred(thisModule.retrieveNode(pathend.regularEnd), thisModule.retrieveNode(currentNode).firstUnconnectedSucc());
		}
		else{
			thisModule.addPred(thisModule.retrieveNode(pathend), thisModule.retrieveNode(currentNode).firstUnconnectedSucc());
		}
	}
}

rule connectNodes(pathbody: Sequence(Turn!PathBody), node: Turn!PathNode, nextNode: Urn!PathNode){
	using{
		vPreviousNode : Turn!PathNode = OclUndefined;
		vLastNode : Turn!PathNode = OclUndefined;
	}
	do{
		for(currentNode in pathbody.pathNodes){
			if(currentNode.oclIsTypeOf(Turn!Timer)){
				thisModule.processTimer(currentNode);
			}
			
			if(vPreviousNode.oclIsUndefined()){
				thisModule.handleFirstNode(node, currentNode, nextNode);
			}
			else{
				thisModule.handleNode(currentNode, vPreviousNode);
			}
			
			vPreviousNode <- currentNode;
		}
		
		vLastNode <- vPreviousNode;
		
		if(not vLastNode.oclIsUndefined()){
			if(not pathbody.pathEnd.oclIsUndefined()){
				thisModule.handleRegularEnds(pathbody.pathEnd, vLastNode);
			}
			else{
				if(vLastNode.oclIsTypeOf(Turn!Connect)){
					if(vLastNode.connectsTo.oclIsTypeOf(Turn!WaitingPlace)){
						vLastNode <- vLastNode.connectsTo;
					}
				}
				
				if(not pathbody.referencedEnd.oclIsUndefined()){
					thisModule.addPred(thisModule.retrieveNode(pathbody.referencedEnd), thisModule.retrieveNode(vLastNode).succ);	
				}
				else if(not pathbody.referencedStub.oclIsUndefined()){-- and not vPreviousNode.oclIsUndefined()){
					thisModule.connectReferencedStub(pathbody, thisModule.retrieveNode(vLastNode).succ);
				}
			}
		}
	}
}