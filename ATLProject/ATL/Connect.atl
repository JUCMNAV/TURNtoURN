module ConnectNodes;

create OUT : Urn from IN : Turn;

-- Contains all rules used to handle connections between nodes.
-- At present, this is behavior is also partially performed by
-- rules in the "Process.atl" file. Ideally, this behavior should
-- be limited to only rules in this file.

rule getNodeToConnect(body: Turn!PathBody){
	using{
		vNodeToConnect : Turn!PathNode = OclUndefined;
	}
	do{
		if(not body.pathEnd.oclIsUndefined()){
			vNodeToConnect <- thisModule.retrieveNode(body.pathEnd);	
		}
		else if(not body.referencedEnd.oclIsUndefined()){
			vNodeToConnect <- thisModule.retrieveNode(body.referencedEnd);
		}
		else if(not body.referencedStub.oclIsUndefined()){
			vNodeToConnect <- thisModule.retrieveNode(body.referencedStub);
		}
		
		vNodeToConnect;
	}
}

rule connectEndToNextNode(body: Turn!PathBody, nextNodeConnection: Turn!NodeConnection){
	using{
		vNodeToConnect : Turn!PathNode = thisModule.getNodeToConnect(body);
		vOrJoin : Urn!OrJoin = OclUndefined;	
	}
	do{
		if(not nextNodeConnection.oclIsUndefined()){
			if(nextNodeConnection.source.oclIsTypeOf(Urn!EmptyPoint) or nextNodeConnection.source.oclIsTypeOf(Urn!Timer)){
				if(not thisModule.emptyPointMap.get(nextNodeConnection.source).oclIsUndefined()){
					nextNodeConnection.source <- thisModule.emptyPointMap.get(nextNodeConnection.source);
				}
			}
		}
		
		if(			(vNodeToConnect.oclIsTypeOf(Urn!EndPoint) and not vNodeToConnect.pred -> isEmpty())
				or 	(not body.referencedStub.oclIsUndefined() and vNodeToConnect.pred -> size() >= body.index)
				or 	vNodeToConnect.oclIsTypeOf(Urn!RespRef) or vNodeToConnect.oclIsTypeOf(Urn!FailurePoint)
		){
			vOrJoin <- thisModule.createOrJoin();
			vOrJoin.succ <- thisModule.createNodeConnection();
			thisModule.useConnection(vOrJoin, nextNodeConnection);
			thisModule.useConnection(vOrJoin, (vNodeToConnect.pred -> first()).source.succ);
			nextNodeConnection <- vOrJoin.nextFreeConnection();
		}

		if(not vNodeToConnect.oclIsUndefined()){
			thisModule.useConnection(vNodeToConnect, nextNodeConnection);
		}
	}
}

rule connectForkNodes(pathend: Turn!PathEnd, pathbodies: Sequence(Turn!PathBody)){
	using{
		vFork : Urn!PathNode = thisModule.retrieveNode(pathend);
		vCurrentPosition : Integer = 0;
	}
	do{
		for(pathbody in pathbodies){
			vCurrentPosition <- pathbodies.indexOf(pathbody);
			if(pathbody.referencedEnd.oclIsTypeOf(Turn!AndJoin) or pathbody.referencedEnd.oclIsTypeOf(Turn!OrJoin)){
				thisModule.useConnection(thisModule.retrieveNode(pathbody.referencedEnd), vFork.succ -> at(vCurrentPosition));
			}
			else if(pathbody.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect) and vFork.oclIsTypeOf(Urn!AndFork)){
				thisModule.useConnection(thisModule.retrieveNode(pathbody.pathEnd.regularEnd), vFork.succ -> at(vCurrentPosition));
			}
			else if(not pathbody.pathNodes -> isEmpty()){
				thisModule.connectNodes(pathbody, pathend, thisModule.retrieveNode(pathend));
			}
		}
	}
}
	
rule connectNode(currentNode: Turn!PathNode, nextNodeConnection: Urn!NodeConnection){
	using{
		vNode : Urn!PathNode = thisModule.retrieveNode(currentNode);
	}
	do{
		if(currentNode.oclIsTypeOf(Turn!Connect)){
			thisModule.createEmptyPointConnect(currentNode);
			vNode <- thisModule.retrieveNode(currentNode.connectsTo);
		}
		else if(currentNode.oclIsTypeOf(Turn!WaitingPlace)){
			if(not currentNode.connect.oclIsUndefined()){
				vNode <- thisModule.emptyPointMap.get(currentNode.connect);
			}
		}
		else if(currentNode.oclIsTypeOf(Turn!Timer)){
			if(not thisModule.emptyPointMap.get(thisModule.resolveTemp(currentNode, 'tTimer')).oclIsUndefined()){
				vNode <- thisModule.emptyPointMap.get(thisModule.resolveTemp(currentNode, 'tTimer'));
			}
		}

		thisModule.useConnection(vNode, nextNodeConnection);
	}
}

rule connectNodes(pathbody: Sequence(Turn!PathBody), node: Turn!PathNode, previousNode: Urn!PathNode){
	using{
		vLastNode : Turn!PathNode = pathbody.pathNodes -> last();
	}
	do{
		if(not pathbody.pathNodes -> isEmpty()){
			for(currentNode in pathbody.pathNodes){
				if(currentNode.oclIsTypeOf(Turn!Timer)){
					thisModule.processTimer(currentNode);
				}
				
				if(node.oclIsTypeOf(Turn!OrFork) and thisModule.retrieveNode(currentNode) = previousNode){
					thisModule.useConnection(thisModule.retrieveNode(currentNode), thisModule.retrieveNode(node).succ -> first());
					--thisModule.debug(currentNode);
				}
				else{
					thisModule.connectNode(currentNode, previousNode.nextFreeConnection());
				}
				
				if(currentNode.oclIsTypeOf(Turn!Connect)){
					currentNode <- currentNode.connectsTo;
				}

				previousNode <- thisModule.retrieveNode(currentNode);
			}
		
			if(vLastNode.oclIsTypeOf(Turn!Connect)){
				if(not vLastNode.connectsTo.oclIsTypeOf(Turn!Timer)){
					vLastNode <- vLastNode.connectsTo;
				}
				
				if(vLastNode.oclIsTypeOf(Turn!StartPoint) and pathbody.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
					thisModule.createNewConnection(thisModule.retrieveNode(vLastNode));
				}
			}
			
			if(thisModule.retrieveNode(vLastNode).nextFreeConnection().oclIsUndefined()){
				thisModule.connectEndToNextNode(pathbody, thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> any(ep|not ep.nextFreeConnection().oclIsUndefined()).nextFreeConnection());
			}
			else{
				thisModule.connectEndToNextNode(pathbody, thisModule.retrieveNode(vLastNode).nextFreeConnection());
			}
		}
	}
}