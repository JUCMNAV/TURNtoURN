module ConnectNodes;

create OUT : Urn from IN : Turn;

-- Contains all rules used to handle connections between nodes.
-- At present, this is behavior is also partially performed by
-- rules in the "Process.atl" file. Ideally, this behavior should
-- be limited to only rules in this file.

rule connectPathEnd(body: Turn!PathBody, nextNodeConnection: Turn!NodeConnection){
	using{
		vPathEnd : Turn!PathNode = body.pathEnd;
		vEmptyPoints : Sequence(Urn!PathNode) = thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint));
	}
	do{
		if(body.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
			vPathEnd <- body.pathEnd.regularEnd;
		}
		
		if(nextNodeConnection.oclIsUndefined() and not vEmptyPoints -> isEmpty()){
			nextNodeConnection <- vEmptyPoints -> first().firstUnconnectedSucc();
		}
		
		thisModule.addPred(thisModule.retrieveNode(vPathEnd), nextNodeConnection);
	}
}

rule connectReferencedStub(body: Turn!PathBody, nextNodeConnection: Turn!NodeConnection){
	using{
		vStub : Urn!Stub = thisModule.retrieveNode(body.referencedStub);
		vOrJoin : Urn!OrJoin = OclUndefined;
	}
	do{
		if(vStub.pred -> size() >= body.index){
			vOrJoin <- thisModule.createOrJoin();
			thisModule.addPred(vOrJoin, nextNodeConnection);
			thisModule.addPred(vOrJoin, (vStub.pred -> first()).source.succ);
			thisModule.addPred(vStub, vOrJoin.succ);
		}
		else{
			thisModule.addPred(vStub, nextNodeConnection);	
		}
	}
}

rule connectEndToNextNode(body: Turn!PathBody, nextNodeConnection: Turn!NodeConnection){
	using{
		vStub : Urn!Stub = OclUndefined;
		vOrJoin : Urn!OrJoin = OclUndefined;	
	}
	do{
		if(not body.pathEnd.oclIsUndefined()){
			thisModule.connectPathEnd(body, nextNodeConnection);
		}
		else if(not body.referencedEnd.oclIsUndefined()){
			thisModule.addPred(thisModule.retrieveNode(body.referencedEnd), nextNodeConnection);
		}
		else if(not body.referencedStub.oclIsUndefined()){
			thisModule.connectReferencedStub(body, nextNodeConnection);
		}
	}
}

rule connectNodesAfterFork(obj: Turn!PathNode, forkNode: Urn!PathNode){
	using{
		vCounter : Integer = 1;
		vPathBodies : Sequence(Turn!PathBody) = 
			if(forkNode.oclIsTypeOf(Urn!OrFork)) then
				obj.getPathBodies()
			else
				obj.pathbody
			endif;
	}
	do{
		for(pathbody in vPathBodies){
			if(pathbody.pathNodes -> first().oclIsTypeOf(Turn!RespRef)){
				thisModule.addPred(thisModule.retrieveNode(pathbody.pathNodes -> first()), forkNode.succ -> at(vCounter));
			}
			vCounter <- vCounter.inc(); 			
		}
		
		if(obj.pbody.pathNodes -> isEmpty() and not obj.pbody.orFork.oclIsUndefined()){
			thisModule.addPred(forkNode, thisModule.retrieveNode(obj.pbody.orFork.orBody.orFork).succ -> at(thisModule.orForkNodeConnCounter));
			thisModule.orForkNodeConnCounter <- thisModule.orForkNodeConnCounter.inc();
		}
	}
}

rule connectForkNodes(pathend: Turn!PathEnd){
	using{
		vHasReferencedEnd : Boolean = OclUndefined;
		vFork : Urn!PathNode = thisModule.retrieveNode(pathend);
		vCounter : Integer = 1;
		vIsValid : Boolean = false;
		vPathBodies : Sequence(Turn!PathBody) = OclUndefined;
	}
	do{
		if(pathend.oclIsTypeOf(Turn!AndFork)){
			vIsValid <- true;
		}
		else if(pathend.oclIsTypeOf(Turn!OrFork) and not pathend.body.oclIsUndefined()){
			vIsValid <- true;
		}
		
		if(vIsValid){
			if(pathend.oclIsTypeOf(Turn!AndFork)){
				vPathBodies <- pathend.pathbody;
			}
			else if(pathend.oclIsTypeOf(Turn!OrFork) and not pathend.body.oclIsUndefined()){
				vPathBodies <- pathend.body.regularBody -> flatten() -> collect(rb|rb.pathBody);	
			}
			
			for(pathbody in vPathBodies){
				if(not pathbody.referencedEnd.oclIsUndefined() and not pathbody.referencedEnd.oclIsTypeOf(Turn!RespRef)){
					thisModule.addPred(thisModule.retrieveNode(pathbody.referencedEnd), vFork.succ -> at(vCounter));
				}
				else if(pathbody.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect) and vFork.oclIsTypeOf(Urn!AndFork)){
					thisModule.addPred(thisModule.retrieveNode(pathbody.pathEnd.regularEnd), vFork.succ -> at(vCounter));
				}
				else if(not pathbody.pathNodes -> isEmpty()){
					thisModule.connectNodes(pathbody, pathend, OclUndefined);
				}	
				
				vCounter <- vCounter.inc();
			}
		}
	}
}

rule handleForkNodes(node: Turn!PathNode, firstNode: Turn!PathNode, nextNode: Urn!PathNode){
	do{
		if(nextNode.oclIsUndefined()){
			nextNode <- thisModule.retrieveNode(node);
		}
		
		if(firstNode.oclIsTypeOf(Turn!Connect)){
			if(nextNode.oclIsTypeOf(Urn!AndFork) or nextNode.oclIsTypeOf(Urn!AndJoin)){
				thisModule.createEmptyPointConnect(firstNode, nextNode.firstUnconnectedSucc());
			}
			else if(nextNode.oclIsTypeOf(Urn!OrFork)){
				thisModule.createEmptyPointConnect(firstNode, nextNode.succ -> first());
			}
		}
		else{
			if(thisModule.retrieveNode(firstNode) <> nextNode){
				thisModule.addPred(thisModule.retrieveNode(firstNode), nextNode.firstUnconnectedSucc());
			}
			
			if(node.oclIsTypeOf(Turn!OrFork)){
				thisModule.addPred(thisModule.retrieveNode(firstNode), thisModule.retrieveNode(node).succ -> first());
			}
		}
	}
}

rule handleFirstNode(firstNode: Turn!PathNode, nextNodeConnection : Urn!NodeConnection){
	using{
		vNode : Urn!PathNode = thisModule.retrieveNode(firstNode);
	}
	do{
		if(firstNode.oclIsTypeOf(Turn!Connect)){
			thisModule.createEmptyPointConnect(firstNode, nextNodeConnection);
		}
		else{
			if(firstNode.oclIsTypeOf(Turn!WaitingPlace)){
				if(not firstNode.connect.oclIsUndefined()){
					vNode <- thisModule.tUCMmap.nodes -> any(n|n.oclIsTypeOf(Urn!EmptyPoint) and n.succ -> includes(thisModule.retrieveNode(firstNode.connect).pred -> first()));
				}
			}
			
			thisModule.addPred(vNode, nextNodeConnection);
		}
	}
}
	
rule handleNode(currentNode: Turn!PathNode, previousNode: Turn!PathNode){
	using{
		nextNodeConnection : Turn!PathNode = OclUndefined;
	}
	do{
		if(previousNode.oclIsTypeOf(Turn!Connect)){
			previousNode <- previousNode.connectsTo;
		}
		
		nextNodeConnection <- thisModule.retrieveNode(previousNode).firstUnconnectedSucc();
		
		if(currentNode.oclIsTypeOf(Turn!Connect)){
			thisModule.createEmptyPointConnect(currentNode, nextNodeConnection);
		}
		else{
			thisModule.addPred(thisModule.retrieveNode(currentNode), thisModule.retrieveNode(previousNode).firstUnconnectedSucc());
		}
	}
}

rule connectNodes(pathbody: Sequence(Turn!PathBody), node: Turn!PathNode, nextNode: Urn!PathNode){
	using{
		vFirstNode : Turn!PathNode = pathbody.pathNodes -> first();
		vPreviousNode : Turn!PathNode = OclUndefined;
		vLastNode : Turn!PathNode = OclUndefined;
	}
	do{
		for(currentNode in pathbody.pathNodes){
			if(currentNode.oclIsTypeOf(Turn!Timer)){
				thisModule.processTimer(currentNode);
			}
			
			if(currentNode = vFirstNode){
				if(node.oclIsTypeOf(Turn!OrFork) or node.oclIsTypeOf(Turn!AndFork)){
					thisModule.handleForkNodes(node, vFirstNode, nextNode);
				}
				else{
					thisModule.handleFirstNode(vFirstNode, thisModule.retrieveNode(node).firstUnconnectedSucc());
				}
			}
			else{
				thisModule.handleNode(currentNode, vPreviousNode);
			}
			
			vPreviousNode <- currentNode;
		}
		
		if(not vPreviousNode.oclIsUndefined()){
			vLastNode <- vPreviousNode;
			
			if(vLastNode.oclIsTypeOf(Turn!Connect)){
				if(vLastNode.connectsTo.oclIsTypeOf(Turn!WaitingPlace)){
					vLastNode <- vLastNode.connectsTo;
				}
				else if(vLastNode.connectsTo.oclIsTypeOf(Turn!StartPoint) and not pathbody.pathEnd.oclIsUndefined()){
					if(pathbody.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
						thisModule.addSucc(thisModule.retrieveNode(vLastNode.connectsTo), thisModule.createNodeConnection());
					}
					vLastNode <- vLastNode.connectsTo;
				}
			}
			
			thisModule.connectEndToNextNode(pathbody, thisModule.retrieveNode(vLastNode).firstUnconnectedSucc());
		}
	}
}