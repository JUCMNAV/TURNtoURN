module ConnectNodes;

create OUT : Urn from IN : Turn;

rule createEmptyPointConnect(currentNode: Turn!PathNode, newPred: Urn!PathNode){
	to
		tNodeConnection1: Urn!NodeConnection(),
		tConnect: Urn!Connect(
			id <- thisModule.nextId().toString(),
			name <- 'Connect' + tConnect.id,
			diagram <- thisModule.tUCMmap,
			succ <- tNodeConnection1,
			pred <- tNodeConnection2
		),
		tNodeConnection2: Urn!NodeConnection(),
		tEmptyPt: Urn!EmptyPoint(
			id <- thisModule.nextId().toString(),
			name <- 'EmptyPoint' + tEmptyPt.id,
			diagram <- thisModule.tUCMmap,
			succ <- tNodeConnection2
		)
	do{
		if(currentNode.connectsTo.oclIsTypeOf(Turn!Timer)){
			tEmptyPt.name <- 'AsynchConnectTimer#' + currentNode.connectsTo.name;
			thisModule.addPred(tEmptyPt, newPred);
		}
		else{
			thisModule.addPred(thisModule.retrieveNode(currentNode.connectsTo), tNodeConnection1);
			thisModule.addPred(thisModule.retrieveNode(currentNode.connectsTo), newPred);
		}
		thisModule.connectMap <- thisModule.connectMap.including(currentNode, tConnect);
		tConnect;
	}
}

--QUESTION: there doesn't appear to be a Turn!PathNode class. What should I use instead?
rule handleFirstNode(node: Turn!PathNode, firstNode: Turn!PathNode, nextNode: Urn!PathNode){
	do{
		if(firstNode.oclIsTypeOf(Turn!Connect)){
			if(node.oclIsTypeOf(Turn!AndFork)){
				thisModule.createEmptyPointConnect(firstNode, nextNode.firstUnconnectedSucc());
			}
			else if(node.oclIsTypeOf(Turn!OrFork)){
				thisModule.createEmptyPointConnect(firstNode, nextNode.succ -> first());
			}
			else{
				thisModule.createEmptyPointConnect(firstNode, thisModule.retrieveNode(node).firstUnconnectedSucc());
			}
		}
		else if(node.oclIsTypeOf(Turn!StartPoint)){
			if(firstNode.oclIsTypeOf(Turn!WaitingPlace)){
				if(not firstNode.connect.oclIsUndefined()){
					thisModule.addPred(thisModule.tUCMmap.nodes -> any(n|n.oclIsTypeOf(Urn!EmptyPoint) and n.succ -> includes(thisModule.retrieveNode(firstNode.connect).pred -> first())), thisModule.retrieveNode(node).firstUnconnectedSucc());
				}
				else{
					thisModule.addPred(thisModule.retrieveNode(firstNode), thisModule.retrieveNode(node).firstUnconnectedSucc());
				}
			}
			else{
				thisModule.addPred(thisModule.retrieveNode(firstNode), thisModule.retrieveNode(node).firstUnconnectedSucc());
			}
		}
		else if(node.oclIsTypeOf(Turn!OrFork) or node.oclIsTypeOf(Turn!AndFork)){
			if(nextNode.oclIsUndefined()){
				nextNode <- thisModule.retrieveNode(node);
			}
			
			thisModule.addPred(thisModule.retrieveNode(firstNode), nextNode.firstUnconnectedSucc());
			
			if(firstNode.oclIsTypeOf(Turn!Timer) and node.oclIsTypeOf(Turn!OrFork)){
				thisModule.addPred(thisModule.retrieveNode(firstNode), thisModule.retrieveNode(node).succ -> first());
			}
		}
		else if(node.oclIsTypeOf(Turn!Stub)){
			thisModule.addPred(thisModule.retrieveNode(firstNode), thisModule.retrieveNode(node).firstUnconnectedSucc());
		}
	}
}
	
rule handleNode(currentNode: Turn!PathNode, previousNode: Turn!PathNode){
	using{
		vConnect : Turn!PathNode = OclUndefined;
	}
	do{
		if(currentNode.oclIsTypeOf(Turn!Connect)){
			if(previousNode.oclIsTypeOf(Turn!Connect)){
				vConnect <- thisModule.createEmptyPointConnect(currentNode, thisModule.retrieveNode(previousNode.connectsTo).succ);
				if(not thisModule.retrieveNode(previousNode.connectsTo).oclIsUndefined()){
					thisModule.addPred(thisModule.retrieveNode(previousNode.connectsTo), vConnect.succ);
				}
			}
			else{
				thisModule.createEmptyPointConnect(currentNode, thisModule.retrieveNode(previousNode).succ);
			}
		}
		else if(previousNode.oclIsTypeOf(Turn!Connect)){
			if(previousNode.connectsTo.oclIsTypeOf(Turn!Timer)){
				thisModule.addPred(thisModule.retrieveNode(currentNode), thisModule.retrieveNode(previousNode).firstUnconnectedSucc()); 
			}
			else{
				if(not currentNode.oclIsTypeOf(Turn!OrJoin) and not currentNode.oclIsTypeOf(Turn!AndJoin)){
					thisModule.addSucc(thisModule.retrieveNode(previousNode.connectsTo), thisModule.createNodeConnection());
				}
				thisModule.addPred(thisModule.retrieveNode(currentNode), thisModule.retrieveNode(previousNode.connectsTo).firstUnconnectedSucc());
			}
		}
		else if((previousNode.oclIsTypeOf(Turn!RespRef) and not currentNode.oclIsTypeOf(Turn!Timer)) or currentNode.oclIsTypeOf(Turn!WaitingPlace) or currentNode.oclIsTypeOf(Turn!FailurePoint) or currentNode.oclIsTypeOf(Turn!RespRef)){
			thisModule.addPred(thisModule.retrieveNode(currentNode), thisModule.tUCMmap.allRespDefsMatching(previousNode.name) -> collect(s|s.succ) -> flatten() -> select(s|s.target.oclIsUndefined()));
		}
		else if(previousNode.oclIsTypeOf(Turn!Timer) or previousNode.oclIsTypeOf(Turn!AndJoin) or previousNode.oclIsTypeOf(Turn!OrJoin)){
			thisModule.addPred(thisModule.retrieveNode(currentNode), thisModule.retrieveNode(previousNode).firstUnconnectedSucc());
		}
	}
}

rule handleRegularEnds(pathend: Turn!PathNode, currentNode: Turn!PathNode){
	using{
		vNewPred : Turn!PathNode = OclUndefined;	
	}
	do{
		if(currentNode.oclIsTypeOf(Turn!RespRef)){
			if(pathend.oclIsTypeOf(Turn!EndpointWithConnect)){
				thisModule.addPred(thisModule.retrieveNode(pathend.regularEnd), thisModule.retrieveNode(currentNode).firstUnconnectedSucc());
			}
			else if(pathend.oclIsTypeOf(Turn!Stub)){
				thisModule.addPred(thisModule.retrieveNode(pathend), thisModule.retrieveNode(currentNode).firstUnconnectedSucc());
			}
			else if(pathend.oclIsTypeOf(Turn!AndFork) or pathend.oclIsTypeOf(Turn!OrFork)){
				thisModule.connectPathEndToNextNode(pathend, thisModule.retrieveNode(currentNode).firstUnconnectedSucc());
			}
		}
		else if(pathend.oclIsTypeOf(Turn!EndpointWithConnect)){
			if(currentNode.oclIsTypeOf(Turn!Connect)){
				if(currentNode.connectsTo.oclIsTypeOf(Turn!Timer)){
					thisModule.addPred(thisModule.retrieveNode(pathend.regularEnd), thisModule.retrieveNode(currentNode).firstUnconnectedSucc());
				}
				else if(pathend.regularEnd.oclIsTypeOf(Turn!EndPoint)){
					if(currentNode.connectsTo.oclIsTypeOf(Turn!StartPoint)){
						thisModule.addSucc(thisModule.retrieveNode(currentNode.connectsTo), thisModule.createNodeConnection());
					}
					thisModule.addPred(thisModule.retrieveNode(pathend.regularEnd), thisModule.retrieveNode(currentNode.connectsTo).firstUnconnectedSucc());
				}
			}
			else if(currentNode.oclIsTypeOf(Turn!WaitingPlace)){
				if(not currentNode.connect.oclIsUndefined() and not thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> isEmpty()){
					--TODO: figure out how to make this do something
					--vNewPred <- thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> any(ept|ept.succ -> includes(thisModule.retrieveNode(currentNode.connect).pred -> first())).firstUnconnectedSucc();
					--thisModule.addPred(thisModule.retrieveNode(pathend.regularEnd), vNewPred);
				}
				else if(pathend.regularEnd.oclIsTypeOf(Turn!EndPoint)){
					thisModule.addPred(thisModule.retrieveNode(pathend.regularEnd), thisModule.retrieveNode(currentNode).firstUnconnectedSucc());
				}
			}
			else if(pathend.regularEnd.oclIsTypeOf(Turn!EndPoint)){
				thisModule.addPred(thisModule.retrieveNode(pathend.regularEnd), thisModule.retrieveNode(currentNode).firstUnconnectedSucc());
			}
		}
		else if(pathend.oclIsTypeOf(Turn!Stub) or pathend.oclIsTypeOf(Turn!OrFork) or pathend.oclIsTypeOf(Turn!AndFork)){
			if(currentNode.oclIsTypeOf(Turn!Connect)){
				if(currentNode.connectsTo.oclIsTypeOf(Turn!WaitingPlace)){
					currentNode <- currentNode.connectsTo;
				}
			}
			thisModule.addPred(thisModule.retrieveNode(pathend), thisModule.retrieveNode(currentNode).firstUnconnectedSucc());
		}
	}
}

rule connectNodes(pathbody: Sequence(Turn!PathBody), node: Turn!PathNode, nextNode: Urn!PathNode){
	using{
		vPreviousNode : Turn!PathNode = OclUndefined;
		vLastNode : Turn!PathNode = OclUndefined;
	}
	do{
		for(currentNode in pathbody.pathNodes){
			if(currentNode.oclIsTypeOf(Turn!Timer)){
				thisModule.processTimer(currentNode);
			}
			
			if(vPreviousNode.oclIsUndefined()){
				thisModule.handleFirstNode(node, currentNode, nextNode);
			}
			else{
				thisModule.handleNode(currentNode, vPreviousNode);
			}
			
			vPreviousNode <- currentNode;
		}
		
		vLastNode <- vPreviousNode;
		
		if(not vLastNode.oclIsUndefined()){
			if(not pathbody.pathEnd.oclIsUndefined()){
				thisModule.handleRegularEnds(pathbody.pathEnd, vLastNode);
			}
			else{
				if(vLastNode.oclIsTypeOf(Turn!Connect)){
					if(vLastNode.connectsTo.oclIsTypeOf(Turn!WaitingPlace)){
						vLastNode <- vLastNode.connectsTo;
					}
				}
				
				if(not pathbody.referencedEnd.oclIsUndefined()){
					thisModule.addPred(thisModule.retrieveNode(pathbody.referencedEnd), thisModule.retrieveNode(vLastNode).succ);	
				}
				else if(not pathbody.referencedStub.oclIsUndefined()){-- and not vPreviousNode.oclIsUndefined()){
					thisModule.processReferencedStub(pathbody, thisModule.retrieveNode(vLastNode).succ);
				}
			}
		}
	}
}