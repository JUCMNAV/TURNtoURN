module ConnectNodes;

create OUT : Urn from IN : Turn;

--QUESTION: are select(s|s.target = OclUndefined) and any(s|s.target.oclIsUndefined()) equivalent here? i.e., will there only ever be one item with s.target = undefined?
-- TODO: determine if this name is appropriate
rule processNode(tUCMmap: Urn!UCMmap, pathbody: Sequence(Turn!PathBody), currentNode: Urn!PathNode, previousNode: Urn!PathNode, isTimer: Boolean){
	do{
		if(previousNode.oclIsTypeOf(Turn!WaitingPlace)){
			currentNode.pred <- thisModule.resolveTemp(previousNode, 'tWtPlace').succ -> any(s|s.target.oclIsUndefined());
		}
		else if(previousNode.oclIsTypeOf(Turn!FailurePoint)){
			currentNode.pred <- thisModule.resolveTemp(previousNode, 'tFailPt').succ -> any(s|s.target.oclIsUndefined());
		}
		else if(not isTimer and previousNode.oclIsTypeOf(Turn!Timer)){
			currentNode.pred <- thisModule.timerMap.get(previousNode).succ -> any(s|s.target.oclIsUndefined());
		}
		else if(previousNode.oclIsTypeOf(Turn!Connect)){
			if(previousNode.connectsTo.oclIsTypeOf(Turn!StartPoint)){
				tUCMmap.getNode(previousNode.connectsTo.name).succ <- thisModule.createNodeConnection();
				currentNode.pred <- tUCMmap.getNode(previousNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
			}
			else if(previousNode.connectsTo.oclIsTypeOf(Turn!Timer)){
				currentNode.pred <- thisModule.connectMap.get(previousNode).succ -> any(s|s.target.oclIsUndefined()); 
			}
			else{
				currentNode.pred <- tUCMmap.getNode(previousNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
			}
		}
		else if(isTimer){
			if(previousNode.oclIsTypeOf(Turn!RespRef)){
				currentNode.pred <- thisModule.resolveTemp(previousNode, 'tRespRef').succ -> select(s|s.target.OclUndefined);
			}
			else {
				currentNode.pred <- tUCMmap.getNode(previousNode.name).succ -> any(s|s.target.oclIsUndefined());
			}
		}
		else if(previousNode.oclIsTypeOf(Turn!RespRef)){
			currentNode.pred <- thisModule.resolveTemp(previousNode, 'tRespRef').succ -> any(s|s.target.oclIsUndefined());
		}
		else{
			currentNode.pred <- tUCMmap.getNode(previousNode.name).succ;
		}
	}
}

--I'm using the vague term isCaseOne here as I'm not sure of the difference between the two cases / why it is necessary
--TODO: name this more precisely
rule getNodeToConnect(tUCMmap: Urn!UCMmap, currentNode: Turn!PathNode, isCaseOne: Boolean){
	do{
		thisModule.nodeToJoin <- '';
		
		thisModule.succeeded <- false;
		
		if(currentNode.oclIsTypeOf(Turn!Connect)){
			if(currentNode.connectsTo.oclIsTypeOf(Turn!WaitingPlace)){
				thisModule.nodeToJoin <- tUCMmap.getNode(currentNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
				thisModule.succeeded <- true;
			}
		}
		
		if(not thisModule.succeeded){
			if(isCaseOne){
				thisModule.nodeToJoin <- tUCMmap.getNode(currentNode.name).succ -> any(s|s.target.oclIsUndefined());
			}
			else{
				thisModule.nodeToJoin <- tUCMmap.getNode(currentNode.name).succ;
			}
		}
		
		thisModule.nodeToJoin;
	}
}

-- QUESTION: determine why we look at the first node, i.e., pathbody.pathNodes -> first(), rather than the last
-- TODO: determine how the next connecting node is chosen
-- TODO: determine if this name is appropriate
rule handleConnectNode(tUCMmap: Urn!UCMmap, NODE: Turn!PathNode, ITEM: OclAny, timerNode: Turn!PathNode){
	do{
		thisModule.connect <- thisModule.createConnect(tUCMmap);

		if(not NODE.connectsTo.oclIsTypeOf(Turn!Timer)){
			thisModule.emptyPt <- thisModule.createEmptyPt(tUCMmap, OclAny, true);
			thisModule.connect.pred <- thisModule.emptyPt.succ -> at(1);
			
			thisModule.newNode <- tUCMmap.getNode(NODE.connectsTo.name);
			thisModule.newNode.pred <- thisModule.newNode.pred -> union(thisModule.connect.succ);
		}
		else{
			thisModule.newNode <- thisModule.createEmptyPt(tUCMmap, NODE.connectsTo, true);
			thisModule.connect.pred <- thisModule.newNode.succ -> at(1);
			-- TODO: not sure if this second condition I added avoids trying to connect the first path node or prevents the connect chain from starting up altogether
			if(timerNode.oclIsTypeOf(Turn!Connect)){
				if(not thisModule.connectMap.get(timerNode.connectsTo).oclIsUndefined()){
					thisModule.connectMap.get(timerNode.connectsTo).pred <- thisModule.connect.succ;
				}
			}
		}
		if(ITEM.oclIsTypeOf(Urn!PathNode)){
			thisModule.newNode.pred <- thisModule.newNode.pred -> including(ITEM);	
		}
		else if(ITEM.oclIsTypeOf(Sequence(Urn!PathNode))){
			thisModule.newNode.pred <- thisModule.newNode.pred -> union(ITEM);
		}
		thisModule.connect;
	}
}


--TODO: find a way to reduce the number of arguments for this rule
rule handleForkLogic(tUCMmap: Turn!UCMmap, path: Turn!Path, node: Turn!PathNode, firstNode: Turn!PathNode, nextNode: Urn!PathNode, counter: Integer, case: String){
	do{
		if(case = 'and'){
			thisModule.currentMap <- thisModule.andForkMap;
		}
		else if(case = 'or'){
			thisModule.currentMap <- thisModule.orForkMap;
		}
		else{
			--there should not be any other cases
		}
	
		thisModule.succeeded <- false;
		
		-- TODO: move this logic up a level into the methods that assign nextNode a value
		if(not nextNode.oclIsUndefined()){
			if(nextNode <> ''){
				thisModule.nextConnectingNode <- nextNode;
				thisModule.succeeded <- true;
			}
		}
		
		if(not thisModule.succeeded){
			thisModule.nextConnectingNode <- thisModule.currentMap.get(path);
		}

		if(firstNode.oclIsTypeOf(Turn!RespRef)){
			thisModule.resolveTemp(firstNode ,'tRespRef').pred <- thisModule.nextConnectingNode.succ -> any(s|s.target.oclIsUndefined());
		}
		else if(firstNode.oclIsTypeOf(Turn!Connect)){
			-- look for asynchronous connect (QUESTION: what does this mean?)
			if(counter = -1){ --AND case
				thisModule.connect <- thisModule.handleConnectNode(tUCMmap, firstNode, thisModule.nextConnectingNode.succ -> any(s|s.target.oclIsUndefined()), firstNode);
			}
			else{ --OR case
				thisModule.connect <- thisModule.handleConnectNode(tUCMmap, firstNode, thisModule.nextConnectingNode.succ -> at(counter), OclUndefined);
			}

			thisModule.connectMap <- thisModule.connectMap.including(node, thisModule.connect);
		}
		else{
			-- where is this defined? where is it used?
			if(firstNode.oclIsTypeOf(Turn!Timer)){
				thisModule.nodeCollector <- thisModule.nodeCollector -> union(thisModule.createTimer(firstNode, tUCMmap));
			}
			tUCMmap.getNode(firstNode.name).pred <- thisModule.nextConnectingNode.succ -> any(s|s.target.oclIsUndefined());
		}
		
		--ADDED FOR TIMER AND ORFORK CONNECTION
		if(node.oclIsTypeOf(Turn!Timer)){
			tUCMmap.getNode(node.name).pred <- thisModule.currentMap.get(path).succ -> at(counter);
		}
	}
}

--QUESTION: there doesn't appear to be a Turn!PathNode class. What should I use instead?
rule handleFirstNode(tUCMmap: Urn!UCMmap, path: Turn!Path, firstNode: Turn!PathNode, nextNode: Urn!PathNode){
	do{
		if(path.oclIsTypeOf(Turn!Path)){
			thisModule.startPoint <- tUCMmap.getNode(path.startPoint.name);
			
			if(firstNode.oclIsTypeOf(Turn!RespRef)){
				thisModule.resolveTemp(firstNode, 'tRespRef').pred <- thisModule.startPoint.succ -> at(1);
			}
			else if(firstNode.oclIsTypeOf(Turn!Timer)){
				tUCMmap.nodes <- tUCMmap.nodes -> union(thisModule.createTimer(firstNode, tUCMmap));
				thisModule.timerMap.get(firstNode).pred <- thisModule.startPoint.succ;
			} --with an else
			else if(firstNode.oclIsTypeOf(Turn!Connect)) {
				thisModule.connect <- thisModule.handleConnectNode(tUCMmap, firstNode, thisModule.startPoint.succ -> any(s|s.target.oclIsUndefined()), OclUndefined);
				thisModule.connectMap <- thisModule.connectMap.including(firstNode, thisModule.connect);
			}
			else if(firstNode.oclIsTypeOf(Turn!WaitingPlace)){
				if(not firstNode.connect.oclIsUndefined() and not tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> isEmpty()){
					tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> any(ept|ept.succ -> includes(thisModule.connectMap.get(firstNode.connect).pred -> first())).pred <- thisModule.startPoint.succ;
				}
				else{
					thisModule.resolveTemp(firstNode, 'tWtPlace').pred <- thisModule.startPoint.succ;
				}
			}
			else if(firstNode.oclIsTypeOf(Turn!FailurePoint)){
				thisModule.resolveTemp(firstNode, 'tFailPt').pred <- thisModule.startPoint.succ;
			}
			else{
				--tUCMmap.getNode(firstNode.name).pred <- thisModule.startPoint.succ;
			}
		}
		else if(path.oclIsTypeOf(Turn!OrFork)){
			thisModule.handleForkLogic(tUCMmap, path, firstNode, firstNode, nextNode, thisModule.counter, 'or');
		}
		else if (path.oclIsTypeOf(Urn!OrJoin)){
			thisModule.succeeded <- false;
			
			if(firstNode.oclIsTypeOf(Turn!RespRef)){
				if(thisModule.getResponsibility(firstNode.name).respRefs -> select(r|r.diagram.name=tUCMmap.name) -> isEmpty()){
					thisModule.getResponsibility(firstNode.name).respRefs -> any(r|r.diagram.name=tUCMmap.name).pred <- tUCMmap.getNode(path.name).succ;
					thisModule.succeeded <- true;
				}
			}
			
			if(not thisModule.succeeded){
				tUCMmap.getNode(firstNode.name).pred <- tUCMmap.getNode(path.name).succ -> at(1);
			}
		}
		else if(path.oclIsTypeOf(Turn!AndFork)){
			thisModule.handleForkLogic(tUCMmap, path, firstNode, firstNode, nextNode, thisModule.counter, 'and');
		}
		else {
			thisModule.currentNode <- thisModule.stubMap.get(path);
			
			if(firstNode.oclIsTypeOf(Turn!RespRef)){
				thisModule.resolveTemp(firstNode, 'tRespRef').pred <- thisModule.currentNode.succ -> at(1);
			} 
			else if(firstNode.oclIsTypeOf(Turn!Timer)){
				tUCMmap.nodes <- tUCMmap.nodes -> including(thisModule.createTimer(firstNode, tUCMmap));
				thisModule.timerMap.get(firstNode).pred <- tUCMmap.getNode(path.name).succ -> at(1);
			}
			else if(firstNode.oclIsTypeOf(Turn!Connect)){
				thisModule.connect <- thisModule.handleConnectNode(tUCMmap, firstNode, thisModule.currentNode.succ -> any(s|s.target.oclIsUndefined()), firstNode);
				thisModule.connectMap <- thisModule.connectMap.including(firstNode, thisModule.connect);
			}
			else if(firstNode.oclIsTypeOf(Turn!WaitingPlace)){
				thisModule.resolveTemp(firstNode, 'tWtPlace').pred <- thisModule.currentNode.succ -> any(s|s.target.oclIsUndefined());
			}
			else if(firstNode.oclIsTypeOf(Turn!FailurePoint)){
				thisModule.resolveTemp(firstNode, 'tFailPt').pred <- thisModule.currentNode.succ -> any(s|s.target.oclIsUndefined());
			}
			else{
				tUCMmap.getNode(firstNode.name).pred <- tUCMmap.getNode(path.name).succ -> at(1);
			}
		}
	}
}

rule handleNode(tUCMmap: Turn!UCMmap, pathbody: Sequence(Turn!PathBody), currentNode: Turn!PathNode, previousNode: Turn!PathNode, firstNode: Turn!PathNode){
	do{
		if(currentNode.oclIsTypeOf(Turn!WaitingPlace)){
			thisModule.processNode(tUCMmap, pathbody, thisModule.resolveTemp(currentNode, 'tWtPlace'), previousNode, false);
		}
		else if(currentNode.oclIsTypeOf(Turn!FailurePoint)){
			thisModule.processNode(tUCMmap, pathbody, thisModule.resolveTemp(currentNode, 'tFailPt'), previousNode, false);
		}
		else if(currentNode.oclIsTypeOf(Turn!RespRef)){
			thisModule.processNode(tUCMmap, pathbody, thisModule.resolveTemp(currentNode, 'tRespRef'), previousNode, false);
		}
		--NEED TO CREATE TIMER FOR ALL OTHER COMBINATIONS
		else if(currentNode.oclIsTypeOf(Turn!Timer)){
			tUCMmap.nodes <- thisModule.createTimer(currentNode, tUCMmap);
			thisModule.processNode(tUCMmap, pathbody, thisModule.timerMap.get(currentNode), previousNode, true);
		}
		--NEED TO CREATE CONNECT FOR ALL OTHER COMBINATIONS
		else if(currentNode.oclIsTypeOf(Turn!Connect)){
			thisModule.pred <- '';
			
			if(previousNode.oclIsTypeOf(Turn!RespRef)){
				thisModule.pred <- tUCMmap.getSelectedRespDef(previousNode.name) -> any(s|not s.pred.oclIsUndefined()).succ;
			}
			else if(previousNode.oclIsTypeOf(Turn!Connect)){
				thisModule.pred <- tUCMmap.getNode(previousNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
			}
			else{
				thisModule.pred <- tUCMmap.getNode(previousNode.name).succ;
			}
			--QUESTION: why does this need the first node?
			thisModule.connect <- thisModule.handleConnectNode(tUCMmap, currentNode, thisModule.pred, firstNode);
			thisModule.connectMap <- thisModule.connectMap.including(currentNode, thisModule.connect);
		}
		-- DOUBLE CHECK IF THIS IS REQUIRED
		else if(previousNode.oclIsTypeOf(Turn!RespRef)){
			tUCMmap.getNode(currentNode.name).pred <- tUCMmap.getSelectedRespDef(previousNode.name) -> collect(s|s.succ) -> flatten() -> select(s|s.target.oclIsUndefined());
		}
		else if (previousNode.oclIsTypeOf(Turn!Connect)){
			if(previousNode.connectsTo.oclIsTypeOf(Turn!Timer)){
				tUCMmap.getNode(currentNode.name).pred <- thisModule.connectMap.get(previousNode).succ -> any(s|s.target.oclIsUndefined()); 
			}
			else{
				if(previousNode.connectsTo.oclIsTypeOf(Turn!StartPoint)){
					tUCMmap.getNode(previousNode.connectsTo.name).succ <- thisModule.createNodeConnection();
				}
				tUCMmap.getNode(currentNode.name).pred <- tUCMmap.getNode(previousNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
			}
		}
		else{
			tUCMmap.getNode(currentNode.name).pred <- tUCMmap.getNode(previousNode.name).succ;
		}
	}
}

rule handleRegularEnds(tUCMmap: Urn!UCMmap, pathbody: Sequence(Turn!PathBody), currentNode: Turn!PathNode, nextNode: Turn!PathNode){
	do{
		if(currentNode.oclIsTypeOf(Turn!RespRef)){
			thisModule.nextNode <- thisModule.resolveTemp(currentNode ,'tRespRef').succ -> any(s|s.target.oclIsUndefined());
			
			--QUESTION: is it possible for something to be both Turn!RespRef and Turn!Connect
			if(pathbody.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect) and currentNode.oclIsTypeOf(Turn!Connect)){
				tUCMmap.getNode(pathbody.pathEnd.regularEnd.name).pred <- tUCMmap.getNode(currentNode.connectsTo.name).succ;
			}
			else if (pathbody.pathEnd.oclIsTypeOf(Turn!Stub)){
				thisModule.stubMap.get(pathbody.pathEnd).pred <- thisModule.nextNode;
			}
			else{
				thisModule.connectPathEndToNextNode(tUCMmap, pathbody.pathEnd, thisModule.nextNode);
			}
		}
		else if(pathbody.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
			thisModule.newPred <- ''; --TODO: determine a proper name for this
			
			if(not currentNode.oclIsTypeOf(Turn!Connect)){
				if(currentNode.oclIsTypeOf(Turn!WaitingPlace)){
					if(not currentNode.connect.oclIsUndefined() and not tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> isEmpty()){
						thisModule.newPred <- tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> any(ept|ept.succ -> includes(thisModule.connectMap.get(currentNode.connect).pred -> first())).succ -> any(s|s.target.oclIsUndefined());
					}
					else{
						thisModule.newPred <- thisModule.resolveTemp(currentNode, 'tWtPlace').succ -> any(s|s.target.oclIsUndefined());
					}
				}
				else if(currentNode.oclIsTypeOf(Turn!FailurePoint)){
					thisModule.newPred <- thisModule.resolveTemp(currentNode, 'tFailPt').succ -> any(s|s.target.oclIsUndefined());
				}
				else if(currentNode.oclIsTypeOf(Turn!Timer)){
					thisModule.newPred <- thisModule.timerMap.get(currentNode).succ -> any(s|s.target.oclIsUndefined());
				}
				else{
					thisModule.newPred <- tUCMmap.getNode(currentNode.name).succ -> any(s|s.target.oclIsUndefined());
				}
			}
			else if(currentNode.connectsTo.oclIsTypeOf(Turn!Timer)){
				thisModule.newPred <- thisModule.connectMap.get(currentNode).succ -> any(s|s.target.oclIsUndefined()); 
			}
			else{
				--in case of a connect
				if(currentNode.connectsTo.oclIsTypeOf(Turn!StartPoint)){
					tUCMmap.getNode(currentNode.connectsTo.name).succ <- thisModule.createNodeConnection();
				}
				thisModule.newPred <- tUCMmap.getNode(currentNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
			}
			
			tUCMmap.getNode(pathbody.pathEnd.regularEnd.name).pred <- thisModule.newPred;
		}
		else if(pathbody.pathEnd.oclIsTypeOf(Turn!OrFork)){
			thisModule.orForkMap.get(pathbody.pathEnd).pred <- thisModule.getNodeToConnect(tUCMmap, currentNode, true);
		}
		else if(pathbody.pathEnd.oclIsTypeOf(Turn!AndFork)){
			thisModule.andForkMap.get(pathbody.pathEnd).pred <- thisModule.getNodeToConnect(tUCMmap, currentNode, true);
		}
		else if(pathbody.pathEnd.oclIsTypeOf(Turn!Stub)){
			if(currentNode.oclIsTypeOf(Turn!Timer)){
				thisModule.stubMap.get(pathbody.pathEnd).pred <- thisModule.timerMap.get(currentNode).succ -> any(s|s.target.oclIsUndefined());
			}
			else if(currentNode.oclIsTypeOf(Turn!Stub)){
				thisModule.stubMap.get(pathbody.pathEnd).pred <- thisModule.stubMap.get(currentNode).succ -> any(s|s.target.oclIsUndefined());
			}
			else{
				thisModule.stubMap.get(pathbody.pathEnd).pred <- thisModule.getNodeToConnect(tUCMmap, currentNode, true);	
			}
		}	
	}
}

rule handleReferencedEnds(tUCMmap: Turn!UCMmap, pathbody: Sequence(Turn!Pathbody), currentNode: Turn!PathNode){
	do{
		if(currentNode.oclIsTypeOf(Turn!RespRef)){
			if(pathbody.referencedEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
				tUCMmap.getNode(pathbody.referencedEnd.name).pred <- tUCMmap.getSelectedRespDef(currentNode.name) -> collect(s|s.succ) -> flatten() -> select(s|s.target.oclIsUndefined());
			}
			else if (pathbody.referencedEnd.oclIsTypeOf(Turn!OrFork)){
				thisModule.orForkMap.get(pathbody.pathEnd).pred <- thisModule.getResponsibility(currentNode.name).respRefs -> any(r|r.diagram.name = tUCMmap.name).succ;
			}
			else if (pathbody.referencedEnd.oclIsTypeOf(Turn!AndFork)){
				thisModule.andForkMap.get(pathbody.pathEnd).pred <- thisModule.getResponsibility(currentNode.name).respRefs -> any(r|r.diagram.name = tUCMmap.name).succ;
			}
			else if (pathbody.referencedEnd.oclIsTypeOf(Turn!RespRef)){
				tUCMmap.getAnyRespDef(pathbody.referencedEnd.name).pred <- tUCMmap.getSelectedRespDef(currentNode.name) -> collect(s|s.succ) -> flatten() -> select(s|s.target.oclIsUndefined());
			}
			else{
				tUCMmap.getNode(pathbody.referencedEnd.name).pred <- tUCMmap.getSelectedRespDef(currentNode.name) -> collect(s|s.succ) -> flatten() -> select(s|s.target.oclIsUndefined());
			}
		}
		else if(pathbody.referencedEnd.oclIsTypeOf(Turn!OrFork)){
			thisModule.orForkMap.get(pathbody.referencedEnd).pred <- tUCMmap.getNode(currentNode.name).succ -> any(s|s.target.oclIsUndefined());
		}
		else if(pathbody.referencedEnd.oclIsTypeOf(Turn!AndFork)){
			thisModule.andForkMap.get(pathbody.referencedEnd).pred <- tUCMmap.getNode(currentNode.name).succ -> any(s|s.target.oclIsUndefined());
		}
		else if(pathbody.referencedEnd.oclIsTypeOf(Turn!RespRef)){
			thisModule.resolveTemp(pathbody.referencedEnd,'tRespRef').pred <- thisModule.getNodeToConnect(tUCMmap, currentNode, true);
		}
		else{
			thisModule.succeeded <- false;
			
			if(pathbody.referencedEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
				if(not currentNode.oclIsTypeOf(Turn!Connect)){
					if(tUCMmap.getNode(pathbody.referencedEnd.name).pred -> collect(s|s.source) -> isEmpty()){
						tUCMmap.getNode(pathbody.referencedEnd.name).pred <- tUCMmap.getNode(currentNode.name).succ;
						thisModule.succeeded <- true;
					}
				}
			}
			
			if(not thisModule.succeeded){
				tUCMmap.getNode(pathbody.referencedEnd.name).pred <- thisModule.getNodeToConnect(tUCMmap, currentNode, false);	
			}
		}	
	}
}

rule handleReferencedStubs(tUCMmap: Urn!UCMmap, pathbody: Sequence(Turn!Pathbody), currentNode: Turn!PathNode){
	do{
		if(currentNode.oclIsTypeOf(Turn!RespRef)){
			thisModule.nextNode <- '';
			
			if(tUCMmap.getNode(pathbody.referencedStub.name).pred -> size() >= pathbody.index){
				thisModule.nextNode <- tUCMmap.getAnyRespDef(currentNode.name).succ;
			}
			else{
				thisModule.nextNode <- tUCMmap.getSelectedRespDef(currentNode.name) -> collect(s|s.succ) -> flatten() -> select(s|s.target.oclIsUndefined());
			}
			
			thisModule.processReferencedStub(tUCMmap, pathbody, thisModule.nextNode);
		}
		else if(tUCMmap.getNode(pathbody.referencedStub.name).pred -> size() >= pathbody.index){
			thisModule.firstPred <- tUCMmap.getNode(pathbody.referencedStub.name).pred -> first().source;
			
			thisModule.orJoinPred <- thisModule.getNodeToConnect(tUCMmap, currentNode, false);
			
			thisModule.orJoin <- thisModule.createOrJoin(tUCMmap, thisModule.orJoinPred);
			thisModule.orJoin.pred <- thisModule.firstPred.succ;
			tUCMmap.getNode(pathbody.referencedStub.name).pred <- thisModule.orJoin.succ;
		}
		else{
			tUCMmap.getNode(pathbody.referencedStub.name).pred <- thisModule.getNodeToConnect(tUCMmap, currentNode, false);
		}
	}
}

rule connectNodes(pathbody: Sequence(Turn!PathBody), path: Turn!Path, tUCMmap: Urn!UCMmap, nextNode: Urn!PathNode){
	do{
		thisModule.firstNode <- '';
		thisModule.previousNode <- '';
		
		for (currentNode in pathbody.pathNodes){
			
			if(thisModule.previousNode = ''){
				thisModule.firstNode <- currentNode;
				thisModule.handleFirstNode(tUCMmap, path, currentNode, nextNode);
			}
			else{
				thisModule.handleNode(tUCMmap, pathbody, currentNode, thisModule.previousNode, thisModule.firstNode);
			}
			
			if(thisModule.nodeCounter = pathbody.pathNodes -> size()){
				if(not pathbody.pathEnd.oclIsUndefined()){
					thisModule.handleRegularEnds(tUCMmap, pathbody, currentNode);
				}
				else if(not pathbody.referencedEnd.oclIsUndefined()){
					thisModule.handleReferencedEnds(tUCMmap, pathbody, currentNode);
				}
				else if(not pathbody.referencedStub.oclIsUndefined()){
					thisModule.handleReferencedStubs(tUCMmap, pathbody, currentNode, thisModule.previousNode);
				}
			}
			
			thisModule.previousNode <- currentNode;
		}
	}		
}