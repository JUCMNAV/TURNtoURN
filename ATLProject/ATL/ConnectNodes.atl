module ConnectNodes;

create OUT : Urn from IN : Turn;

--QUESTION: are select(s|s.target = OclUndefined) and any(s|s.target.oclIsUndefined()) equivalent here? i.e., will there only ever be one item with s.target = undefined?
-- TODO: determine if this name is appropriate
rule processNode(pathbody: Sequence(Turn!PathBody), currentNode: Urn!PathNode, previousNode: Urn!PathNode, isTimer: Boolean){
	using{
		vNewPred : Urn!PathNode = OclUndefined;
	}
	do{
		if(previousNode.oclIsTypeOf(Turn!WaitingPlace)){
			vNewPred <- thisModule.resolveTemp(previousNode, 'tWtPlace').firstUnconnectedSucc();
		}
		else if(previousNode.oclIsTypeOf(Turn!FailurePoint)){
			vNewPred <- thisModule.resolveTemp(previousNode, 'tFailPt').firstUnconnectedSucc();
		}
		else if(not isTimer and previousNode.oclIsTypeOf(Turn!Timer)){
			vNewPred <- thisModule.timerMap.get(previousNode).firstUnconnectedSucc();
		}
		else if(previousNode.oclIsTypeOf(Turn!Connect)){
			if(previousNode.connectsTo.oclIsTypeOf(Turn!StartPoint)){
				thisModule.addSucc(thisModule.thisModule.tUCMmap.getNode(previousNode.connectsTo.name), thisModule.createNodeConnection());
				vNewPred <- thisModule.tUCMmap.getNode(previousNode.connectsTo.name).firstUnconnectedSucc();
			}
			else if(previousNode.connectsTo.oclIsTypeOf(Turn!Timer)){
				vNewPred <- thisModule.connectMap.get(previousNode).firstUnconnectedSucc(); 
			}
			else{
				vNewPred <- thisModule.tUCMmap.getNode(previousNode.connectsTo.name).firstUnconnectedSucc();
			}
		}
		else if(previousNode.oclIsTypeOf(Turn!RespRef)){
			if(isTimer){
				vNewPred <- thisModule.resolveTemp(previousNode, 'tRespRef').succ -> select(s|s.target.oclIsUndefined());
			}
			else {
				vNewPred <- thisModule.resolveTemp(previousNode, 'tRespRef').firstUnconnectedSucc();
			}
		}
		else{
			if(isTimer){
				vNewPred <- thisModule.tUCMmap.getNode(previousNode.name).firstUnconnectedSucc();
			}
			else{
				vNewPred <- thisModule.tUCMmap.getNode(previousNode.name).succ;
			}
		}
		
		thisModule.addPred(currentNode, vNewPred);
		OclUndefined; -- RETURN VOID
	}
}

--I'm using the vague term isCaseOne here as I'm not sure of the difference between the two cases / why it is necessary
--TODO: name this more precisely
rule getNodeToConnect(currentNode: Turn!PathNode, isCaseOne: Boolean){
	using{
		vNodeToJoin : Urn!PathNode = OclUndefined;
		vConnectedToWaitingPlace : Boolean = 
			if(currentNode.oclIsTypeOf(Turn!Connect)) then
				currentNode.connectsTo.oclIsTypeOf(Turn!WaitingPlace)
			else
				false
			endif;
	}
	do{
		if(vConnectedToWaitingPlace){
			vNodeToJoin <- thisModule.tUCMmap.getNode(currentNode.connectsTo.name).firstUnconnectedSucc();	
		}
		else if(isCaseOne){
			vNodeToJoin <- thisModule.tUCMmap.getNode(currentNode.name).firstUnconnectedSucc();
		}
		else{
			vNodeToJoin <- thisModule.tUCMmap.getNode(currentNode.name).succ;
		}
				
		vNodeToJoin; -- RETURN Urn!PathNode
	}
}

-- QUESTION: determine why we look at the first node, i.e., pathbody.pathNodes -> first(), rather than the last
-- TODO: determine how the next connecting node is chosen
-- TODO: determine if this name is appropriate
rule handleConnectNode(currentNode: Turn!PathNode, newPred: Urn!PathNode){
	using{
		vConnectsToTimer : Boolean = currentNode.connectsTo.oclIsTypeOf(Turn!Timer);
		vEmptyPtId : Integer = thisModule.nextId().toString();
		vName : String = 
			if (not vConnectsToTimer) then
				'EmptyPoint'+vEmptyPtId
			else
				'AsynchConnectTimer#'+currentNode.connectsTo.name
			endif;
		vNewNode : Urn!PathNode = OclUndefined;
	}
	to
		tNodeConnection1: Urn!NodeConnection(),
		tConnect: Urn!Connect(
			id <- thisModule.nextId().toString(),
			name <- 'Connect' + tConnect.id,
			diagram <- thisModule.tUCMmap,
			succ <- tNodeConnection1,
			pred <- tNodeConnection2
		),
		tNodeConnection2: Urn!NodeConnection(),
		tEmptyPt: Urn!EmptyPoint(
			id <- vEmptyPtId,
			name <- vName,
			diagram <- thisModule.tUCMmap,
			succ <- tNodeConnection2
		)
	do{
		if(vConnectsToTimer){
			vNewNode <- tEmptyPt;
		}
		else{
			thisModule.addPred(thisModule.tUCMmap.getNode(currentNode.connectsTo.name), tConnect.succ);
			vNewNode <- thisModule.tUCMmap.getNode(currentNode.connectsTo.name);
		}
		thisModule.addPred(vNewNode, newPred);
		thisModule.connectMap <- thisModule.connectMap.including(currentNode, tConnect);
		tConnect;
	}
}


--TODO: find a way to reduce the number of arguments for this rule
rule handleForkLogic(path: Turn!Path, firstNode: Turn!PathNode, nextNode: Urn!PathNode, case: String){
	do{
		if(case = 'And'){
			thisModule.currentMap <- thisModule.andForkMap;
		}
		else if(case = 'Or'){
			thisModule.currentMap <- thisModule.orForkMap;
		}
		else{
			--there should not be any other cases
		}
	
		if(nextNode.oclIsUndefined()){
			nextNode <- thisModule.currentMap.get(path);
		}

		if(firstNode.oclIsTypeOf(Turn!RespRef)){
			thisModule.addPred(thisModule.resolveTemp(firstNode ,'tRespRef'), nextNode.firstUnconnectedSucc());
		}
		else if(firstNode.oclIsTypeOf(Turn!Connect)){
			-- look for asynchronous connect (QUESTION: what does this mean?)
			if(case = 'And'){ --AND case
				thisModule.connect <- thisModule.handleConnectNode(firstNode, nextNode.firstUnconnectedSucc());
			}
			else if(case = 'Or'){ --OR case
				thisModule.connect <- thisModule.handleConnectNode(firstNode, nextNode.succ -> first());
			}
		}
		else{
			if(firstNode.oclIsTypeOf(Turn!Timer)){
				thisModule.createTimer(firstNode);
			}
			thisModule.addPred(thisModule.tUCMmap.getNode(firstNode.name), nextNode.firstUnconnectedSucc());
		}
		
		--ADDED FOR TIMER AND ORFORK CONNECTION
		if(firstNode.oclIsTypeOf(Turn!Timer)){
			thisModule.addPred(thisModule.tUCMmap.getNode(firstNode.name), thisModule.currentMap.get(path).succ -> first());
		}
	}
}

--QUESTION: there doesn't appear to be a Turn!PathNode class. What should I use instead?
rule handleFirstNode(path: Turn!Path, firstNode: Turn!PathNode, nextNode: Urn!PathNode){
	using {
		startPointFirstSucc : Urn!PathNode = OclUndefined;	
	}
	do{
		if(path.oclIsTypeOf(Turn!Path)){
			startPointFirstSucc <- thisModule.tUCMmap.getNode(path.startPoint.name).firstUnconnectedSucc();
			
			if(firstNode.oclIsTypeOf(Turn!RespRef)){
				thisModule.addPred(thisModule.resolveTemp(firstNode, 'tRespRef'), startPointFirstSucc);
			}
			else if(firstNode.oclIsTypeOf(Turn!Timer)){
				thisModule.addPred(thisModule.createTimer(firstNode), startPointFirstSucc);
			}
			else if(firstNode.oclIsTypeOf(Turn!Connect)) {
				thisModule.connect <- thisModule.handleConnectNode(firstNode, startPointFirstSucc);
			}
			else if(firstNode.oclIsTypeOf(Turn!WaitingPlace)){
				if(not firstNode.connect.oclIsUndefined() and not thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> isEmpty()){
					thisModule.addPred(thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> any(ept|ept.succ -> includes(thisModule.connectMap.get(firstNode.connect).pred -> first())), startPointFirstSucc);
				}
				else{
					thisModule.addPred(thisModule.resolveTemp(firstNode, 'tWtPlace'), startPointFirstSucc);
				}
			}
			else if(firstNode.oclIsTypeOf(Turn!FailurePoint)){
				thisModule.addPred(thisModule.resolveTemp(firstNode, 'tFailPt'), startPointFirstSucc);
			}
			else{
				thisModule.addPred(thisModule.tUCMmap.getNode(firstNode.turnGetLongestName()), startPointFirstSucc);
			}
		}
		else if(path.oclIsTypeOf(Turn!OrFork)){
			thisModule.handleForkLogic(path, firstNode, nextNode, 'Or');
		}
		else if (path.oclIsTypeOf(Urn!OrJoin)){
			thisModule.succeeded <- false;
			
			if(firstNode.oclIsTypeOf(Turn!RespRef)){
				if(thisModule.getResponsibility(firstNode.name).respRefs -> select(r|r.diagram.name=thisModule.tUCMmap.name) -> isEmpty()){
					thisModule.addPred((thisModule.getResponsibility(firstNode.name).respRefs -> any(r|r.diagram.name=thisModule.tUCMmap.name)), thisModule.tUCMmap.getNode(path.name).succ);
					thisModule.succeeded <- true;
				}
			}
			
			if(not thisModule.succeeded){
				thisModule.addPred(thisModule.tUCMmap.getNode(firstNode.name), thisModule.tUCMmap.getNode(path.name).succ -> first());
			}
		}
		else if(path.oclIsTypeOf(Turn!AndFork)){
			thisModule.handleForkLogic(path, firstNode, nextNode, 'And');
		}
		else {
			thisModule.currentNode <- thisModule.stubMap.get(path);
			
			if(firstNode.oclIsTypeOf(Turn!RespRef)){
				thisModule.addPred(thisModule.resolveTemp(firstNode, 'tRespRef'), thisModule.currentNode.succ -> first());
			} 
			else if(firstNode.oclIsTypeOf(Turn!Timer)){
				thisModule.addPred(thisModule.createTimer(firstNode), thisModule.tUCMmap.getNode(path.name).succ -> first());
			}
			else if(firstNode.oclIsTypeOf(Turn!Connect)){
				thisModule.connect <- thisModule.handleConnectNode(firstNode, thisModule.currentNode.firstUnconnectedSucc());
			}
			else if(firstNode.oclIsTypeOf(Turn!WaitingPlace)){
				thisModule.addPred(thisModule.resolveTemp(firstNode, 'tWtPlace'), thisModule.currentNode.firstUnconnectedSucc());
			}
			else if(firstNode.oclIsTypeOf(Turn!FailurePoint)){
				thisModule.addPred(thisModule.resolveTemp(firstNode, 'tFailPt'), thisModule.currentNode.firstUnconnectedSucc());
			}
			else{
				thisModule.addPred(thisModule.tUCMmap.getNode(firstNode.name), thisModule.tUCMmap.getNode(path.name).succ -> first());
			}
		}
	}
}

rule handleNode(pathbody: Sequence(Turn!PathBody), currentNode: Turn!PathNode, previousNode: Turn!PathNode){
	do{
		if(currentNode.oclIsTypeOf(Turn!WaitingPlace)){
			thisModule.processNode(pathbody, thisModule.resolveTemp(currentNode, 'tWtPlace'), previousNode, false);
		}
		else if(currentNode.oclIsTypeOf(Turn!FailurePoint)){
			thisModule.processNode(pathbody, thisModule.resolveTemp(currentNode, 'tFailPt'), previousNode, false);
		}
		else if(currentNode.oclIsTypeOf(Turn!RespRef)){
			thisModule.processNode(pathbody, thisModule.resolveTemp(currentNode, 'tRespRef'), previousNode, false);
		}
		--NEED TO CREATE TIMER FOR ALL OTHER COMBINATIONS
		else if(currentNode.oclIsTypeOf(Turn!Timer)){
			thisModule.processNode(pathbody, thisModule.createTimer(currentNode), previousNode, true);
		}
		--NEED TO CREATE CONNECT FOR ALL OTHER COMBINATIONS
		else if(currentNode.oclIsTypeOf(Turn!Connect)){
			thisModule.pred <- '';
			
			if(previousNode.oclIsTypeOf(Turn!RespRef)){
				thisModule.pred <- thisModule.tUCMmap.allRespDefsMatching(previousNode.name) -> any(s|not s.pred.oclIsUndefined()).succ;
			}
			else if(previousNode.oclIsTypeOf(Turn!Connect)){
				thisModule.pred <- thisModule.tUCMmap.getNode(previousNode.connectsTo.name).firstUnconnectedSucc();
			}
			else{
				thisModule.pred <- thisModule.tUCMmap.getNode(previousNode.name).succ;
			}
			
			thisModule.connect <- thisModule.handleConnectNode(currentNode, thisModule.pred);
			
			if(previousNode.oclIsTypeOf(Turn!Connect)){
				if(not thisModule.connectMap.get(previousNode.connectsTo).oclIsUndefined()){
					thisModule.addPred(thisModule.connectMap.get(previousNode.connectsTo), thisModule.connect.succ);
				}
			}
		}
		-- DOUBLE CHECK IF THIS IS REQUIRED
		else if(previousNode.oclIsTypeOf(Turn!RespRef)){
			thisModule.addPred(thisModule.tUCMmap.getNode(currentNode.name), thisModule.tUCMmap.allRespDefsMatching(previousNode.name) -> collect(s|s.succ) -> flatten() -> select(s|s.target.oclIsUndefined()));
		}
		else if (previousNode.oclIsTypeOf(Turn!Connect)){
			if(previousNode.connectsTo.oclIsTypeOf(Turn!Timer)){
				thisModule.addPred(thisModule.tUCMmap.getNode(currentNode.name), thisModule.connectMap.get(previousNode).firstUnconnectedSucc()); 
			}
			else{
				if(previousNode.connectsTo.oclIsTypeOf(Turn!StartPoint)){
					thisModule.addSucc(thisModule.tUCMmap.getNode(previousNode.connectsTo.name).succ, thisModule.createNodeConnection());
				}
				thisModule.addPred(thisModule.tUCMmap.getNode(currentNode.name), thisModule.tUCMmap.getNode(previousNode.connectsTo.name).firstUnconnectedSucc());
			}
		}
		else{
			thisModule.addPred(thisModule.tUCMmap.getNode(currentNode.name), thisModule.tUCMmap.getNode(previousNode.name).succ);
		}
	}
}

rule handleRegularEnds(pathend: Turn!PathNode, currentNode: Turn!PathNode){
	using{
		vNewPred : Turn!PathNode = OclUndefined;	
	}
	do{
		if(currentNode.oclIsTypeOf(Turn!RespRef)){
			thisModule.nextNode <- thisModule.resolveTemp(currentNode ,'tRespRef').firstUnconnectedSucc();
			
			--QUESTION: is it possible for something to be both Turn!RespRef and Turn!Connect
			if(pathend.oclIsTypeOf(Turn!EndpointWithConnect) and currentNode.oclIsTypeOf(Turn!Connect)){
				thisModule.addPred(thisModule.tUCMmap.getNode(pathend.regularEnd.name), thisModule.tUCMmap.getNode(currentNode.connectsTo.name).succ);
			}
			else if (pathend.oclIsTypeOf(Turn!Stub)){
				thisModule.addPred(thisModule.stubMap.get(pathend), thisModule.nextNode);
			}
			else{
				thisModule.connectPathEndToNextNode(pathend, thisModule.nextNode);
			}
		}
		else if(pathend.oclIsTypeOf(Turn!EndpointWithConnect)){
			if(not currentNode.oclIsTypeOf(Turn!Connect)){
				if(currentNode.oclIsTypeOf(Turn!WaitingPlace)){
					if(not currentNode.connect.oclIsUndefined() and not thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> isEmpty()){
						vNewPred <- thisModule.tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> any(ept|ept.succ -> includes(thisModule.connectMap.get(currentNode.connect).pred -> first())).firstUnconnectedSucc();
					}
					else{
						vNewPred <- thisModule.resolveTemp(currentNode, 'tWtPlace').firstUnconnectedSucc();
					}
				}
				else if(currentNode.oclIsTypeOf(Turn!FailurePoint)){
					vNewPred <- thisModule.resolveTemp(currentNode, 'tFailPt').firstUnconnectedSucc();
				}
				else if(currentNode.oclIsTypeOf(Turn!Timer)){
					vNewPred <- thisModule.timerMap.get(currentNode).firstUnconnectedSucc();
				}
				else{
					vNewPred <- thisModule.tUCMmap.getNode(currentNode.turnGetLongestName()).firstUnconnectedSucc();
				}
			}
			else if(currentNode.connectsTo.oclIsTypeOf(Turn!Timer)){
				vNewPred <- thisModule.connectMap.get(currentNode).firstUnconnectedSucc(); 
			}
			else{
				if(currentNode.connectsTo.oclIsTypeOf(Turn!StartPoint)){
					--in case of a connect
					thisModule.addSucc(thisModule.tUCMmap.getNode(currentNode.connectsTo.name), thisModule.createNodeConnection());
				}
				vNewPred <- thisModule.tUCMmap.getNode(currentNode.connectsTo.name).firstUnconnectedSucc();
			}
			
			thisModule.addPred(thisModule.tUCMmap.getNode(pathend.regularEnd.name), vNewPred);
		}
		else if(pathend.oclIsTypeOf(Turn!OrFork)){
			thisModule.addPred(thisModule.orForkMap.get(pathend), thisModule.getNodeToConnect(currentNode, true));
			--thisModule.addPred(Urn!PathNode.allInstances() -> select(n|n.name=pathend.turnGetLongestName()) -> first(), thisModule.getNodeToConnect(thisModule.tUCMmap, currentNode, true));
		}
		else if(pathend.oclIsTypeOf(Turn!AndFork)){
			thisModule.addPred(thisModule.andForkMap.get(pathend), thisModule.getNodeToConnect(currentNode, true));
		}
		else if(pathend.oclIsTypeOf(Turn!Stub)){
			if(currentNode.oclIsTypeOf(Turn!Timer)){
				thisModule.addPred(thisModule.stubMap.get(pathend), thisModule.timerMap.get(currentNode).firstUnconnectedSucc());
			}
			else if(currentNode.oclIsTypeOf(Turn!Stub)){
				thisModule.addPred(thisModule.stubMap.get(pathend), thisModule.stubMap.get(currentNode).firstUnconnectedSucc());
			}
			else{
				thisModule.addPred(thisModule.stubMap.get(pathend), thisModule.getNodeToConnect(currentNode, true));
			}
		}	
	}
}

rule handleReferencedEnds(referencedEnd: Turn!PathNode, currentNode: Turn!PathNode){
	do{
		if(currentNode.oclIsTypeOf(Turn!RespRef)){
			if(referencedEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
				thisModule.addPred(thisModule.tUCMmap.getNode(referencedEnd.name), thisModule.tUCMmap.allRespDefsMatching(currentNode.name) -> collect(s|s.succ) -> flatten() -> select(s|s.target.oclIsUndefined()));
			}
			else if (referencedEnd.oclIsTypeOf(Turn!OrFork)){
				thisModule.addPred(thisModule.orForkMap.get(referencedEnd), thisModule.getResponsibility(currentNode.name).respRefs -> any(r|r.diagram.name = thisModule.tUCMmap.name).succ);
			}
			else if (referencedEnd.oclIsTypeOf(Turn!AndFork)){
				thisModule.addPred(thisModule.andForkMap.get(referencedEnd), thisModule.getResponsibility(currentNode.name).respRefs -> any(r|r.diagram.name = thisModule.tUCMmap.name).succ);
			}
			else if (referencedEnd.oclIsTypeOf(Turn!RespRef)){
				thisModule.addPred(thisModule.tUCMmap.anyRespDefMatching(referencedEnd.name), thisModule.tUCMmap.allRespDefsMatching(currentNode.name) -> collect(s|s.succ) -> flatten() -> select(s|s.target.oclIsUndefined()));
			}
			else{
				thisModule.addPred(thisModule.tUCMmap.getNode(referencedEnd.name), thisModule.tUCMmap.allRespDefsMatching(currentNode.name) -> collect(s|s.succ) -> flatten() -> select(s|s.target.oclIsUndefined()));
			}
		}
		else if(referencedEnd.oclIsTypeOf(Turn!OrFork)){
			thisModule.addPred(thisModule.orForkMap.get(referencedEnd), thisModule.tUCMmap.getNode(currentNode.name).firstUnconnectedSucc());
		}
		else if(referencedEnd.oclIsTypeOf(Turn!AndFork)){
			thisModule.addPred(thisModule.andForkMap.get(referencedEnd), thisModule.tUCMmap.getNode(currentNode.name).firstUnconnectedSucc());
		}
		else if(referencedEnd.oclIsTypeOf(Turn!RespRef)){
			thisModule.addPred(thisModule.resolveTemp(referencedEnd, 'tRespRef'), thisModule.getNodeToConnect(currentNode, true));
		}
		else if(referencedEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
			if(not currentNode.oclIsTypeOf(Turn!Connect)){
				if(thisModule.tUCMmap.getNode(referencedEnd.name).pred -> collect(s|s.source) -> isEmpty()){
					thisModule.addPred(thisModule.tUCMmap.getNode(referencedEnd.name), thisModule.tUCMmap.getNode(currentNode.name).succ);
				}
			}
		}
		else{
			thisModule.addPred(thisModule.tUCMmap.getNode(referencedEnd.name), thisModule.getNodeToConnect(currentNode, false));	
		}	
	}
}

rule handleReferencedStubs(pathbody: Sequence(Turn!Pathbody), currentNode: Turn!PathNode){
	using{
		vNextNode : Turn!PathNode = OclUndefined;	
	}
	do{
		if(currentNode.oclIsTypeOf(Turn!RespRef)){
			if(thisModule.tUCMmap.getNode(pathbody.referencedStub.name).pred -> size() >= pathbody.index){
				vNextNode <- thisModule.tUCMmap.anyRespDefMatching(currentNode.name).succ;
			}
			else{
				vNextNode <- thisModule.tUCMmap.allRespDefsMatching(currentNode.name) -> collect(s|s.succ) -> flatten() -> select(s|s.target.oclIsUndefined());
			}
		}
		else{
			vNextNode <- thisModule.getNodeToConnect(currentNode, false);
		}
		
		thisModule.processReferencedStub(pathbody, vNextNode);
	}
}

rule connectNodes(pathbody: Sequence(Turn!PathBody), path: Turn!Path, nextNode: Urn!PathNode){
	using{
		vPreviousNode : Turn!PathNode = OclUndefined;
		vLastNode : Turn!PathNode = pathbody.pathNodes -> last();
	}
	do{
		if(not pathbody.pathNodes -> isEmpty()){
			for (currentNode in pathbody.pathNodes){
				if(vPreviousNode.oclIsUndefined()){
					thisModule.handleFirstNode(path, currentNode, nextNode);
				}
				else{
					thisModule.handleNode(pathbody, currentNode, vPreviousNode);
				}
				
				if(currentNode <> vLastNode){
					vPreviousNode <- currentNode;
				}
			}
	
			if(not pathbody.pathEnd.oclIsUndefined()){
				thisModule.handleRegularEnds(pathbody.pathEnd, vLastNode);
			}
			else if(not pathbody.referencedEnd.oclIsUndefined()){
				thisModule.handleReferencedEnds(pathbody.referencedEnd, vLastNode);
			}
			else if(not pathbody.referencedStub.oclIsUndefined()){
				thisModule.handleReferencedStubs(pathbody, vLastNode, vPreviousNode);
			}
		}
	}
}