module ConnectNodes;

create OUT : Urn from IN : Turn;

-- TODO: determine if this name is appropriate
rule processNode(tUCMmap: Urn!UCMmap, pathbody: Sequence(Turn!PathBody), currentNode: Urn!PathNode, previousNode: Urn!PathNode, isTimer: Boolean){
	do{
		--QUESTION: are select(s|s.target = OclUndefined) and any(s|s.target.oclIsUndefined()) equivalent here? i.e., will there only ever be one item with s.target = undefined?
		if(previousNode.oclIsTypeOf(Turn!RespRef)){
			if(isTimer)
				currentNode.pred <- thisModule.resolveTemp(previousNode, 'tRespRef').succ -> select(s|s.target = OclUndefined);
			else
				currentNode.pred <- thisModule.resolveTemp(previousNode, 'tRespRef').succ -> any(s|s.target.oclIsUndefined());
		}
		else if(previousNode.oclIsTypeOf(Turn!WaitingPlace))
			currentNode.pred <- thisModule.resolveTemp(previousNode, 'tWtPlace').succ -> any(s|s.target.oclIsUndefined());
		else if(previousNode.oclIsTypeOf(Turn!FailurePoint))
			currentNode.pred <- thisModule.resolveTemp(previousNode, 'tFailPt').succ -> any(s|s.target.oclIsUndefined());
		else if(not isTimer and previousNode.oclIsTypeOf(Turn!Timer))
			currentNode.pred <- thisModule.timerMap.get(previousNode).succ -> any(s|s.target.oclIsUndefined());
		else if(previousNode.oclIsTypeOf(Turn!Connect)){
			if(previousNode.connectsTo.oclIsTypeOf(Turn!StartPoint)){
				tUCMmap.nodes -> any(n|previousNode.connectsTo.name=n.name).succ <- thisModule.createNodeConns();
				currentNode.pred <- tUCMmap.nodes -> any(s|s.name = previousNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
			}
			else if(previousNode.connectsTo.oclIsTypeOf(Turn!Timer)){
				currentNode.pred <- thisModule.connectMap.get(previousNode).succ -> any(s|s.target.oclIsUndefined()); 
			}
			else 
				currentNode.pred  <- tUCMmap.nodes -> any(n|n.name = previousNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
		}
		else{
			if(isTimer)
				currentNode.pred <- tUCMmap.nodes -> any(n|previousNode.name=n.name).succ -> any(s|s.target.oclIsUndefined());
			else
				currentNode.pred <- tUCMmap.nodes -> any(n|previousNode.name=n.name).succ;
		}
	}
}

-- QUESTION: determine why we look at the first node, i.e., pathbody.pathNodes -> first(), rather than the last
-- TODO: determine how the next connecting node is chosen
-- TODO: determine if this name is appropriate
rule handleConnectNode(tUCMmap: Urn!UCMmap, node: Turn!PathNode, firstNode: Turn!PathNode, nextConnectingNode: Urn!PathNode, path: Turn!Path){
	do{
		thisModule.connect <- thisModule.createConnect(tUCMmap);
				
		thisModule.pred <- '';
		
		if (path.oclIsTypeOf(Turn!OrFork) and firstNode.oclIsTypeOf(Turn!Connect))
			thisModule.pred <- nextConnectingNode.succ -> at(thisModule.counter);
		else
			thisModule.pred <- nextConnectingNode.succ -> any(s|s.target.oclIsUndefined());
		
		
		if(not firstNode.connectsTo.oclIsTypeOf(Turn!Timer)){
			thisModule.emptyPt <- thisModule.createEmptyPt(tUCMmap, OclAny, true);
			thisModule.connect.pred <- thisModule.emptyPt.succ -> at(1);
			
			tUCMmap.nodes -> any(n|n.name = firstNode.connectsTo.name).pred <- thisModule.connect.succ;
			--QUESTION: does the statement below overwrite what the statement above did? It's assigning a value to the same location
			tUCMmap.nodes -> any(n|n.name = firstNode.connectsTo.name).pred <- thisModule.pred;
		}
		else{
			thisModule.emptyPtTimer <- thisModule.createEmptyPt(tUCMmap, firstNode.connectsTo, true);
			
			thisModule.connect.pred <- thisModule.emptyPtTimer.succ -> at(1);
			
			--this is not handled very elegantly, but improving this is an optimization I will consider later
			if(path.oclIsTypeOf(Turn!AndFork) and (firstNode.oclIsTypeOf(Turn!Connect))){
				if(not thisModule.timerMap.get(firstNode).oclIsUndefined()){
					thisModule.timerMap.get(firstNode.connectsTo).pred <- thisModule.connect.succ;
				}
			}
			else if(node.oclIsTypeOf(Turn!Connect)){
				thisModule.timerMap.get(firstNode.connectsTo).pred <- thisModule.connect.succ;
			}
			thisModule.emptyPtTimer.pred <- thisModule.pred;
		}
		thisModule.connectMap <- thisModule.connectMap.including(node,thisModule.connect);
	}
}

rule connectNodes(pathbody: Sequence(Turn!PathBody), path: Turn!Path, tUCMmap: Urn!UCMmap, nextNode: Urn!PathNode){
	do{ 
		thisModule.nodeCounter <- 1;
		thisModule.firstPathNode <- pathbody.pathNodes -> first();
		thisModule.currentPathNode <- '';
		
		for (node in pathbody.pathNodes){
			thisModule.currentPathNode <- pathbody.pathNodes -> at(thisModule.nodeCounter);
			
			if(thisModule.nodeCounter = 1){
				if(path.oclIsTypeOf(Turn!Path)){
					thisModule.startPoint <- tUCMmap.nodes -> any(n|path.startPoint.name=n.name);
					if(node.oclIsTypeOf(Turn!RespRef)){
						thisModule.resolveTemp(node, 'tRespRef').pred <- thisModule.startPoint.succ -> at(thisModule.counter);
					}
					else if(node.oclIsTypeOf(Turn!Connect)) {
						thisModule.handleConnectNode(tUCMmap, node, node, thisModule.startPoint, path);
					}
					else if(node.oclIsTypeOf(Turn!Timer)){
						tUCMmap.nodes <- thisModule.createTimer(node, tUCMmap);
						thisModule.timerMap.get(node).pred <- thisModule.startPoint.succ;
					} --with an else
					else if(node.oclIsTypeOf(Turn!WaitingPlace)){
						if(not node.connect.oclIsUndefined() and tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> size() <> 0)
							tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> any(ept|ept.succ -> includes(thisModule.connectMap.get(node.connect).pred -> first())).pred <- thisModule.startPoint.succ;
						else
							thisModule.resolveTemp(node, 'tWtPlace').pred <- thisModule.startPoint.succ;
					}
					else if(node.oclIsTypeOf(Turn!FailurePoint)){
						thisModule.resolveTemp(node, 'tFailPt').pred <- thisModule.startPoint.succ;
					}
					else{
						tUCMmap.nodes -> any(n|n.name=node.turnGetLongestName()).pred <- thisModule.startPoint.succ;
					}
				}
				else if(path.oclIsTypeOf(Turn!OrFork)){
					-- TODO: move this logic up a level into the methods that assign nextNode a value
					if(not nextNode.oclIsUndefined()){
						if(nextNode <> ''){
							thisModule.nextConnectingNode <- nextNode;
						}
					}
					else
						thisModule.nextConnectingNode <- thisModule.orForkMap.get(path);
					
					if(thisModule.firstPathNode.oclIsTypeOf(Turn!RespRef)){
						thisModule.resolveTemp(thisModule.firstPathNode ,'tRespRef').pred <- thisModule.nextConnectingNode.succ -> any(s|s.target.oclIsUndefined());
					}
					else if(thisModule.firstPathNode.oclIsTypeOf(Turn!Connect)){
						-- look for asynchronous connect (QUESTION: what does this mean?)
						thisModule.handleConnectNode(tUCMmap, node, thisModule.firstPathNode, thisModule.nextConnectingNode, path);
					}
					else{
						if(thisModule.firstPathNode.oclIsTypeOf(Turn!Timer)){
							thisModule.nodeCollector <- thisModule.nodeCollector -> union(thisModule.createTimer(thisModule.firstPathNode, tUCMmap));
						}
						tUCMmap.nodes -> any(n|n.name = thisModule.firstPathNode.name).pred <- thisModule.nextConnectingNode.succ -> any(s|s.target.oclIsUndefined());
					}
					--ADDED FOR TIMER AND ORFORK CONNECTION
					if(node.oclIsTypeOf(Turn!Timer)){
						tUCMmap.nodes -> any(n|n.name=node.name).pred <- thisModule.orForkMap.get(path).succ -> at(thisModule.counter);
					}
				}
				else if (path.oclIsTypeOf(Urn!OrJoin)){
					if(node.oclIsTypeOf(Turn!RespRef)){
						if(Urn!Responsibility.allInstances() -> any(n|node.name=n.name).respRefs -> select(r|r.diagram.name = tUCMmap.name) -> size() = 0){
							Urn!Responsibility.allInstances() -> any(n|node.name=n.name).respRefs -> any(r|r.diagram.name = tUCMmap.name).pred <-  	tUCMmap.nodes -> any(n|path.name=n.name).succ ;
						}
					}
					else{
						tUCMmap.nodes -> any(n|n.name=node.name).pred <- tUCMmap.nodes -> any(n|path.name=n.name).succ -> at(1);
					}
				}
				else if(path.oclIsTypeOf(Turn!AndFork)){
					if(not nextNode.oclIsUndefined()){
						if(nextNode <> ''){
							thisModule.nextConnectingNode <- nextNode;
						}
					}
					else{
						thisModule.nextConnectingNode <- thisModule.andForkMap.get(path);
					}
					
					if(thisModule.firstPathNode.oclIsTypeOf(Turn!RespRef)){
						thisModule.resolveTemp(thisModule.firstPathNode,'tRespRef').pred <- thisModule.nextConnectingNode.succ -> any(s|s.target.oclIsUndefined());
					}
					else if(thisModule.firstPathNode.oclIsTypeOf(Turn!Connect)){ 
						-- look for asynchronous connect
						thisModule.handleConnectNode(tUCMmap, node, thisModule.firstPathNode, thisModule.nextConnectingNode, path);
					}
					else {
						if(thisModule.firstPathNode.oclIsTypeOf(Turn!Timer)){ 
							thisModule.nodeCollector <- thisModule.nodeCollector -> union(thisModule.createTimer(thisModule.firstPathNode, tUCMmap));
						}
						tUCMmap.nodes -> any(n|n.name = thisModule.firstPathNode.name).pred <- thisModule.nextConnectingNode.succ -> any(s|s.target.oclIsUndefined());
					}
					--ADDED FOR TIMER AND ORFORK CONNECTION
					if(node.oclIsTypeOf(Turn!Timer)){ 
						tUCMmap.nodes -> any(n|n.name=node.name).pred <- thisModule.andForkMap.get(path).succ -> at(thisModule.counter);
					}
				}
				else if(node.oclIsTypeOf(Turn!RespRef)){
					thisModule.resolveTemp(node, 'tRespRef').pred <- thisModule.stubMap.get(path).succ -> at(1);
				} 
				else if(node.oclIsTypeOf(Turn!Timer)){
					tUCMmap.nodes <- thisModule.createTimer(node, tUCMmap);
					thisModule.timerMap.get(node).pred <- tUCMmap.nodes -> any(n|path.name=n.name).succ -> at(1);
				}
				else if(node.oclIsTypeOf(Turn!Connect)){ 
					-- look for asynchronous connect
					thisModule.handleConnectNode(tUCMmap, node, thisModule.firstPathNode, thisModule.stubMap.get(path), path);
				}
				else if(node.oclIsTypeOf(Turn!WaitingPlace)){
					--QUESTION: why do we look for terms that match "any(s|s.target.oclIsUndefined())"
					thisModule.resolveTemp(node, 'tWtPlace').pred <- thisModule.stubMap.get(path).succ -> any(s|s.target.oclIsUndefined());
				}
				else if(node.oclIsTypeOf(Turn!FailurePoint)){
					thisModule.resolveTemp(node, 'tFailPt').pred <- thisModule.stubMap.get(path).succ -> any(s|s.target.oclIsUndefined());
				}
				else{
					tUCMmap.nodes -> any(n|n.name=node.name).pred <- tUCMmap.nodes -> any(n|path.name=n.name).succ -> at(1);
				}
			}
			else{ 
				thisModule.previousNode <- pathbody.pathNodes -> at(thisModule.nodeCounter-1);
				
				if(node.oclIsTypeOf(Turn!RespRef)){
					thisModule.processNode(tUCMmap, pathbody, thisModule.resolveTemp(node, 'tRespRef'), thisModule.previousNode, false);
				}
				--NEED TO CREATE TIMER FOR ALL OTHER COMBINATIONS
				else if(node.oclIsTypeOf(Turn!Timer)){
					tUCMmap.nodes <- thisModule.createTimer(node, tUCMmap);
					thisModule.processNode(tUCMmap, pathbody, thisModule.timerMap.get(node), thisModule.previousNode, true);
				}
				--NEED TO CREATE CONNECT FOR ALL OTHER COMBINATIONS
				else if(node.oclIsTypeOf(Turn!Connect)){
					thisModule.connect <- thisModule.createConnect(tUCMmap); 
					if(not node.connectsTo.oclIsTypeOf(Turn!Timer)){
						thisModule.emptyPt <- thisModule.createEmptyPt(tUCMmap, OclAny, true);
						thisModule.connect.pred <- thisModule.emptyPt.succ -> at(1);
						if(thisModule.previousNode.oclIsTypeOf(Turn!RespRef)){
							tUCMmap.nodes -> any(n|n.name = node.connectsTo.name).pred <- tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!RespRef)) -> select(r|r.respDef.name = thisModule.previousNode.name)-> flatten() -> any(s|s.pred <> OclUndefined).succ;
						}
						else if(thisModule.previousNode.oclIsTypeOf(Turn!Connect)){
							tUCMmap.nodes -> any(n|n.name = node.connectsTo.name).pred <-  tUCMmap.nodes -> any(n|n.name = thisModule.previousNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
						}
						else{
							tUCMmap.nodes -> any(n|n.name = node.connectsTo.name).pred <-  tUCMmap.nodes -> any(n|thisModule.previousNode.name=n.name).succ;
						}
						--QUESTION: does the statement below overwrite what the if statements above did? It's assigning a value to the same location
						tUCMmap.nodes -> any(n|n.name = node.connectsTo.name).pred <- thisModule.connect.succ;
					}
					else{
						thisModule.emptyPtTimer <- thisModule.createEmptyPt(tUCMmap, node.connectsTo, true);
						thisModule.connect.pred <- thisModule.emptyPtTimer.succ -> at(1);
						thisModule.timerMap.get(thisModule.firstPathNode.connectsTo).pred <- thisModule.connect.succ;
						
						if(thisModule.previousNode.oclIsTypeOf(Turn!RespRef))
							thisModule.emptyPtTimer.pred <- tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!RespRef)) -> select(r|r.respDef.name = thisModule.previousNode.name)-> flatten() -> any(s|s.pred <> OclUndefined).succ;
						else if(thisModule.previousNode.oclIsTypeOf(Turn!Connect))
							thisModule.emptyPtTimer.pred <-  tUCMmap.nodes -> any(n|n.name = thisModule.previousNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined()); 
						else
							thisModule.emptyPtTimer.pred <- tUCMmap.nodes -> any(n|thisModule.previousNode.name=n.name).succ; 
					}
					
					thisModule.connectMap <- thisModule.connectMap -> including(node,thisModule.connect);
				}
				else if(node.oclIsTypeOf(Turn!WaitingPlace)){
					thisModule.processNode(tUCMmap, pathbody, thisModule.resolveTemp(node, 'tWtPlace'), thisModule.previousNode, false);
				}
				else if(node.oclIsTypeOf(Turn!FailurePoint)){
					thisModule.processNode(tUCMmap, pathbody, thisModule.resolveTemp(node, 'tFailPt'), thisModule.previousNode, false);
				}
				-- DOUBLE CHECK IF THIS IS REQUIRED
				else if(thisModule.previousNode.oclIsTypeOf(Turn!RespRef)){
					tUCMmap.nodes -> any(n|n.name = node.name).pred <- tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!RespRef)) -> select(r|r.respDef.name = thisModule.previousNode.name)-> flatten() -> collect(s|s.succ) -> flatten() -> select(s|s.target = OclUndefined);
				}
				else if (thisModule.previousNode.oclIsTypeOf(Turn!Connect)){
					if(thisModule.previousNode.connectsTo.oclIsTypeOf(Turn!StartPoint)){
						tUCMmap.nodes -> any(n|thisModule.previousNode.connectsTo.name=n.name).succ <- thisModule.createNodeConns();
						tUCMmap.nodes -> any(n|n.name = node.name).pred <- tUCMmap.nodes -> any(s|s.name = thisModule.previousNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
					}
					else if(thisModule.previousNode.connectsTo.oclIsTypeOf(Turn!Timer)){
						tUCMmap.nodes -> any(n|n.name = node.name).pred <- thisModule.connectMap.get(thisModule.previousNode).succ -> any(s|s.target.oclIsUndefined()); 
					}
					else{ 
						tUCMmap.nodes -> any(n|n.name = node.name).pred <- tUCMmap.nodes -> any(n|n.name = thisModule.previousNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
					}
				}
				else{
					tUCMmap.nodes -> any(n|n.name = node.name).pred  <- tUCMmap.nodes -> any(n|thisModule.previousNode.name=n.name).succ;
				}
			}
			--regular ends
			if(thisModule.nodeCounter = pathbody.pathNodes -> size() and not pathbody.pathEnd.oclIsUndefined()){
				if(thisModule.currentPathNode.oclIsTypeOf(Turn!RespRef)){
					if(pathbody.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
						if(thisModule.currentPathNode.oclIsTypeOf(Turn!Connect)){
							tUCMmap.nodes -> any(n|pathbody.pathEnd.regularEnd.name=n.name).pred <- tUCMmap.nodes -> any(n|n.name = thisModule.currentPathNode.connectsTo.name).succ ;
						}
						else{
							tUCMmap.nodes -> any(n|pathbody.pathEnd.regularEnd.name=n.name).pred <-  thisModule.resolveTemp(thisModule.currentPathNode ,'tRespRef').succ -> any(s|s.target = OclUndefined);
						}
					}
					else if (pathbody.pathEnd.oclIsTypeOf(Turn!OrFork)){
						thisModule.orForkMap.get(pathbody.pathEnd).pred <- thisModule.resolveTemp(thisModule.currentPathNode ,'tRespRef').succ -> any(s|s.target = OclUndefined);
					}
					else if (pathbody.pathEnd.oclIsTypeOf(Turn!AndFork)){
						thisModule.andForkMap.get(pathbody.pathEnd).pred <- thisModule.resolveTemp(thisModule.currentPathNode ,'tRespRef').succ -> any(s|s.target = OclUndefined);
					}
					else if (pathbody.pathEnd.oclIsTypeOf(Turn!Stub)){
						thisModule.stubMap.get(pathbody.pathEnd).pred <- thisModule.resolveTemp(thisModule.currentPathNode ,'tRespRef').succ -> any(s|s.target = OclUndefined);
					}
				}
				else if(pathbody.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
					thisModule.newPred <- ''; --TODO: determine a proper name for this
					if(not thisModule.currentPathNode.oclIsTypeOf(Turn!Connect)){
						if(thisModule.currentPathNode.oclIsTypeOf(Turn!WaitingPlace)){
							if(not thisModule.currentPathNode.connect.oclIsUndefined() and not tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> isEmpty()){
								thisModule.newPred <- tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!EmptyPoint)) -> any(ept|ept.succ -> includes(thisModule.connectMap.get(thisModule.currentPathNode.connect).pred -> first())).succ -> any(s|s.target.oclIsUndefined());
							}
							else{
								thisModule.newPred <- thisModule.resolveTemp(thisModule.currentPathNode, 'tWtPlace').succ -> any(s|s.target.oclIsUndefined());
							}
						}
						else if(thisModule.currentPathNode.oclIsTypeOf(Turn!WaitingPlace)){
							thisModule.newPred <- thisModule.resolveTemp(thisModule.currentPathNode, 'tWtPlace').succ -> any(s|s.target.oclIsUndefined());
						}
						else if(thisModule.currentPathNode.oclIsTypeOf(Turn!FailurePoint)){
							thisModule.newPred <- thisModule.resolveTemp(thisModule.currentPathNode, 'tFailPt').succ -> any(s|s.target.oclIsUndefined());
						}
						else if(thisModule.currentPathNode.oclIsTypeOf(Turn!Timer)){
							thisModule.newPred <- thisModule.timerMap.get(thisModule.currentPathNode).succ-> any(s|s.target.oclIsUndefined());
						}
						else{
							thisModule.newPred <- tUCMmap.nodes -> any(n|n.name = thisModule.currentPathNode.name).succ -> any(s|s.target.oclIsUndefined());
						}
						tUCMmap.nodes -> any(n|pathbody.pathEnd.regularEnd.name=n.name).pred <- thisModule.newPred;
					}
					--in case of a connect
					else if(thisModule.currentPathNode.connectsTo.oclIsTypeOf(Turn!StartPoint)){
						tUCMmap.nodes -> any(n|thisModule.currentPathNode.connectsTo.name=n.name).succ <- thisModule.createNodeConns();
						tUCMmap.nodes -> any(n|pathbody.pathEnd.regularEnd.name=n.name).pred <- tUCMmap.nodes -> any(s|s.name = thisModule.currentPathNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
					}
					else if(thisModule.currentPathNode.connectsTo.oclIsTypeOf(Turn!Timer)){
						tUCMmap.nodes -> any(n|pathbody.pathEnd.regularEnd.name=n.name).pred <- thisModule.connectMap.get(thisModule.currentPathNode).succ -> any(s|s.target.oclIsUndefined()); 
					}
					else{
						tUCMmap.nodes -> any(n|pathbody.pathEnd.regularEnd.name=n.name).pred <- tUCMmap.nodes -> any(n|n.name = thisModule.currentPathNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
					}
					
				}
				else if(pathbody.pathEnd.oclIsTypeOf(Turn!OrFork)){
					if(thisModule.currentPathNode.oclIsTypeOf(Turn!Connect)){
						--ADD CODE FOR ALL TYPES OF CONNECTS
						if(thisModule.currentPathNode.connectsTo.oclIsTypeOf(Turn!WaitingPlace)){
							thisModule.orForkMap.get(pathbody.pathEnd).pred <- tUCMmap.nodes -> any(s|s.name = thisModule.currentPathNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
						}
					}
					else{
						thisModule.orForkMap.get(pathbody.pathEnd).pred <- tUCMmap.nodes -> any(n|n.name=thisModule.currentPathNode.name).succ -> any(s|s.target.oclIsUndefined());
					}
				}
				else if(pathbody.pathEnd.oclIsTypeOf(Turn!AndFork)){
					if(thisModule.currentPathNode.oclIsTypeOf(Turn!Connect)){
						--ADD CODE FOR ALL TYPES OF CONNECTS
						if(thisModule.currentPathNode.connectsTo.oclIsTypeOf(Turn!WaitingPlace)){
							thisModule.andForkMap.get(pathbody.pathEnd).pred <- tUCMmap.nodes -> any(s|s.name = thisModule.currentPathNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
						}
					}
					else{
						thisModule.andForkMap.get(pathbody.pathEnd).pred <- tUCMmap.nodes -> any(n|n.name=thisModule.currentPathNode.name).succ -> any(s|s.target.oclIsUndefined());
					}
				}
				else if(pathbody.pathEnd.oclIsTypeOf(Turn!Stub)){
					if(thisModule.currentPathNode.oclIsTypeOf(Turn!Timer)){
						thisModule.stubMap.get(pathbody.pathEnd).pred <- thisModule.timerMap.get(thisModule.currentPathNode).succ -> any(s|s.target.oclIsUndefined());
					}
					else if(thisModule.currentPathNode.oclIsTypeOf(Turn!Stub)){
						thisModule.stubMap.get(pathbody.pathEnd).pred <- thisModule.stubMap.get(thisModule.currentPathNode).succ -> any(s|s.target.oclIsUndefined());
					}
					else if(thisModule.currentPathNode.oclIsTypeOf(Turn!Connect)){
						--ADD CODE FOR ALL TYPES OF CONNECTS
						if(thisModule.currentPathNode.connectsTo.oclIsTypeOf(Turn!WaitingPlace)){
							thisModule.stubMap.get(pathbody.pathEnd).pred <- tUCMmap.nodes -> any(s|s.name = thisModule.currentPathNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
						}
					}
					else{
						thisModule.stubMap.get(pathbody.pathEnd).pred <- tUCMmap.nodes -> any(n|n.name=thisModule.currentPathNode.name).succ -> any(s|s.target.oclIsUndefined());
					}
				}
			}
			--referenced ends
			else if(thisModule.nodeCounter = pathbody.pathNodes -> size() and not pathbody.referencedEnd.oclIsUndefined()){
				if(thisModule.currentPathNode.oclIsTypeOf(Turn!RespRef)){
					if(pathbody.referencedEnd.oclIsTypeOf(Turn!EndpointWithConnect))
						tUCMmap.nodes -> any(n|pathbody.referencedEnd.name=n.name).pred <-  tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!RespRef)) -> select(r|r.respDef.name = thisModule.currentPathNode.name)-> flatten() -> collect(s|s.succ) -> flatten() -> select(s|s.target = OclUndefined);
					else if (pathbody.referencedEnd.oclIsTypeOf(Turn!OrFork))
						thisModule.orForkMap.get(pathbody.pathEnd).pred <- Urn!Responsibility.allInstances() -> any(n|n.name=thisModule.currentPathNode.name).respRefs -> any(r|r.diagram.name = tUCMmap.name).succ;
					else if (pathbody.referencedEnd.oclIsTypeOf(Turn!AndFork))
						thisModule.andForkMap.get(pathbody.pathEnd).pred <- Urn!Responsibility.allInstances() -> any(n|n.name=thisModule.currentPathNode.name).respRefs -> any(r|r.diagram.name = tUCMmap.name).succ;
					else if (pathbody.referencedEnd.oclIsTypeOf(Turn!RespRef))
						tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!RespRef)) -> any(r|r.respDef.name =  pathbody.referencedEnd.name).pred <-  tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!RespRef)) -> select(r|r.respDef.name = thisModule.currentPathNode.name)-> flatten() -> collect(s|s.succ) -> flatten() -> select(s|s.target = OclUndefined);
					else 
						tUCMmap.nodes -> any(n|pathbody.referencedEnd.name=n.name).pred <-  tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!RespRef)) -> select(r|r.respDef.name = thisModule.currentPathNode.name)-> flatten() -> collect(s|s.succ) -> flatten() -> select(s|s.target = OclUndefined);
				}
				else if(pathbody.referencedEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
					if(not thisModule.currentPathNode.oclIsTypeOf(Turn!Connect)){
						if(tUCMmap.nodes -> any(n|pathbody.referencedEnd.name=n.name).pred -> collect(s|s.source) -> isEmpty()){
							tUCMmap.nodes -> any(n|pathbody.referencedEnd.name=n.name).pred <- tUCMmap.nodes -> any(n|n.name=thisModule.currentPathNode.name).succ;
						}
					}
				}
				else if(pathbody.referencedEnd.oclIsTypeOf(Turn!OrFork)){
					thisModule.orForkMap.get(pathbody.referencedEnd).pred <- tUCMmap.nodes -> any(n|n.name=thisModule.currentPathNode.name).succ -> any(s|s.target.oclIsUndefined());
				}
				else if(pathbody.referencedEnd.oclIsTypeOf(Turn!AndFork)){
					thisModule.andForkMap.get(pathbody.referencedEnd).pred <- tUCMmap.nodes -> any(n|n.name=thisModule.currentPathNode.name).succ -> any(s|s.target.oclIsUndefined());
				}
				else if(pathbody.referencedEnd.oclIsTypeOf(Turn!RespRef)){
					if(thisModule.currentPathNode.oclIsTypeOf(Turn!Connect)){
						--ADD CODE FOR ALL TYPES OF CONNECTS
						if(thisModule.currentPathNode.connectsTo.oclIsTypeOf(Turn!WaitingPlace)){
							thisModule.resolveTemp(pathbody.referencedEnd,'tRespRef').pred  <- tUCMmap.nodes -> any(s|s.name = thisModule.currentPathNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
						}
					}
					else{
						thisModule.resolveTemp(pathbody.referencedEnd,'tRespRef').pred <- tUCMmap.nodes -> any(n|n.name=thisModule.currentPathNode.name).succ -> any(s|s.target.oclIsUndefined());
					}
				}
				else if(thisModule.currentPathNode.oclIsTypeOf(Turn!Connect)){ --ADD CODE FOR ALL TYPES OF CONNECTS
					if(thisModule.currentPathNode.connectsTo.oclIsTypeOf(Turn!WaitingPlace)){
						tUCMmap.nodes -> any(n|pathbody.referencedEnd.name=n.name).pred  <- tUCMmap.nodes -> any(s|s.name = thisModule.currentPathNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
					}
				}
				else{
					tUCMmap.nodes -> any(n|pathbody.referencedEnd.name=n.name).pred <- tUCMmap.nodes -> any(n|n.name=thisModule.currentPathNode.name).succ;
				}
			}
			else if(thisModule.nodeCounter = pathbody.pathNodes -> size() and (not pathbody.referencedStub.oclIsUndefined())){
				if(thisModule.currentPathNode.oclIsTypeOf(Turn!RespRef)){
					if(tUCMmap.nodes -> any(n|pathbody.referencedStub.name=n.name).pred -> size() >= pathbody.index){
						thisModule.firstPred <-  tUCMmap.nodes -> any(n|pathbody.referencedStub.name=n.name).pred -> first().source;
						thisModule.oj <- thisModule.createOrJoin(tUCMmap);
						thisModule.oj.pred <-tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!RespRef)) -> any(r|r.respDef.name =  thisModule.currentPathNode.name).succ;
						thisModule.oj.pred <- thisModule.firstPred.succ;
						tUCMmap.nodes -> any(n|pathbody.referencedStub.name=n.name).pred <- thisModule.oj.succ;
					}
					else{
						tUCMmap.nodes -> any(n|pathbody.referencedStub.name=n.name).pred <-  tUCMmap.nodes -> select(n|n.oclIsTypeOf(Urn!RespRef)) -> select(r|r.respDef.name = thisModule.currentPathNode.name)-> flatten() -> collect(s|s.succ) -> flatten() -> select(s|s.target = OclUndefined);
					}
				}
				else if(tUCMmap.nodes -> any(n|pathbody.referencedStub.name=n.name).pred -> size() >= pathbody.index){
					thisModule.firstPred <-  tUCMmap.nodes -> any(n|pathbody.referencedStub.name=n.name).pred -> first().source;
					thisModule.oj <- thisModule.createOrJoin(tUCMmap);
					if(thisModule.currentPathNode.oclIsTypeOf(Turn!Connect)){ --ADD CODE FOR ALL TYPES OF CONNECTS
						if(thisModule.currentPathNode.connectsTo.oclIsTypeOf(Turn!WaitingPlace)){
							thisModule.oj.pred  <- tUCMmap.nodes -> any(s|s.name = thisModule.currentPathNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
						}
					}
					else{
						thisModule.oj.pred <- tUCMmap.nodes -> any(n|n.name =  thisModule.currentPathNode.name).succ;
					}
					thisModule.oj.pred <- thisModule.firstPred.succ;
					tUCMmap.nodes -> any(n|pathbody.referencedStub.name=n.name).pred <- thisModule.oj.succ;
				}
				else if(thisModule.currentPathNode.oclIsTypeOf(Turn!Connect)){ --ADD CODE FOR ALL TYPES OF CONNECTS
					if(thisModule.currentPathNode.connectsTo.oclIsTypeOf(Turn!WaitingPlace)){
						tUCMmap.nodes -> any(n|pathbody.referencedStub.name=n.name).pred  <- tUCMmap.nodes -> any(s|s.name = thisModule.currentPathNode.connectsTo.name).succ -> any(s|s.target.oclIsUndefined());
					}
				}
				else{	
					tUCMmap.nodes -> any(n|pathbody.referencedStub.name=n.name).pred <- tUCMmap.nodes -> any(n|n.name = thisModule.currentPathNode.name).succ;
				}
			}
			thisModule.nodeCounter <- thisModule.nodeCounter.inc();
		}
	}
		
}