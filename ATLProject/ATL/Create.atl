module Create;

create OUT : Urn from IN : Turn;

-- Contains initializers and all rules used to instantiate model items in other parts
-- of the code. This is a good place to look for potential improvements as it may be
-- possible to make some of these into matched rules (either now, if I have missed
-- something, or in future versions of ATL).

-- Contents:
--	 1/3 INITIALIZeRS
--	 2/3 CONDITIONAL INSTANTIATORS
--	 3/3 INSTANTIATORS

--------------1/3 INITIALIZERS-------------

rule initBinding(sBinding: Turn!Binding, tBinding: Urn!Binding){
	using{
		sBoundTerm : Turn!Binding =
			if(sBinding.bindings.isDefined()) then
				sBinding.bindings
			else
				sBinding.binding
			endif;
		tStub : Urn!Stub = 
			if(sBoundTerm.stubParam.stub.isDefined()) then
				thisModule.retrieveNode(sBoundTerm.stubParam.stub)
			else
				thisModule.retrieveNode(sBoundTerm.stubParam.stubDec.stub)
			endif;	
	}
	do{
		if(sBinding.oclIsTypeOf(Turn!InBinding)){
			tBinding.stubEntry <- tStub.pred -> at(sBinding.index);
			tBinding.startPoint <- thisModule.resolveTemp(sBinding.mapStart, 'tStartPoint');
		}
		else if(sBinding.oclIsTypeOf(Turn!OutBinding)){
			tBinding.stubExit <- tStub.succ -> at(sBinding.index);
			tBinding.endPoint <- thisModule.retrieveNode(sBinding.mapEnd);
		}
	}
}

rule initComponentRef(sComponentRef: Turn!ComponentRef, tComponentRef: Urn!ComponentRef){
	do{
		if(sComponentRef.kind.isDefined() and sComponentRef.kind.toString() <> 'parent'){
			tComponentRef.contDef.kind <- sComponentRef.kind.toString().capitalize();
		}
		else if(sComponentRef.kind.toString() <> 'parent'){
			tComponentRef.contDef.kind <- 'Team';
		}
		
		if(sComponentRef.boundTo.isDefined()){
			if(sComponentRef.boundTo.comp.isDefined()){
				tComponentRef.parent <- Urn!Component.allInstances() -> any(n|sComponentRef.boundTo.comp.name=n.name).contRefs -> any(r|r.diagram = sComponentRef.map);
			}
			else{
				tComponentRef.parent <- Urn!Component.allInstances() -> any(n|sComponentRef.boundTo.comp2.name=n.name).contRefs -> any(r|r.diagram = sComponentRef.map);
			}
		}
		
		tComponentRef.contDef.protected <- sComponentRef.protected;
	}
}

rule initEndPointUsingEndpointWithConnect(tEndPoint: Urn!EndPoint, sEndpointWithConnect: Turn!EndpointWithConnect){
	using{
		tConnect : Urn!Connect = OclUndefined;	
	}
	do{
		tEndPoint.name <- sEndpointWithConnect.regularEnd.turnGetLongestName();
		
		if(sEndpointWithConnect.regularEnd.condition.isDefined()){
			tEndPoint.postcondition <- thisModule.createCondition(sEndpointWithConnect.regularEnd.condition.expression.asString());
		}
		
		if(sEndpointWithConnect.connect.isDefined()){
			tConnect <- thisModule.createConnect();
			thisModule.directConnect(thisModule.retrieveNode(sEndpointWithConnect.regularEnd), tConnect);
			thisModule.directConnect(tConnect, thisModule.retrieveNode(sEndpointWithConnect.connect));
		}
	}
}

rule initTimer(sTimer: Turn!Timer){
	using{
		tTimer : Urn!Timer = thisModule.retrieveNode(sTimer);
	}
	do{
		thisModule.tUCMmap.nodes <- thisModule.tUCMmap.nodes.including(tTimer);
		
		if(sTimer.timeoutPath.isDefined()){
			thisModule.connectPathBody(sTimer.timeoutPath, tTimer, OclUndefined);
			
			if(sTimer.timeoutCondition.isDefined()){
				tTimer.succ.last().condition <- thisModule.createCondition(sTimer.timeoutCondition.expression.content.first());
			}
		}
		
		tTimer;
	}
}

----------2/3 CONDITIONAL INSTANTIATORS-----------

rule getOrCreateEndPoint(sEndpointWithConnect: Turn!EndpointWithConnect){
	using{
		tEndPoint : Urn!PathNode = OclUndefined;
	}
	do{
		if(sEndpointWithConnect.oclIsTypeOf(Turn!EndpointWithConnect)){
			if(not sEndpointWithConnect.regularEnd.isDefined()){ -- TODO: this logic seems prone to fault
				tEndPoint <- thisModule.createEndPoint();
				thisModule.endPointMap <- thisModule.endPointMap.including(sEndpointWithConnect.regularEnd, tEndPoint);
			}
			else if(not thisModule.retrieveNode(sEndpointWithConnect.regularEnd).isDefined()){
				tEndPoint <- thisModule.createEndPoint();
				thisModule.initEndPointUsingEndpointWithConnect(tEndPoint, sEndpointWithConnect);
				thisModule.endPointMap <- thisModule.endPointMap.including(sEndpointWithConnect.regularEnd, tEndPoint);
			}
			else{
				tEndPoint <- thisModule.retrieveNode(sEndpointWithConnect.regularEnd);
			}
		}
		
		tEndPoint;
	}
}

rule getOrCreatePathEnd(sPathBody: Turn!PathBody){
	using{
		tPathEnd : Urn!PathNode = OclUndefined;
	}
	do{
		if(sPathBody.pathEnd.isDefined()){
			if(sPathBody.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
				tPathEnd <- thisModule.getOrCreateEndPoint(sPathBody.pathEnd);
			}
			else{
				tPathEnd <- thisModule.retrieveNode(sPathBody.pathEnd);
			}
		}
		else if(sPathBody.referencedEnd.isDefined()){
			tPathEnd <- thisModule.retrieveNode(sPathBody.referencedEnd);
		}
		else if(sPathBody.referencedStub.isDefined()){
			tPathEnd <- thisModule.retrieveNode(sPathBody.referencedStub);
		}
		else{
			--	PathBody has no PathEnd.
		}
		
		tPathEnd;
	}
}

rule getOrCreateReferencedResponsibility(sRespRef: Turn!RespRef){
	using{
		tResponsibility : Urn!Responsibility = OclUndefined;	
	}
	do{
		if(thisModule.getResponsibility(sRespRef.turnGetLongestName()).isDefined()){
			tResponsibility <- thisModule.getResponsibility(sRespRef.turnGetLongestName());
		}
		else{
			tResponsibility <- thisModule.createResponsibility(sRespRef);
		}
		
		tResponsibility;
	}
}

-------------3/3 INSTANTIATORS-------------

rule createAndJoin(){
	to
		tAndJoin: Urn!AndJoin(
			id <- thisModule.nextId().toString(),
			name <- 'AndJoin' + tAndJoin.id,
			diagram <- thisModule.tUCMmap
		)
	do{
		tAndJoin;
	}
}

rule createBeliefLink(sBeliefLink: Turn!ElementLink){
	to
		tBeliefLink: Urn!BeliefLink(
			target <- thisModule.resolveTemp(sBeliefLink.dest, 'tIntentionalElementRef')
		)	
	do{
		tBeliefLink;
	}
}

rule createComponent(sComponent: Turn!ComponentRef){
	to
		tComponent: Urn!Component(
			id <- thisModule.nextId().toString(),
			name <- sComponent.turnGetLongestName()
		)
	do{
		tComponent;	
	}
}

rule createCondition(vSourceExpression: String){
	to
	 	tCondition: Urn!Condition(
	 		expression <- vSourceExpression,
			label <- vSourceExpression
	 	)
	do{
		tCondition;
	}		
}

rule createConnect(){
	to
		tConnect: Urn!Connect(
			id <- thisModule.nextId().toString(),
			name <- 'Connect' + tConnect.id,
			diagram <- thisModule.tUCMmap
		)
	do{
		tConnect;	
	}--
}

rule createEmptyPoint(){
	to
		tEmptyPoint: Urn!EmptyPoint(
			id <- thisModule.nextId().toString(),
			name <- 'EmptyPoint' + tEmptyPoint.id,
			diagram <- thisModule.tUCMmap
		)
	do{
		tEmptyPoint;
	}
}

rule createEndPoint(){
	to
		tEndPoint: Urn!EndPoint(
			id <- thisModule.nextId().toString(),
			name <- 'EndPoint' + tEndPoint.id,
			label <- thisModule.createLabel(),
			diagram <- thisModule.tUCMmap
		)
	do{
		tEndPoint;
	}
}

rule createKPIEvalValueSet(sLinearConversion: Turn!LinearConversion){
	to
		tKpiEvalValueSet: Urn!KPIEvalValueSet(
			unit <- sLinearConversion.unit,
			targetValue <- sLinearConversion.targetValue,
			thresholdValue <- sLinearConversion.thresholdValue,
			worstValue <- sLinearConversion.worstValue
		)
	do{
		tKpiEvalValueSet;
	}
}

rule createLabel(){
	to
		tNodeLabel: Urn!NodeLabel()
	do{
		tNodeLabel;
	}
}

rule createMetadata(vName: String, vValue: String){
	to 
 		tMetadata: Urn!Metadata(
 			name <- vName,
 			value <- vValue 
		)
	do{
	 	tMetadata;
	}
}

rule createNewConnection(tPathNode: Urn!PathNode){
	to
		tNodeConnection: Urn!NodeConnection(
			source <- tPathNode
		)
	do{
		tNodeConnection;	
	}
}

rule createOrJoin(){
	to
		tOrJoin: Urn!OrJoin(
			id <- thisModule.nextId().toString(),
			name <- 'OrJoin' + tOrJoin.id,
			diagram <- thisModule.tUCMmap
		)
	do{
		tOrJoin;
	}
}

rule createQMapKPIEvalValueSet(conv: Turn!QualToQMappings){
	to		
		tQMapKPIEvalValueSet: Urn!KPIEvalValueSet(
			kpiConv <- conv	
		)
	do{
		tQMapKPIEvalValueSet;
	}
}

rule createResponsibility(sResponsibility: Turn!RespRef){
	to
		tResponsibility: Urn!Responsibility(
			id <- thisModule.nextId().toString(),
			name <- sResponsibility.turnGetLongestName()
		)
	do{
		tResponsibility;
	}
}

rule createStartPoint(){
	to
		tNodeLabel: Urn!NodeLabel(),
		tStartPoint: Urn!StartPoint (
			id <- thisModule.nextId().toString(),
			name <- 'StartPoint' + tStartPoint.id,
			label <- tNodeLabel
		)
	do{
		thisModule.tUCMmap.nodes <- thisModule.tUCMmap.nodes.including(tStartPoint);
		tStartPoint;
	}
}