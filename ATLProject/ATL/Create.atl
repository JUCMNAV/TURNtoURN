module Create;

create OUT : Urn from IN : Turn;

-- Contains all rules used to instantiate model items in other parts of the code.
-- This is a good place to look for potential improvements as it may be possible to
-- make some of these into matched rules (either now, if I have missed something),
-- or in future versions of ATL.

------------1/2 RULES WITH DO LOGIC--------------

rule createEmptyPointConnect(currentNode: Turn!PathNode, newPred: Urn!PathNode){
	to
		tNodeConnection1: Urn!NodeConnection(),
		tConnect: Urn!Connect(
			id <- thisModule.nextId().toString(),
			name <- 'Connect' + tConnect.id,
			diagram <- thisModule.tUCMmap,
			succ <- tNodeConnection1,
			pred <- tNodeConnection2
		),
		tNodeConnection2: Urn!NodeConnection(),
		tEmptyPt: Urn!EmptyPoint(
			id <- thisModule.nextId().toString(),
			name <- 'EmptyPoint' + tEmptyPt.id,
			diagram <- thisModule.tUCMmap,
			succ <- tNodeConnection2
		)
	do{
		if(currentNode.connectsTo.oclIsTypeOf(Turn!Timer)){
			tEmptyPt.name <- 'AsynchConnectTimer#' + currentNode.connectsTo.name;
			thisModule.addPred(tEmptyPt, newPred);
		}
		else{
			thisModule.addPred(thisModule.retrieveNode(currentNode.connectsTo), tNodeConnection1);
			thisModule.addPred(thisModule.retrieveNode(currentNode.connectsTo), newPred);
			thisModule.addSucc(tEmptyPt, thisModule.createNodeConnection());
		}
		if(tEmptyPt.id='201'){
			--thisModule.debug(tEmptyPt.pred);	
		}
		thisModule.connectMap <- thisModule.connectMap.including(currentNode, tConnect);
		tNodeConnection1;
	}
}

rule createEmptyPoint(join: Turn!PathNode, newPred: Urn!PathNode){
	to
		tNodeConnection1: Urn!NodeConnection(),
		tEmptyPt: Urn!EmptyPoint(
			id <- thisModule.nextId().toString(),
			name <- 'EmptyPoint' + tEmptyPt.id,
			diagram <- thisModule.tUCMmap,
			succ <- tNodeConnection1
		)
	do{
		thisModule.addPred(join, newPred);
		thisModule.addPred(join, tNodeConnection1);
		tEmptyPt;
	}
}

------------2/2 RULES WITHOUT DO LOGIC-----------
-- or well, where the only "do" logic is a return

rule createAndJoin(){
	to
		tNodeConnection: Urn!NodeConnection(),
		tAndJoin: Urn!AndJoin(
			id <- thisModule.nextId().toString(),
			name <- 'AndJoin' + tAndJoin.id,
			succ <- tNodeConnection,
			diagram <- thisModule.tUCMmap
		)
	do{
		tAndJoin;
	}
}

rule createBeliefLink(s: Turn!ElementLink){
	to
		tBeliefLink: Urn!BeliefLink (
			target <- thisModule.resolveTemp(s.dest, 'tIntElemRef')
		)	
	do{
		tBeliefLink;
	}
}

rule createComponent(s: Turn!ComponentRef){
	to
		tComp: Urn!Component(
			id <- thisModule.nextId().toString(),
			name <- s.turnGetLongestName()
		)
	do{
		tComp;	
	}
}

rule createCondition(sourceExpression: String){
	to
	 	targetCondition: Urn!Condition(
	 		expression <- sourceExpression,
			label <- sourceExpression
	 	)
	do{
		targetCondition;
	}		
}

rule createConnect(){
	to
		tNodeConnection: Urn!NodeConnection(),
		tConnect: Urn!Connect(
			id <- thisModule.nextId().toString(),
			name <- 'Connect' + tConnect.id,
			succ <- tNodeConnection,
			diagram <- thisModule.tUCMmap
		)
	do{
		tConnect;	
	}
}

rule createEndPoint(node : Turn!PathNode){
	to
		tEndPoint: Urn!EndPoint (
			id <- thisModule.nextId().toString(),
			name <- 'EndPoint' + tEndPoint.id,
			label <- thisModule.createLabel(),
			diagram <- thisModule.tUCMmap,
			contRef <- thisModule.getUrnCompRef(node)
		)
	do{
		tEndPoint;
	}
}

rule createKpiEvalValueSet(s: Turn!LinearConversion){
	to
		tKpiEvalValueSet: Urn!KPIEvalValueSet(
			unit <- s.unit,
			targetValue <- s.targetValue,
			thresholdValue <- s.thresholdValue,
			worstValue <- s.worstValue
		)
	do{ 
		tKpiEvalValueSet;
	}
}

rule createLabel(){
	to
		tNodeLabel: Urn!NodeLabel()
	do{
		tNodeLabel;
	}
}

rule createMetadata(name: String, value: String){
	to 
 		targetMetadata: Urn!Metadata(
 			name <- name,
 			value <- value 
		)
	do{
	 	targetMetadata;
	}
}

rule createNodeConnection(){
	to
	 	tNodeConnection: Urn!NodeConnection()
	do{
		tNodeConnection;
	}		
}

rule createOrJoin(){
	to
		tNodeConnection: Urn!NodeConnection(),
		tOrJoin: Urn!OrJoin(
			id <- thisModule.nextId().toString(),
			name <- 'OrJoin' + tOrJoin.id,
			succ <- tNodeConnection,
			diagram <- thisModule.tUCMmap
		)
	do{
		tOrJoin;
	}
}

rule createQMapKpiEvalValueSet(conv: Turn!QualToQMappings){
	to		
		tQMapKpiEvalValueSet: Urn!KPIEvalValueSet(
			kpiConv <- conv	
		)
	do{
		tQMapKpiEvalValueSet;
	}
}

rule createResponsibility(s: Turn!RespRef){
	to
		tResp: Urn!Responsibility(
			id <- thisModule.nextId().toString(),
			name <- s.turnGetLongestName()
		)
	do{
		tResp;
	}
}