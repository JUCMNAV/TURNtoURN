module Turn2Urn;
-- paths to metamodels for content assist
--@path Turn=/ATLProject/Metamodels/Turn.ecore
--@path Urn=/seg.jUCMNav/src/seg/jUCMNav/emf/urn.ecore

create OUT : Urn from IN : Turn;

--This helper initializes the value of id
-- CONTEXT: thisModule
-- RETURN: Integer

uses ConnectNodes;

helper def: id : Integer = 0;

-- This helper creates an increment method for id
-- CONTEXT: Integer
-- RETURN: Integer
helper context Integer def : inc() : Integer = self + 1;

-- This helper checks if metadata already exists for a given parameter
-- CONTEXT: Turn!URNmodelElement
-- RETURN: Boolean
helper context Turn!URNmodelElement def: metadataExists(param : String) : Boolean = 
	self.metadata -> select(m| m.name.indexOf(param) <> -1 ) -> notEmpty();

helper def: nodeCollector : Sequence(OclAny) = Sequence(OclAny) ;

helper def: counter : Integer = 1;

helper def: nodeCounter : Integer = 1;

helper def: orForkMap : Map(Turn!OrFork, Urn!OrFork) = Map{};

helper def: connectMap : Map(Turn!Connect, Urn!Connect) = Map{};

helper def: orForkNodeConnCounter : Integer = 1;

helper def: andForkMap : Map(Turn!OrFork, Urn!OrFork) = Map{};

helper def: endPointMap : Map(Turn!EndPoint, Urn!EndPoint) = Map{};

helper def: timerMap : Map(Turn!Timer, Urn!Timer) = Map{};

helper def: stubMap : Map(Turn!Stub, Urn!Stub) = Map{};

helper def: andForkNodeConnCounter : Integer = 1;

helper context Turn!URNspec def: getActorElements() : Sequence(OclAny) = 
	self.actors -> collect(actor|actor.elems) -> flatten();

-- imperative-method-like rules below
-- (sorry, spirit of declarative programming)

-- method used to initialize an item and assign it a unique id
rule initNextObject(obj: OclAny){
	do{
		thisModule.id <- thisModule.id.inc();
		obj.id <- thisModule.id.toString();
		obj;
	}
}

-- method used to initialize an item and assign it a unique id
-- and then to prepend a 'name' to this id
rule initNextObjectWithName(obj: OclAny, name: String){
	do{
		thisModule.initNextObject(obj);
		obj.name <- name+obj.id;
		obj;
	}
}

-- called rules below

rule createMetadata(name: String, value: String) {
	to 
     targetMetadata: Urn!Metadata(
     	name <- name,
     	value <- value    
     )
	do{
	 	targetMetadata;
	}
}

rule createNodeConns(){
	to
	 	targetNodeConn: Urn!NodeConnection
	do{
		targetNodeConn;	
	}		
}

rule initObjectNameFromObject(targetObject: OclAny, sourceObject: OclAny){
	do{
		--personal TODO: determine why this is "s.longname.longname" rather than merely "s.longname"
		if(not sourceObject.longname.longname.oclIsUndefined()){
			targetObject.name <- sourceObject.longname.longname;
		}
		else{
			targetObject.name <- sourceObject.name;	
		}
	}
}

rule createComponent(s: Turn!ComponentRef){
	to
		tComp: Urn!Component
	do{
		thisModule.initNextObject(tComp);
		thisModule.initObjectNameFromObject(tComp, s);
		tComp;	
	}
}

rule createKpiEvalValueSet(s: Turn!LinearConversion) {
	to
		tkpiEvalValueSet: Urn! KPIEvalValueSet(
			unit <- s.unit,
			targetValue <- s.targetValue,
			thresholdValue <- s.thresholdValue,
			worstValue <- s.worstValue
		)
	do{ 
		tkpiEvalValueSet;
	}
}

rule createQMapKpiEvalValueSet(conv: Turn!QualToQMappings){
	to		
		tkpiEvalValueSet: Urn!KPIEvalValueSet(
			kpiConv <- conv	
		)
	do{ 
		tkpiEvalValueSet;
	}
}

rule createOrJoin(tUCMmap: Urn!UCMmap){
	to
		tOrJoin: Urn!OrJoin(
			succ <- tConn,
			diagram <- tUCMmap
		),
		tConn: Urn!NodeConnection
	do{
		thisModule.initNextObjectWithName(tOrJoin, 'OrJoin');
		tOrJoin;
	}
}

rule createAndJoin(tUCMmap: Urn!UCMmap){
	to
		tAndJoin: Urn!AndJoin(
			succ <- tConn,
			diagram <- tUCMmap
		),
		tConn: Urn!NodeConnection
	do{
		thisModule.initNextObjectWithName(tAndJoin, 'AndJoin');
		tAndJoin;
	}
}

rule createConnect(tUCMmap: Urn!UCMmap){
	to
		tConnect: Urn!Connect(
			succ <- tConn,
			diagram <- tUCMmap
		),
		tConn: Urn!NodeConnection
	do{
		thisModule.initNextObjectWithName(tConnect, 'Connect');
		tConnect;	
	}
}

rule createCondition(sourceExpression: String){
	to
	 	targetCondition: Urn!Condition(
	 		expression <- sourceExpression,
			label <- sourceExpression
	 	)
	do{
		targetCondition;
	}		
}

rule createOrForkNodeConns(ref: Turn!RegularOrFork,  tUCMmap: Urn!UCMmap){
	to
	 	targetNodeConn: Urn!NodeConnection
	do{
		--personal TODO: determine the purpose of this line
		if(ref <> OclAny){
			targetNodeConn.condition <- thisModule.resolveTemp(ref.condition,'tCondition');
		}
		targetNodeConn;	
	}	
}

rule createAndForkNodeConns(ref: Turn!PathBodyNodes,  tUCMmap: Urn!UCMmap){
	to
	 	targetNodeConn: Urn!NodeConnection
	do{
		targetNodeConn;	
	}	
}

--regular rules
rule URNspec2URNspec{
	from 
		sURNspec: Turn!URNspec
	to
		tURNspec: Urn!URNspec(
			name <- sURNspec.name,
			metadata <- sURNspec.metadata,
			grlspec <- tGRLSpec,
			ucmspec <- tUcmspec,
			urnLinks <- sURNspec.urnlinks,
			urndef <- tURNdef
		),
		tURNdef: Urn!URNdefinition(
			specDiagrams <- tGRLSpecDiag,
			specDiagrams <- sURNspec.ucmMaps -> collect(m|thisModule.resolveTemp(m,'tUCMmap')),
			concerns <- sURNspec.concerns
		),
		tGRLSpec: Urn!GRLspec(
			actors <- sURNspec.actors,
			intElements <- sURNspec.getActorElements() -> select(e|e.type.toString() <> 'belief'),
			links <- sURNspec.getActorElements() -> collect(e|e.linksSrc) -> flatten() -> collect(l|thisModule.resolveTemp(l,'tCont')),
			links <- sURNspec.getActorElements() -> collect(e|e.linksSrc) -> flatten() -> collect(l|thisModule.resolveTemp(l,'tDecomp')),
			links <- sURNspec.getActorElements() -> collect(e|e.linksSrc) -> flatten() -> collect(l|thisModule.resolveTemp(l,'tDep')),
			groups <- sURNspec.stratGroups,
			strategies <- sURNspec.strategies,
			contributionGroups <- sURNspec.contribContextGroups,
			contributionContexts <- sURNspec.contribContexts,
			KPIConversion <- sURNspec.indConversions -> select(c|c.oclIsTypeOf(Turn!QualToQMappings))
		),
		tGRLSpecDiag: Urn!GRLGraph(
		  	nodes <- sURNspec.getActorElements() -> collect(e| thisModule.resolveTemp(e, 'tIntElemRef')),
			nodes <- Urn!Belief.allInstances(),
			contRefs <- sURNspec.actors -> collect(a| thisModule.resolveTemp(a, 'tActorRef')),
		    connections <- sURNspec.getActorElements() ->  collect(l|l.linksSrc) -> flatten() -> collect(m| thisModule.resolveTemp(m,'tLinkRef')),  
	    	connections <- sURNspec.getActorElements() ->  collect(m| thisModule.resolveTemp(m,'tBeliefLink')) 
		),
		tUcmspec: Urn!UCMspec
	do{
		if(sURNspec.metadata -> select(m| (m.name.indexOf('TURN-URN') <> -1 and m.name.indexOf('nextGlobalID') <> -1)) -> notEmpty()){
	 		thisModule.id <- sURNspec.metadata -> any(m|m.name = 'TURN-URN-nextGlobalID').value.toInteger();
		}
		
		
		tURNdef.components <- Urn!Component.allInstances();
		tURNdef.responsibilities <- Urn!Responsibility.allInstances();
		
		if (not sURNspec.info.oclIsUndefined()){
			tURNspec.description <- sURNspec.info.description;
			tURNspec.author <- sURNspec.info.author;
			tURNspec.created <- sURNspec.info.created;
			tURNspec.modified <- sURNspec.info.modified;
			tURNspec.specVersion <- sURNspec.info.specVersion;
			tURNspec.urnVersion <- sURNspec.info.urnVersion; 
		}
		
		tURNspec.nextGlobalID <- thisModule.id.toString();
	}
}

rule Metadata2Metadata{
	from 
		sourceMetadata: Turn!Metadata
	to 
		targetMetadata: Urn!Metadata(
			name <- sourceMetadata.name
		)
}

rule Belief2Belief {
	from
		s: Turn!IntentionalElement(
			s.type.toString() = 'belief'
		)
    to 
     	tBelief: Urn!Belief(
     		name <- s.name,
			description <- s.name,
			succ <- tBeliefLink
     	),
		tBeliefLink: Urn!BeliefLink(
			target <- s.linksSrc -> collect(l|l.dest) -> flatten() -> collect(l|thisModule.resolveTemp(l,'tIntElemRef')) -> first()
		)
	 do{
	 	thisModule.initNextObject(tBelief);
	 	tBelief;
	 }
}

rule Actor2Actor{
	from 
		s: Turn!Actor
	to 
		tActor: Urn!Actor (
			importanceQuantitative <- s.importanceQuantitative
		),
		tActorRef: Urn!ActorRef (
			contDef <- tActor,
			nodes <- s.elems -> collect(e|thisModule.resolveTemp(e,'tIntElemRef')),
			nodes <- s.elems -> collect(e|thisModule.resolveTemp(e,'tBelief')),
			label <- tCompLabel
		),
		tCompLabel: Urn!ComponentLabel()
	 do{
	 	thisModule.initNextObject(tActor);
	 	thisModule.initObjectNameFromObject(tActor, s);
	 	
	 	thisModule.initNextObjectWithName(tActorRef, 'ActorRef');
	 }	
}

--Remaining rules: (found in Turn2UrnTemporarilyRemovedCode.txt)

--rule IntElements2IntElements
--rule Contribution2Contribution
--rule Decomposition2Decomposition
--rule Dependency2Dependency
--rule Strategies2Strategies
--rule StrategiesGroup2StrategiesGroup
--rule Evaluation2Evaluation
--rule ContributionContext2ContributionContext
--rule ContributionChange2ContributionChange
--rule ContributionContextGroup2ContributionContextGroup
--rule QMappings2QMappings
--rule QMapping2QMapping
--rule Concern2Concern
--rule URNlink2URNlink
--rule Component2Component
--rule Responsibility2Responsibility
--rule createResponsibility(s: Turn!RespRef)
--rule WaitingPlace2WaitingPlace
--rule FailurePoint2FailurePoint
--rule StartPoint2StartPoint
--rule createOrFork(obj:Turn!OrFork, tUCMmap: Urn!UCMmap)
--rule connectOrForkEndPoints(obj: Turn!OrFork, nextNode: Urn!PathNode, tUCMmap: Urn!UCMmap, expression: String)
--rule createLabel()
--rule createTimer(timerObj: Turn!Timer, tUCMmap: Urn!UCMmap)
--rule createAndFork(obj:Turn!AndFork, tUCMmap: Urn!UCMmap)
--rule createStub(stubObj:Turn!Stub, tUCMmap: Urn!UCMmap)
--rule Condition2Condition
--rule createEndPoint(ep: Turn!EndPoint, tUCMmap: Urn!UCMmap)
--rule backLinksToOrFork(ep: Turn!EndPoint, tEndPoint: Urn!EndPoint)
--rule OrJoin2OrJoin
--rule AndJoin2AndJoin
--rule UCMmap2UCMmap
--rule connectOrForkNodes(pathend : Turn!PathEnd, tUCMmap: Urn!UCMmap)
--rule connectAndForkNodes(pathend : Turn!PathEnd, tUCMmap: Urn!UCMmap)
--rule createEmptyPt(tUCMmap: Urn!UCMmap, node: Turn!PathBodyNode, asynch: Boolean)
--rule connectTimerNodes(timerObj:Turn!Timer, tUCMmap:Urn!UCMmap)
--rule createStubOutNodes(stubObj:Turn!Stub, tUCMmap:Urn!UCMmap)
--rule PluginBinding2PluginBinding
--rule InBinding2InBinding
--rule OutBinding2OutBinding
