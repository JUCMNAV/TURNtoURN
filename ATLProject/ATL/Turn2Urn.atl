module Turn2Urn;
-- paths to metamodels for content assist
--@path Turn=/ATLProject/Metamodels/Turn.ecore
--@path Urn=/seg.jUCMNav/src/seg/jUCMNav/emf/urn.ecore

create OUT : Urn from IN : Turn;

uses Connect;
uses Create;

-- Contents:
--	 1/5 GLOBAL VARIABLES
--	 2/5 HELPERS
--	 3/5 CALLED RULES
--	 4/5 MATCHED RULES WITHOUT DO BLOCKS
--	 5/5 MATCHED RULES WITH DO BLOCKS

-------------1/5 GLOBAL VARIABLES-------------

helper def: id : Integer = 0;

helper def: endPointMap : Map(Turn!EndPoint, Urn!EndPoint) = Map{};

helper def: emptyPointMap : Map(Turn!Connect, Urn!EmptyPoint) = Map{};

helper def: tUCMmap : Urn!UCMmap = OclUndefined;

--------------2/5 HELPERS---------------------

helper context Turn!Text def : asString() : String =
	self.content -> iterate(item; condition : String = '' | condition.concat(item));

helper context String def : capitalize(): String = 
	self.substring(1,1).toUpper() + self.substring(2, self.size());

helper context Integer def : inc() : Integer = self + 1;

helper context Urn!UCMmap def : getNode(turnNodeName: String) : OclAny = 
	self.nodes -> any(n|n.name=turnNodeName);

--This should only be called on TURN objects; I haven't been able to determine how to express that restriction using OCL, though.
helper context OclAny def : turnGetLongestName() : String = 
	if(not self.longName.oclIsUndefined()) then
		if(not self.longName.longname.oclIsUndefined()) then
			self.longName.longname
		else
			self.name	
		endif
	else
		self.name	
	endif;

helper context Turn!PathBody def : meetsOrJoinConditions(pathend: Urn!PathBodyNode) : Boolean =
	(pathend.oclIsTypeOf(Urn!EndPoint) and not pathend.pred -> isEmpty())
		or (not self.referencedStub.oclIsUndefined() and pathend.pred -> size() >= self.index)
		or pathend.oclIsTypeOf(Urn!FailurePoint)
		or pathend.oclIsTypeOf(Urn!RespRef);

helper context Urn!UCMmap def : allRespDefsMatching(turnNodeName: String) : OclAny =
	self.nodes -> select(n|n.oclIsTypeOf(Urn!RespRef)) -> select(r|r.respDef.name=turnNodeName) -> flatten();

helper context Urn!PathNode def : nextFreeConnection() : Urn!NodeConnection =
	self.succ -> any(s|s.target.oclIsUndefined());

helper context Urn!PathNode def : mostRecentUnusedConnection() : Urn!NodeConnection =
	self.succ -> select(s|s.target.oclIsUndefined()) -> last();

helper context Urn!RespRef def : getRespName() : String =
	self.respDef.name;

-----------------------3/5 CALLED RULES-----------------------------
------------(sorry, spirit of declarative programming)--------------

rule nextId(){
	do{
		thisModule.id <- thisModule.id.inc();
		thisModule.id;
	}
}

rule useConnection(tToNode: Urn!PathNode, predecessor: Sequence(Urn!NodeConnection)){
	do{
		if(predecessor.oclIsKindOf(Sequence(Urn!NodeConnection))){
			tToNode.pred <- tToNode.pred.union(predecessor);
		}
		else{
			tToNode.pred <- tToNode.pred.including(predecessor);	
		}
		
		-- Return the new connection
		tToNode.pred -> last();
	}
}

rule directConnect(tFromNode: Urn!PathNode, tToNode: Urn!PathNode){
	do{
		if(not (tFromNode.oclIsUndefined() or tToNode.oclIsUndefined())){
			if(tFromNode.nextFreeConnection().oclIsUndefined() and tFromNode.succ -> any(c|c.target=tToNode).oclIsUndefined()){
				thisModule.createNewConnection(tFromNode);
			}
			
			thisModule.useConnection(tToNode, tFromNode.nextFreeConnection());
		}
	}
}

rule connect(tFromNode: Urn!PathNode, tToNode: Urn!PathNode){
	using{
		tOrJoin : Urn!OrJoin = OclUndefined;
	}
	do{
		if(not (tFromNode.oclIsUndefined() or tToNode.oclIsUndefined())){
			if(not tToNode.pred -> isEmpty() and not tFromNode.oclIsTypeOf(Urn!StartPoint) and not(tToNode.oclIsTypeOf(Urn!AndJoin) or tToNode.oclIsTypeOf(Urn!OrJoin))){
				tOrJoin <- thisModule.createOrJoin();
				tToNode.pred.first().target <- tOrJoin; --TODO: iterate over all of the pred
				thisModule.directConnect(tFromNode, tOrJoin);
				thisModule.directConnect(tOrJoin, tToNode);
				tToNode <- tOrJoin;
			}
			
			thisModule.directConnect(tFromNode, tToNode);
		}
	}
}

rule contributionNumberToKeyword(vQuantitativeContribution: Integer){
	using{
		vContribution :	String = OclUndefined;
	}
	do{
		-- Dictionary. Had to use called rule as elseif is not supported in helpers
		
		if(vQuantitativeContribution <= -1)
			vContribution <- 'Hurt';
		else if(vQuantitativeContribution < -49)
			vContribution <- 'SomeNegative';
		else if(vQuantitativeContribution = -100)
			vContribution <- 'Break';
		else if(vQuantitativeContribution = 0)
			vContribution <- 'Unknown';
		else if(vQuantitativeContribution < 50)
			vContribution <- 'Help';
		else if(vQuantitativeContribution <= 99)
			vContribution <- 'SomePositive';
		else if(vQuantitativeContribution = 100)
			vContribution <- 'Make';
		else
			vContribution <- OclUndefined;
		
		vContribution;
	}
}

rule contributionKeywordToNumber(vKeyword: String){
	using{
		vQuantitativeContribution : Integer = OclUndefined;	
	}
	do{
		if(vKeyword.equals('Make'))
			vQuantitativeContribution <- 100;
		else if(vKeyword.equals('Hurt'))
			vQuantitativeContribution <- -25;
		else if(vKeyword.equals('Break'))
			vQuantitativeContribution <- -100;
		else if(vKeyword.equals('SomePositive'))
			vQuantitativeContribution <- 50;
		else if(vKeyword.equals('SomeNegative'))
			vQuantitativeContribution <- -50;
		else if(vKeyword.equals('Help'))
			vQuantitativeContribution <- 25;
		else
			vQuantitativeContribution <- OclUndefined;
		
		vQuantitativeContribution;
	}
}

rule getUrnComponentRef(sObject: OclAny){
	using{
		tComponentRef : Urn!ComponentRef = OclUndefined;
	}
	do{
		if(not sObject.boundTo.oclIsUndefined()){
			if(not sObject.boundTo.comp.oclIsUndefined()){
				tComponentRef <- thisModule.resolveTemp(sObject.boundTo.comp, 'tComponentRef');
			}
			else{
				tComponentRef <- thisModule.resolveTemp(sObject.boundTo.comp2, 'tComponentRef');
			}
		}
		else{
			tComponentRef <- OclUndefined;	
		}
		
		tComponentRef;
	}
}

rule getPathEnd(sPathBody: Turn!PathBody){
	using{
		tNodeToConnect : Urn!PathNode = OclUndefined;
	}
	do{
		if(not sPathBody.pathEnd.oclIsUndefined()){
			tNodeToConnect <- thisModule.retrieveNode(sPathBody.pathEnd);	
		}
		else if(not sPathBody.referencedEnd.oclIsUndefined()){
			tNodeToConnect <- thisModule.retrieveNode(sPathBody.referencedEnd);
		}
		else if(not sPathBody.referencedStub.oclIsUndefined()){
			tNodeToConnect <- thisModule.retrieveNode(sPathBody.referencedStub);
		}
		else{
			tNodeToConnect <- thisModule.createEmptyPoint();
		}
		
		tNodeToConnect;
	}
}

rule getResponsibility(vResponsibilityName: String){
	do{
		Urn!Responsibility.allInstances() -> any(n|n.name=vResponsibilityName);	
	}
}

rule collectPathBodyNodes(sPathBody: Turn!PathBody){
	using{
		sPathNodes : Sequence(Turn!PathNode)	= sPathBody.pathNodes;
	}
	do{
		sPathNodes <- sPathNodes -> flatten();
		
		thisModule.tUCMmap.nodes <- thisModule.tUCMmap.nodes.union(sPathNodes -> collect(sPathNode|thisModule.resolveTemp(sPathNode, 'tRespRef')));
		thisModule.tUCMmap.nodes <- thisModule.tUCMmap.nodes.union(sPathNodes -> collect(sPathNode|thisModule.resolveTemp(sPathNode, 'tAndJoin')));
		thisModule.tUCMmap.nodes <- thisModule.tUCMmap.nodes.union(sPathNodes -> collect(sPathNode|thisModule.resolveTemp(sPathNode, 'tOrJoin')));
		thisModule.tUCMmap.nodes <- thisModule.tUCMmap.nodes.union(sPathNodes -> collect(sPathNode|thisModule.resolveTemp(sPathNode, 'tWaitingPlace')));
		thisModule.tUCMmap.nodes <- thisModule.tUCMmap.nodes.union(sPathNodes -> collect(sPathNode|thisModule.resolveTemp(sPathNode, 'tFailurePoint')));
		
		if(not sPathBody.pathEnd.oclIsUndefined()){
			if(sPathBody.pathEnd.oclIsTypeOf(Turn!EndpointWithConnect)){
				if(not sPathBody.pathEnd.regularEnd.oclIsUndefined()){
					thisModule.tUCMmap.nodes <- thisModule.tUCMmap.nodes.including(thisModule.retrieveNode(sPathBody.pathEnd));
				}
			}
			else{
				thisModule.tUCMmap.nodes <- thisModule.tUCMmap.nodes.including(thisModule.retrieveNode(sPathBody.pathEnd));
			}
		}
	}
}

rule retrieveNode(sPathNode: Turn!PathNode){
	using{
		tRetrievedNode : Urn!PathNode = OclUndefined;
	}
	do{
		-- This is a rather obtuse approach but was necessary as multiple conditionals in retrieveNode was causing slow build times.
		-- I'm not sure how inefficient this approach is; if the system is running slowly, it may be worth looking at a different
		-- implementation of this rule.
		
		if(not sPathNode.oclIsUndefined()){
		
			tRetrievedNode <- Sequence{};
			
			if(sPathNode.oclIsTypeOf(Turn!Stub)){
				if(not sPathNode.stubRef.oclIsUndefined()){
					sPathNode <- sPathNode.stubRef;
				}
			}
			
			if(sPathNode.oclIsTypeOf(Turn!Connect)){
				sPathNode <- sPathNode.connectsTo;
			}
			
			tRetrievedNode <- tRetrievedNode.including(thisModule.resolveTemp(sPathNode, 'tWaitingPlace'));
			tRetrievedNode <- tRetrievedNode.including(thisModule.resolveTemp(sPathNode, 'tFailurePoint'));
			tRetrievedNode <- tRetrievedNode.including(thisModule.resolveTemp(sPathNode, 'tRespRef'));
			tRetrievedNode <- tRetrievedNode.including(thisModule.resolveTemp(sPathNode, 'tTimer'));
			tRetrievedNode <- tRetrievedNode.including(thisModule.resolveTemp(sPathNode, 'tAndFork'));
			tRetrievedNode <- tRetrievedNode.including(thisModule.resolveTemp(sPathNode, 'tOrFork'));
			tRetrievedNode <- tRetrievedNode.including(thisModule.resolveTemp(sPathNode, 'tStub'));
			tRetrievedNode <- tRetrievedNode.including(thisModule.resolveTemp(sPathNode, 'tAndJoin'));
			tRetrievedNode <- tRetrievedNode.including(thisModule.resolveTemp(sPathNode, 'tOrJoin'));
			
			tRetrievedNode <- tRetrievedNode -> any(e|not e.oclIsUndefined());
			
			if(sPathNode.oclIsTypeOf(Turn!EndPoint)){
				tRetrievedNode <- thisModule.endPointMap.get(sPathNode);
			}
			
			if(sPathNode.oclIsTypeOf(Turn!EndpointWithConnect)){
				if(sPathNode.regularEnd.oclIsUndefined()){
					tRetrievedNode <- thisModule.tUCMmap.nodes -> any(n|n.oclIsTypeOf(Urn!EndPoint));
				}
				else{
					sPathNode <- sPathNode.regularEnd;
					tRetrievedNode <- thisModule.retrieveNode(sPathNode);
				}
			}
			
			if(tRetrievedNode.oclIsUndefined()){
				tRetrievedNode <- thisModule.tUCMmap.getNode(sPathNode.turnGetLongestName());
			}
		}
		
		tRetrievedNode; --returns a single node, not a sequence
	}
}

-------------4/5 MATCHED RULES WITHOUT DO BLOCKS------------

rule Actor2Actor{
	from 
		sActor: Turn!Actor
	to 
		tActor: Urn!Actor(
			id <- thisModule.nextId().toString(),
			name <- sActor.turnGetLongestName(),
			importanceQuantitative <- sActor.importanceQuantitative
		),
		tActorRef: Urn!ActorRef(
			id <- thisModule.nextId().toString(),
			name <- 'ActorRef' + tActorRef.id,
			contDef <- tActor,
			nodes <- sActor.elems -> collect(e|thisModule.resolveTemp(e, 'tIntentionalElementRef')).union(sActor.elems -> collect(e|thisModule.resolveTemp(e, 'tBelief'))),
			label <- tCompLabel
		),
		tCompLabel: Urn!ComponentLabel
}

rule AndFork2AndFork{
	from
		sAndFork: Turn!AndFork
	using{
		vId : String = thisModule.nextId().toString();
		vAndForkName : String = sAndFork.turnGetLongestName();
		vName : String = 
			if(vAndForkName.oclIsUndefined()) then
				'AndFork' + vId
			else
				vAndForkName
			endif;
		vLabel : Urn!Label =
			if(vAndForkName.oclIsUndefined()) then
				OclUndefined
			else
				thisModule.createLabel()
			endif;
	}
	to
		tAndFork: Urn!AndFork (
			id <- vId,
			name <- vName,
			label <- vLabel,
			diagram <- thisModule.tUCMmap,
			contRef <- thisModule.getUrnComponentRef(sAndFork)
		)
}

rule AndJoin2AndJoin{
	from 	
		sAndJoin: Turn!AndJoin
	to
		tAndJoin: Urn!AndJoin(
			id <- thisModule.nextId().toString(),
			name <- sAndJoin.turnGetLongestName(),
			label <- tNodeLabel,
			contRef <- thisModule.getUrnComponentRef(sAndJoin)
		),
		tNodeLabel: Urn!NodeLabel
}

rule ComponentBinding2ComponentBinding{
	from
		sComponentBinding: Turn!ComponentBinding
	to
		tComponentBinding: Urn!ComponentBinding(
			pluginComponent <- thisModule.resolveTemp(sComponentBinding.componentIn, 'tComponentRef'),
			parentComponent <- thisModule.resolveTemp(sComponentBinding.componentOut, 'tComponentRef')
		)
}

rule Concern2Concern{
	from 
		sConcern: Turn!Concern
	to 
		tConcern: Urn!Concern(
			id <- thisModule.nextId().toString(),
			name <- sConcern.turnGetLongestName(),
		 	elements <- sConcern.elements,
			--TODO: Turn!Concern has no property metadata; is this perhaps a logical error?
			--metadata <- s.metadata,
			condition <- sConcern.condition
		)
}

rule Condition2Condition{
	from 
		sCondition: Turn!Condition
	to 
		tCondition: Urn!Condition(
			expression <- sCondition.expression.asString(),
			label <- sCondition.expression.asString()
		)
	
}

rule Contribution2Contribution{
	from 
		sContribution: Turn!Contribution(sContribution.link.type.toString() <> 'belief')
	using{
		vHasNoContributionType : Boolean = sContribution.contribution.toString().equals('undefined');
	
		vContribution : String =
			if(vHasNoContributionType) then
				thisModule.contributionNumberToKeyword(sContribution.quantitativeContribution)
			else
				sContribution.contribution.toString().capitalize()
			endif;

		vQuantitativeContribution : Integer = thisModule.contributionKeywordToNumber(vContribution);
	}
	to 
		tContribution: Urn!Contribution(
			id <- thisModule.nextId().toString(),
			name <- sContribution.turnGetLongestName(),
		 	dest <- thisModule.resolveTemp(sContribution.dest, 'tIntentionalElement'),
			refs <- tLinkRef,
	 		correlation <- sContribution.correlation,
			contribution <- vContribution,
			quantitativeContribution <- vQuantitativeContribution
		),
		tLinkRef: Urn!LinkRef(
			link <- tContribution,
			target <- thisModule.resolveTemp(sContribution.dest, 'tIntentionalElementRef')
		)
}

rule ContributionChange2ContributionChange{
	from
		sContributionChange: Turn!ContributionChange
	using{
		vNewContribution : String = 
			if(not sContributionChange.newContribution.toString().equals('undefined')) then
				sContributionChange.newContribution.toString().capitalize()
			else
				OclUndefined
			endif;		
	}
	to
		tContributionChange: Urn!ContributionChange(
			contribution <- sContributionChange.contribution,
			newQuantitativeContribution <- sContributionChange.newQuantitativeContribution,
			newContribution <- vNewContribution
		)
}

rule ContributionContext2ContributionContext{
	from
		sContributionContext: Turn!ContributionContext
	to
		tContContext: Urn!ContributionContext(
			id <- thisModule.nextId().toString(),
			name <- sContributionContext.turnGetLongestName(),
			changes <- sContributionContext.changes,
			includedContexts <- sContributionContext.includedContexts
		)
}

rule ContributionContextGroup2ContributionContextGroup{
	from
		sContributionContextGroup: Turn!ContributionContextGroup
	to
		tContribGroups: Urn!ContributionContextGroup(
			id <- thisModule.nextId().toString(),
			name <- sContributionContextGroup.turnGetLongestName(),
			contribs <- sContributionContextGroup.contribs.including(sContributionContextGroup.contrib)
		)
}
	
rule Decomposition2Decomposition{
	from 
		sDecomposition: Turn!Decomposition(sDecomposition.link.type.toString() <> 'belief')
	to 
		tDecomposition: Urn!Decomposition(
			id <- thisModule.nextId().toString(),
			name <- sDecomposition.turnGetLongestName(),
		 	dest <- thisModule.resolveTemp(sDecomposition.dest, 'tIntentionalElement'),
			refs <- tLinkRef
		),
		tLinkRef: Urn!LinkRef(
			link <- tDecomposition,
			target <- thisModule.resolveTemp(sDecomposition.dest, 'tIntentionalElementRef')
		)
}

rule Dependency2Dependency{
	from 
		sDependency: Turn!Dependency(sDependency.link.type.toString() <> 'belief')
	to 
		tDependency: Urn!Dependency(
			id <- thisModule.nextId().toString(),
			name <- sDependency.turnGetLongestName(),
		 	dest <- thisModule.resolveTemp(sDependency.dest, 'tIntentionalElement'),
			refs <- tLinkRef
		),
		tLinkRef: Urn!LinkRef(
			link <- tDependency,
			target <- thisModule.resolveTemp(sDependency.dest, 'tIntentionalElementRef')
		)
}

rule Evaluation2Evaluation{
	from
		sEvaluation: Turn!Evaluation
	using{
		vKPIEvalValueSet : Urn!KPIEvalValueSet =
			if(sEvaluation.conversion.oclIsTypeOf(Turn!QualToQMappings)) then
				thisModule.createQMapKpiEvalValueSet(sEvaluation.conversion)
			else
				if(sEvaluation.conversion.oclIsTypeOf(Turn!LinearConversion)) then
					thisModule.createKpiEvalValueSet(sEvaluation.conversion)
				else
					OclUndefined
				endif
			endif;
	}
 	to 
		tEvaluation: Urn!Evaluation(
		 	exceeds <- sEvaluation.exceeds,
		 	intElement <- sEvaluation.intElement,
			evaluation <- sEvaluation.evaluation,
			qualitativeEvaluation <- sEvaluation.qualitativeEvaluation.toString().capitalize(),
			kpiEvalValueSet <- vKPIEvalValueSet
		)
}

rule FailurePoint2FailurePoint{
	from		
		sFailurePoint: Turn!FailurePoint
	using{
		vExpression : String = 
			if(not sFailurePoint.failLabel.oclIsUndefined()) then
				sFailurePoint.failLabel.failure
			else
				OclUndefined
			endif;
	}
	to
		tFailurePoint: Urn!FailurePoint (
			id <- thisModule.nextId().toString(),
			name <- sFailurePoint.turnGetLongestName(),
			succ <- tNodeConnection,
			label <- tNodeLabel,
			expression <- vExpression
		),
		tNodeConnection: Urn!NodeConnection(
			condition <- sFailurePoint.condition
		),
		tNodeLabel: Urn!NodeLabel
}

rule Metadata2Metadata{
	from 
		sMetadata: Turn!Metadata
	to 
		tMetadata: Urn!Metadata(
			name <- sMetadata.name
		)
}

rule OrFork2OrFork{
	from
		sOrFork: Turn!OrFork
	using{
		vId : String = thisModule.nextId().toString();
		vOrForkName : String = sOrFork.turnGetLongestName();
		
		vName : String = 
			if(vOrForkName.oclIsUndefined()) then
				'OrFork' + vId
			else
				vOrForkName
			endif;
		vLabel : Urn!Label =
			if(vOrForkName.oclIsUndefined()) then
				OclUndefined
			else
				thisModule.createLabel()
			endif;		
	}
	to
		tOrFork: Urn!OrFork(
			id <- vId,
			name <- vName,
			label <- vLabel,
			diagram <- thisModule.tUCMmap,
			contRef <- thisModule.getUrnComponentRef(sOrFork)
		)
}

rule OrJoin2OrJoin{
	from 	
		sOrJoin: Turn!OrJoin
	to
		tOrJoin: Urn!OrJoin(
			id <- thisModule.nextId().toString(),
			name <- sOrJoin.turnGetLongestName(),
			label <- tNodeLabel,
			contRef <- thisModule.getUrnComponentRef(sOrJoin)
		),
		tNodeLabel: Urn!NodeLabel
}

rule PluginBinding2PluginBinding{
	from 
		sPluginBinding: Turn!PluginBinding	
	to
		tPluginBinding: Urn!PluginBinding(
			-- this could be other way round, binding could be inBinding or OutBinding and vice-versa.
			in <- sPluginBinding.bindings -> collect(b|thisModule.resolveTemp(b, 'tInBinding')).including(thisModule.resolveTemp(sPluginBinding.binding, 'tInBinding')),
			components <- sPluginBinding.bindings -> collect(b|thisModule.resolveTemp(b,'tComponentBinding')),
			out <- sPluginBinding.bindings -> collect(b|thisModule.resolveTemp(b, 'tOutBinding')).including(thisModule.resolveTemp(sPluginBinding.binding, 'tOutBinding')),
			plugin <- thisModule.resolveTemp(sPluginBinding.map, 'tUCMmap'),
			precondition <- thisModule.resolveTemp(sPluginBinding.condition, 'tCondition'),
			replicationFactor <- sPluginBinding.replication
		)
}

rule StartPoint2StartPoint{
	from
		sStartPoint: Turn!StartPoint
	using{
		vFailureKind : String =
			if(not sStartPoint.failKind.oclIsUndefined()) then
				sStartPoint.failKind.toString().capitalize()
			else
				OclUndefined
			endif;
		vPrecondition : Urn!Condition =
			if(sStartPoint.failKind.oclIsUndefined()) then
				sStartPoint.precondition
			else
				if(not sStartPoint.catches.oclIsUndefined()) then
					thisModule.createCondition(sStartPoint.catches)
				else
					OclUndefined
				endif
			endif;
	}
	to
		tStartPoint: Urn!StartPoint(
			id <- thisModule.nextId().toString(),
			name <- sStartPoint.turnGetLongestName(),
			label <- tNodeLabel,
			precondition <- vPrecondition,
			contRef <- thisModule.getUrnComponentRef(sStartPoint),
			failureKind <- vFailureKind
		),
		tNodeLabel: Urn!NodeLabel
}

rule Strategies2Strategies{
	from
		sEvaluationStrategy: Turn!EvaluationStrategy
	using{
		vAuthor : String =
			if(not sEvaluationStrategy.info.oclIsUndefined()) then
				sEvaluationStrategy.info.author
			else
				OclUndefined
			endif;
	}
	to
		tEvaluationStrategy: Urn!EvaluationStrategy(
			id <- thisModule.nextId().toString(),
			name <- sEvaluationStrategy.turnGetLongestName(),
			evaluations <- sEvaluationStrategy.evaluations,
			includedStrategies <- sEvaluationStrategy.includedStrategies,
			author <- vAuthor
		)
}

rule StrategiesGroup2StrategiesGroup{
	from
		sStrategiesGroup: Turn!StrategiesGroup
	to
		tStrategiesGroup: Urn!StrategiesGroup(
			id <- thisModule.nextId().toString(),
			name <- sStrategiesGroup.turnGetLongestName(),
			strategies <- sStrategiesGroup.evalStrategies.including(sStrategiesGroup.evalStrategy)
		)
}

rule Stub2Stub{
	from
		sStub: Turn!Stub(sStub.stubRef.oclIsUndefined())
	using{
		vIsBlocking : Boolean = sStub.stubType.toString() = 'blocking';
		vIsSynchronizing : Boolean = vIsBlocking or sStub.stubType.toString() = 'synchronizing';
		vIsDynamic : Boolean = 
			if(vIsSynchronizing) then
				true
			else
				if(not sStub.params.oclIsUndefined()) then
					sStub.params.plugin -> flatten() -> size() >= 2
				else
					OclUndefined
				endif
			endif;
	}
	to
		tStub: Urn!Stub(
			id <- thisModule.nextId().toString(),
			name <- sStub.turnGetLongestName(),
			diagram <- thisModule.tUCMmap,
			label <- tNodeLabel,
			blocking <- vIsBlocking,
			synchronization <- vIsSynchronizing,
			contRef <- thisModule.getUrnComponentRef(sStub),
			dynamic <- vIsDynamic
		),
		tNodeLabel: Urn!NodeLabel
}

rule StubDeclaration2Stub{
	from
		sStubDeclaration: Turn!StubDeclaration
	to
		tStub: Urn!Stub(id <- thisModule.nextId().toString(),
			name <- sStubDeclaration.turnGetLongestName(),
			diagram <- thisModule.tUCMmap
		)
}

rule QMapping2QMapping{
	from 
		sQualToQMapping: Turn!QualToQMapping
	to
		tQualitativeMapping: Urn!QualitativeMapping(
			realWorldLabel <- sQualToQMapping.realWorldLabel,
			exceeds	<- sQualToQMapping.exceeds,
			evaluation <- sQualToQMapping.evaluation,
			qualitativeEvaluation <- sQualToQMapping.qualitativeEvaluation.toString().capitalize()
		)
}

rule QMappings2QMappings{
	from
		sQualToQMappings: Turn!QualToQMappings
	to
		tQualitativeMappings: Urn!QualitativeMappings(
			id <- thisModule.nextId().toString(),
			name <- sQualToQMappings.turnGetLongestName(),
			mapping <- sQualToQMappings.mappings
		)
}

rule RespRef2Responsibility{
	from
		sRespRef: Turn!RespRef
	using{
		tResponsibility : Urn!Responsibility = 	
			if(thisModule.getResponsibility(sRespRef.turnGetLongestName()).oclIsUndefined()) then
				thisModule.createResponsibility(sRespRef)
			else
				thisModule.getResponsibility(sRespRef.turnGetLongestName())
			endif;
	}
	to
		tRespRef: Urn!RespRef(
			id <- thisModule.nextId().toString(),
			name <- 'RespRef' + tRespRef.id,
			label <- tNodeLabel,
			respDef <- tResponsibility,
			contRef <- thisModule.getUrnComponentRef(sRespRef)
		),
		tNodeLabel: Urn!NodeLabel
}

rule Timer2Timer{
	from
		sTimer: Turn!Timer
	to
		tTimer: Urn!Timer(
			id <- thisModule.nextId().toString(),
			name <- sTimer.turnGetLongestName(),
			succ <- tNodeConn,
			diagram <- thisModule.tUCMmap,
			label <- tNodeLabel,
			waitType <- sTimer.kind.toString().capitalize(),
			contRef <- thisModule.getUrnComponentRef(sTimer)
		),
		tNodeConn: Urn!NodeConnection(
			condition <- sTimer.condition
		),
		tNodeLabel: Urn!NodeLabel
}

rule URNlink2URNlink{
	from 
		sURNlink: Turn!URNlink
	to 
		tURNlink: Urn!URNlink(
			type <- sURNlink.type,
			fromElem <- sURNlink.fromElem,
			toElem <- sURNlink.toElem
		)
}

rule WaitingPlace2WaitingPlace{
	from		
		sWaitingPlace: Turn!WaitingPlace
	to
		tWaitingPlace: Urn!WaitingPlace(
			id <- thisModule.nextId().toString(),
			name <- sWaitingPlace.turnGetLongestName(),
			succ <- tNodeConn,
			label <- tNodeLabel,
			waitType <- sWaitingPlace.kind.toString().capitalize()
		),
		tNodeConn: Urn!NodeConnection (
			condition <- sWaitingPlace.condition
		),
		tNodeLabel: Urn!NodeLabel
}

----------5/5 MATCHED RULES WITH DO BLOCKS----------------

rule ComponentRef2ComponentRef {
	from 
		sComponentRef: Turn!ComponentRef
	using{
		vExistingComponent : Urn!Component = Urn!Component.allInstances() -> any(c|c.name=sComponentRef.name);
		vRetrievedComponent : Urn!Component =
			if(vExistingComponent.oclIsUndefined()) then
				thisModule.createComponent(sComponentRef)
			else
				vExistingComponent
			endif;
	}
	to
		tComponentRef: Urn!ComponentRef(
			id <- thisModule.nextId().toString(),
			name <- 'ComponentRef' + tComponentRef.id,
			label <- tComponentLabel,
			diagram <- sComponentRef.map,
			contDef <- vRetrievedComponent,
			parent <- thisModule.getUrnComponentRef(sComponentRef)
		),
		tComponentLabel: Urn!ComponentLabel
	do{
		if(not sComponentRef.kind.oclIsUndefined() and sComponentRef.kind.toString() <> 'parent'){
			tComponentRef.contDef.kind <- sComponentRef.kind.toString().capitalize();
		}
		else if(sComponentRef.kind <> 'parent'){
			tComponentRef.contDef.kind <- 'Team';
		}
		
		if(not sComponentRef.boundTo.oclIsUndefined()){
			if(not sComponentRef.boundTo.comp.oclIsUndefined()){
				tComponentRef.parent <- Urn!Component.allInstances() -> any(n|sComponentRef.boundTo.comp.name=n.name).contRefs -> any(r|r.diagram = sComponentRef.map);
			}
			else{
				tComponentRef.parent <- Urn!Component.allInstances() -> any(n|sComponentRef.boundTo.comp2.name=n.name).contRefs -> any(r|r.diagram = sComponentRef.map);
			}
		}
		
		tComponentRef.contDef.protected <- sComponentRef.protected;
		
		for(elem in (sComponentRef.elements.including(sComponentRef.element)) -> select(e|e.oclIsTypeOf(Turn!LongBoundElement))){
			tComponentRef.metadata <- tComponentRef.metadata.including(thisModule.createMetadata('from', elem.from));
			tComponentRef.metadata <- tComponentRef.metadata.including(thisModule.createMetadata('to', elem.to));
		}
	}
}

rule IntentionalElement2Belief{
	from
		sIntentionalElement: Turn!IntentionalElement(sIntentionalElement.type.toString() = 'belief')
	to 
	 	tBelief: Urn!Belief(
	 		id <- thisModule.nextId().toString(),
	 		name <- sIntentionalElement.name,
			description <- sIntentionalElement.name
	 	)
	do{
		if(not sIntentionalElement.linksSrc -> isEmpty()){
			for(sLink in sIntentionalElement.linksSrc){
				tBelief.succ <- thisModule.createBeliefLink(sLink);
		 	}
		}
	}
}

rule IntentionalElement2IntentionalElement{
	from 
		sIntentionalElement: Turn!IntentionalElement(sIntentionalElement.type.toString() <> 'belief')
	using{
		vDecomposition : Turn!Decomposition = Turn!Decomposition -> allInstances() -> any(d|d.dest=sIntentionalElement);
		vDecompositionType : String = 
			if(not vDecomposition.oclIsUndefined()) then
				vDecomposition.decompositionType.toString().capitalize()
			else
				OclUndefined
			endif;
		vImportance : String =
			if(sIntentionalElement.importance.toString().toLower().equals('none')) then
				OclUndefined
			else
				sIntentionalElement.importance.toString().capitalize()
			endif;
	}
	to 
		tIntentionalElementRef: Urn!IntentionalElementRef(
			id <- thisModule.nextId().toString(),
			name <- sIntentionalElement.turnGetLongestName(),
			def <- tIntentionalElement,
			succ <- sIntentionalElement.linksSrc -> collect(c|thisModule.resolveTemp(c, 'tLinkRef'))
		),
		tIntentionalElement: Urn!IntentionalElement(
			id <- thisModule.nextId().toString(),
			name <- sIntentionalElement.turnGetLongestName(),
			linksSrc <- sIntentionalElement.linksSrc,
			decompositionType <- vDecompositionType,
			importanceQuantitative <- sIntentionalElement.importanceQuantitative,
			importance <- vImportance,
			metadata <- thisModule.createMetadata('TURN-URN-NAME', sIntentionalElement.name)
		)
	do{
		if(tIntentionalElementRef.name.oclIsUndefined()){
			tIntentionalElementRef.name <- 'IntentionalElementRef' + tIntentionalElementRef.id;
		}
		
		if(Turn!Decomposition -> allInstances() -> select(d|d.dest=sIntentionalElement) -> size() > 0){
			tIntentionalElement.decompositionType <-Turn!Decomposition -> allInstances() -> select(d|d.dest=sIntentionalElement) -> collect(a|a.decompositionType.toString().capitalize())-> first();
		}
		if(sIntentionalElement.type.toString() = 'resource'){
			tIntentionalElement.type <- 'Ressource';
		}
		else{
			tIntentionalElement.type <- sIntentionalElement.type.toString().capitalize();
		}
		 
		 --Added because the default value in enum is considered always.
		if(sIntentionalElement.importance.toString().equals('high') and sIntentionalElement.importanceQuantitative <> 0){
			tIntentionalElement.importanceQuantitative <- sIntentionalElement.importanceQuantitative;
		}
		else{
			tIntentionalElement.importance <- sIntentionalElement.importance.toString().capitalize();
		}
	}
}

rule UCMmap2UCMmap{
	from
		sUCMmap: Turn!UCMmap
	to
		tUCMmap: Urn!UCMmap(
			id <- thisModule.nextId().toString(),
			name <- sUCMmap.turnGetLongestName(),
			contRefs <- sUCMmap.components -> collect(c|thisModule.resolveTemp(c, 'tComponentRef')),
			nodes <- sUCMmap.paths -> flatten() -> collect(p|p.startPoint) -> flatten() -> collect(p|thisModule.resolveTemp(p, 'tStartPoint')),
			connections <- sUCMmap.paths -> flatten() -> collect(p|p.startPoint) -> flatten() -> collect(p|thisModule.resolveTemp(p, 'tNodeConn'))
		)
	do{
		thisModule.connectUCMmap(tUCMmap, sUCMmap.paths);
		
		for(tContRef in tUCMmap.contRefs){
			thisModule.initContRef(tContRef, tUCMmap.nodes); --iterate through them using node.succ.target until no more successors found (bc at end of a branch)
		}
	}
}

rule InBinding2InBinding{
	from
		sInBinding: Turn!InBinding
	to
		tInBinding: Urn!InBinding
	do{
		thisModule.initBinding(sInBinding, tInBinding);
		tInBinding.startPoint <- thisModule.resolveTemp(sInBinding.mapStart, 'tStartPoint');
	}
}

rule OutBinding2OutBinding{
	from
		sOutBinding: Turn!OutBinding
	to
		tOutBinding: Urn!OutBinding
	do{
		thisModule.initBinding(sOutBinding, tOutBinding);
		tOutBinding.endPoint <- thisModule.retrieveNode(sOutBinding.mapEnd);
	}
}

rule URNspec2URNspec{
	from 
		sURNspec: Turn!URNspec
	using{
		vElements : Sequence(Turn!IntentionalElement) = sURNspec.actors -> collect(actor|actor.elems) -> flatten();	
		vAllIntElements : Sequence(Turn!IntentionalElement) = vElements -> select(e|e.type.toString() <> 'belief');
		vIntElemRefs : Sequence(Urn!IntentionalElementRef) = vElements -> collect(e| thisModule.resolveTemp(e, 'tIntentionalElementRef'));
		vBeliefs : Sequence(Urn!Belief) = vElements -> select(e|e.type.toString() = 'belief') -> collect(b| thisModule.resolveTemp(b, 'tBelief'));
			
		vLinksSrc : Sequence(Turn!ElementLink) = vElements -> collect(e|e.linksSrc) -> flatten();
		vContributions : Sequence(Urn!Contribution) = vLinksSrc -> collect(l|thisModule.resolveTemp(l, 'tContribution'));
		vDecompositions : Sequence(Urn!Decomposition) = vLinksSrc -> collect(l|thisModule.resolveTemp(l, 'tDecomposition'));
		vDependencies : Sequence(Urn!Dependency) = vLinksSrc -> collect(l|thisModule.resolveTemp(l, 'tDependency'));
		
		vLinkRefs : Sequence(Urn!LinkRef) = vLinksSrc -> collect(m| thisModule.resolveTemp(m, 'tLinkRef'));
	}
	to
		tURNspec: Urn!URNspec(
			name <- sURNspec.name,
			metadata <- sURNspec.metadata,
			grlspec <- tGRLspec,
			ucmspec <- tUCMspec,
			urnLinks <- sURNspec.urnlinks,
			urndef <- tURNdef
		),
		tURNdef: Urn!URNdefinition(
			specDiagrams <- Sequence{tGRLSpecDiag}.union(sURNspec.ucmMaps -> collect(m|thisModule.resolveTemp(m, 'tUCMmap'))),
			concerns <- sURNspec.concerns,
			components <- Urn!Component.allInstances(),
			responsibilities <- Urn!Responsibility.allInstances()
		),
		tGRLspec: Urn!GRLspec(
			actors <- sURNspec.actors,
			intElements <- vAllIntElements -> collect(i|thisModule.resolveTemp(i, 'tIntentionalElement')),
			groups <- sURNspec.stratGroups,
			strategies <- sURNspec.strategies,
			contributionGroups <- sURNspec.contribContextGroups,
			contributionContexts <- sURNspec.contribContexts,
			KPIConversion <- sURNspec.indConversions -> select(c|c.oclIsTypeOf(Turn!QualToQMappings)),
			links <- vContributions.union(vDecompositions).union(vDependencies)
		),
		tGRLSpecDiag: Urn!GRLGraph(
			id <- thisModule.nextId().toString(),
		 	nodes <- vIntElemRefs.union(vBeliefs),
			contRefs <- sURNspec.actors -> collect(a|thisModule.resolveTemp(a, 'tActorRef')),
			connections <- vLinkRefs.union(vBeliefs -> collect(b|b.succ))
		),
		tUCMspec: Urn!UCMspec()
	do{
		if(not sURNspec.info.oclIsUndefined()){
			tURNspec.description <- sURNspec.info.description;
			tURNspec.author <- sURNspec.info.author;
			tURNspec.created <- sURNspec.info.created;
			tURNspec.modified <- sURNspec.info.modified;
			tURNspec.specVersion <- sURNspec.info.specVersion;
			tURNspec.urnVersion <- sURNspec.info.urnVersion; 
		}
		
		if(not sURNspec.metadata -> any(m|m.name='TURN-URN-nextGlobalID').oclIsUndefined()){
	 		thisModule.id <- sURNspec.metadata -> any(m|m.name='TURN-URN-nextGlobalID').value.toInteger();
		}
		
		tURNspec.nextGlobalID <- thisModule.id.toString();
	}
}
